/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { VobjectsObjectNameActionsMergePostRequestInner } from '../model/vobjectsObjectNameActionsMergePostRequestInner';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DefaultService {
    private basePath: string = 'http://}/api/v25.1';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Retrieve API Versions
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public apiGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public apiGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public apiGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/api/`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Content File
     * 
     * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (componentTypeAndRecordName === null || componentTypeAndRecordName === undefined){
            throw new Error('Required parameter componentTypeAndRecordName was null or undefined when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/api/mdl/components/${encodeURIComponent(String(componentTypeAndRecordName))}/files`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Component Record (MDL)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (componentTypeAndRecordName === null || componentTypeAndRecordName === undefined){
            throw new Error('Required parameter componentTypeAndRecordName was null or undefined when calling apiMdlComponentsComponentTypeAndRecordNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/api/mdl/components/${encodeURIComponent(String(componentTypeAndRecordName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Asynchronous MDL Script Results
     * 
     * @param jobId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public apiMdlExecuteAsyncJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public apiMdlExecuteAsyncJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public apiMdlExecuteAsyncJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling apiMdlExecuteAsyncJobIdResultsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/api/mdl/execute_async/${encodeURIComponent(String(jobId))}/results`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Execute MDL Script Asynchronously
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public apiMdlExecuteAsyncPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public apiMdlExecuteAsyncPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public apiMdlExecuteAsyncPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/api/mdl/execute_async`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Execute MDL Script
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public apiMdlExecutePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public apiMdlExecutePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public apiMdlExecutePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/api/mdl/execute`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Upload Content File
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public apiMdlFilesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public apiMdlFilesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public apiMdlFilesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/api/mdl/files`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Audit Details
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
     * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
     * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public audittrailAuditTrailTypeGet(auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public audittrailAuditTrailTypeGet(auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public audittrailAuditTrailTypeGet(auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (auditTrailType === null || auditTrailType === undefined){
            throw new Error('Required parameter auditTrailType was null or undefined when calling audittrailAuditTrailTypeGet.');
        }

        let queryParameters: string[] = [];
        if (startDate !== undefined) {
            queryParameters.push('startDate='+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push('endDate='+encodeURIComponent(String(endDate)));
        }
        if (allDates !== undefined) {
            queryParameters.push('allDates='+encodeURIComponent(String(allDates)));
        }
        if (formatResult !== undefined) {
            queryParameters.push('formatResult='+encodeURIComponent(String(formatResult)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }
        if (objects !== undefined) {
            queryParameters.push('objects='+encodeURIComponent(String(objects)));
        }
        if (events !== undefined) {
            queryParameters.push('events='+encodeURIComponent(String(events)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/audittrail/${encodeURIComponent(String(auditTrailType))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Authentication Type Discovery
     * 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public authDiscoveryPost(accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public authDiscoveryPost(accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public authDiscoveryPost(accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/auth/discovery`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * OAuth 2.0 / OpenID Connect
     * 
     * @param oathOidcProfileId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (oathOidcProfileId === null || oathOidcProfileId === undefined){
            throw new Error('Required parameter oathOidcProfileId was null or undefined when calling authOauthSessionOathOidcProfileIdPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/auth/oauth/session/${encodeURIComponent(String(oathOidcProfileId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * User Name and Password
     * 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public authPost(contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public authPost(contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public authPost(contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/auth`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Single Source Code File
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeClassNameDelete(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeClassNameDelete(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeClassNameDelete(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (className === null || className === undefined){
            throw new Error('Required parameter className was null or undefined when calling codeClassNameDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/code/${encodeURIComponent(String(className))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Disable Vault Extension
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeClassNameDisablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeClassNameDisablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeClassNameDisablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (className === null || className === undefined){
            throw new Error('Required parameter className was null or undefined when calling codeClassNameDisablePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/code/${encodeURIComponent(String(className))}/disable`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Enable Vault Extension
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeClassNameEnablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeClassNameEnablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeClassNameEnablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (className === null || className === undefined){
            throw new Error('Required parameter className was null or undefined when calling codeClassNameEnablePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/code/${encodeURIComponent(String(className))}/enable`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Single Source Code File
     * 
     * @param className The fully qualified class name of your file.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeClassNameGet(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeClassNameGet(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeClassNameGet(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (className === null || className === undefined){
            throw new Error('Required parameter className was null or undefined when calling codeClassNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/code/${encodeURIComponent(String(className))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Profiling Sessions
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeProfilerGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeProfilerGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeProfilerGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/code/profiler`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Profiling Session
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeProfilerPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeProfilerPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeProfilerPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/code/profiler`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * End Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeProfilerSessionNameActionsEndPost(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeProfilerSessionNameActionsEndPost(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeProfilerSessionNameActionsEndPost(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (sessionName === null || sessionName === undefined){
            throw new Error('Required parameter sessionName was null or undefined when calling codeProfilerSessionNameActionsEndPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/code/profiler/${encodeURIComponent(String(sessionName))}/actions/end`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeProfilerSessionNameDelete(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeProfilerSessionNameDelete(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeProfilerSessionNameDelete(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (sessionName === null || sessionName === undefined){
            throw new Error('Required parameter sessionName was null or undefined when calling codeProfilerSessionNameDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/code/profiler/${encodeURIComponent(String(sessionName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Profiling Session
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeProfilerSessionNameGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeProfilerSessionNameGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeProfilerSessionNameGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (sessionName === null || sessionName === undefined){
            throw new Error('Required parameter sessionName was null or undefined when calling codeProfilerSessionNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/code/profiler/${encodeURIComponent(String(sessionName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Profiling Session Results
     * 
     * @param sessionName The name of the session, for example,  baseline__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codeProfilerSessionNameResultsGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codeProfilerSessionNameResultsGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codeProfilerSessionNameResultsGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (sessionName === null || sessionName === undefined){
            throw new Error('Required parameter sessionName was null or undefined when calling codeProfilerSessionNameResultsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/code/profiler/${encodeURIComponent(String(sessionName))}/results`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Add or Replace Single Source Code File
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public codePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public codePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public codePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/code`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Specific Root Nodes
     * 
     * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (edlHierarchyOrTemplate === null || edlHierarchyOrTemplate === undefined){
            throw new Error('Required parameter edlHierarchyOrTemplate was null or undefined when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/composites/trees/${encodeURIComponent(String(edlHierarchyOrTemplate))}/actions/listnodes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Root Nodes
     * 
     * @param edlHierarchyOrTemplate 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (edlHierarchyOrTemplate === null || edlHierarchyOrTemplate === undefined){
            throw new Error('Required parameter edlHierarchyOrTemplate was null or undefined when calling compositesTreesEdlHierarchyOrTemplateGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/composites/trees/${encodeURIComponent(String(edlHierarchyOrTemplate))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve a Node\&#39;s Children
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (parentNodeId === null || parentNodeId === undefined){
            throw new Error('Required parameter parentNodeId was null or undefined when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/composites/trees/edl_hierarchy__v/${encodeURIComponent(String(parentNodeId))}/children`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Node Order
     * 
     * @param parentNodeId The ID of a parent node in the hierarchy.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (parentNodeId === null || parentNodeId === undefined){
            throw new Error('Required parameter parentNodeId was null or undefined when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/composites/trees/edl_hierarchy__v/${encodeURIComponent(String(parentNodeId))}/children`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Component Record (XML/JSON)
     * 
     * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (componentTypeAndRecordName === null || componentTypeAndRecordName === undefined){
            throw new Error('Required parameter componentTypeAndRecordName was null or undefined when calling configurationComponentTypeAndRecordNameGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/configuration/${encodeURIComponent(String(componentTypeAndRecordName))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Component Record Collection
     * 
     * @param componentType 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public configurationComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public configurationComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public configurationComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (componentType === null || componentType === undefined){
            throw new Error('Required parameter componentType was null or undefined when calling configurationComponentTypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/configuration/${encodeURIComponent(String(componentType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Details from a Specific Object
     * 
     * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectNameAndObjectType === null || objectNameAndObjectType === undefined){
            throw new Error('Required parameter objectNameAndObjectType was null or undefined when calling configurationObjectNameAndObjectTypeGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/configuration/${encodeURIComponent(String(objectNameAndObjectType))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Details from All Object Types
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public configurationObjecttypeGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public configurationObjecttypeGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public configurationObjecttypeGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/configuration/Objecttype`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Lifecycle Role Assignment Override Rules
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public configurationRoleAssignmentRuleDelete(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public configurationRoleAssignmentRuleDelete(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public configurationRoleAssignmentRuleDelete(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/configuration/role_assignment_rule`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
     * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
     * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
     * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
     * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
     * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public configurationRoleAssignmentRuleGet(lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public configurationRoleAssignmentRuleGet(lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public configurationRoleAssignmentRuleGet(lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (lifecycleV !== undefined) {
            queryParameters.push('lifecycleV='+encodeURIComponent(String(lifecycleV)));
        }
        if (roleV !== undefined) {
            queryParameters.push('roleV='+encodeURIComponent(String(roleV)));
        }
        if (productV !== undefined) {
            queryParameters.push('productV='+encodeURIComponent(String(productV)));
        }
        if (countryV !== undefined) {
            queryParameters.push('countryV='+encodeURIComponent(String(countryV)));
        }
        if (studyV !== undefined) {
            queryParameters.push('studyV='+encodeURIComponent(String(studyV)));
        }
        if (studyCountryV !== undefined) {
            queryParameters.push('studyCountryV='+encodeURIComponent(String(studyCountryV)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/configuration/role_assignment_rule?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Lifecycle Role Assignment Override Rules
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public configurationRoleAssignmentRulePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public configurationRoleAssignmentRulePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public configurationRoleAssignmentRulePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/configuration/role_assignment_rule`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Lifecycle Role Assignment Rules (Default &amp; Override)
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public configurationRoleAssignmentRulePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public configurationRoleAssignmentRulePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public configurationRoleAssignmentRulePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/configuration/role_assignment_rule`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Delegated Session
     * 
     * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public delegationLoginPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public delegationLoginPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public delegationLoginPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/delegation/login`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Delegations
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public delegationVaultsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public delegationVaultsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public delegationVaultsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/delegation/vaults`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Session Keep Alive
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public keepAlivePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public keepAlivePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public keepAlivePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/keep-alive`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Limits on Objects
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public limitsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public limitsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public limitsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/limits`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Daily API Usage
     * 
     * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public logsApiUsageGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public logsApiUsageGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public logsApiUsageGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (date !== undefined) {
            queryParameters.push('date='+encodeURIComponent(String(date)));
        }
        if (logFormat !== undefined) {
            queryParameters.push('logFormat='+encodeURIComponent(String(logFormat)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/logs/api_usage?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Debug Logs
     * 
     * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
     * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public logsCodeDebugGet(userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public logsCodeDebugGet(userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public logsCodeDebugGet(userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (userId !== undefined) {
            queryParameters.push('userId='+encodeURIComponent(String(userId)));
        }
        if (includeInactive !== undefined) {
            queryParameters.push('includeInactive='+encodeURIComponent(String(includeInactive)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/logs/code/debug?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Debug Log
     * 
     * @param id The ID of the debug log to delete.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public logsCodeDebugIdActionsResetDelete(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public logsCodeDebugIdActionsResetDelete(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public logsCodeDebugIdActionsResetDelete(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling logsCodeDebugIdActionsResetDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/logs/code/debug/${encodeURIComponent(String(id))}/actions/reset`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Reset Debug Log
     * 
     * @param id The ID of the debug log to delete.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public logsCodeDebugIdActionsResetPost(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public logsCodeDebugIdActionsResetPost(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public logsCodeDebugIdActionsResetPost(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling logsCodeDebugIdActionsResetPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/logs/code/debug/${encodeURIComponent(String(id))}/actions/reset`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Debug Log Files
     * 
     * @param id The ID of the debug log to download.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public logsCodeDebugIdFilesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public logsCodeDebugIdFilesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public logsCodeDebugIdFilesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling logsCodeDebugIdFilesGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/logs/code/debug/${encodeURIComponent(String(id))}/files`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Single Debug Log
     * 
     * @param id The ID of the debug log to retrieve.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public logsCodeDebugIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public logsCodeDebugIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public logsCodeDebugIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling logsCodeDebugIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/logs/code/debug/${encodeURIComponent(String(id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Debug Log
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public logsCodeDebugPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public logsCodeDebugPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public logsCodeDebugPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/logs/code/debug`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download SDK Runtime Log
     * 
     * @param date 
     * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public logsCodeRuntimeGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public logsCodeRuntimeGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public logsCodeRuntimeGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (date !== undefined) {
            queryParameters.push('date='+encodeURIComponent(String(date)));
        }
        if (logFormat !== undefined) {
            queryParameters.push('logFormat='+encodeURIComponent(String(logFormat)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/logs/code/runtime?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Import Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public messagesMessageTypeActionsImportPost(messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public messagesMessageTypeActionsImportPost(messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public messagesMessageTypeActionsImportPost(messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (messageType === null || messageType === undefined){
            throw new Error('Required parameter messageType was null or undefined when calling messagesMessageTypeActionsImportPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/messages/${encodeURIComponent(String(messageType))}/actions/import`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Export Bulk Translation File
     * 
     * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public messagesMessageTypeLanguageLangActionsExportPost(messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public messagesMessageTypeLanguageLangActionsExportPost(messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public messagesMessageTypeLanguageLangActionsExportPost(messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (messageType === null || messageType === undefined){
            throw new Error('Required parameter messageType was null or undefined when calling messagesMessageTypeLanguageLangActionsExportPost.');
        }

        if (lang === null || lang === undefined){
            throw new Error('Required parameter lang was null or undefined when calling messagesMessageTypeLanguageLangActionsExportPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/messages/${encodeURIComponent(String(messageType))}/language/${encodeURIComponent(String(lang))}/actions/export`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Audit Metadata
     * 
     * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataAudittrailAuditTrailTypeGet(auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataAudittrailAuditTrailTypeGet(auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataAudittrailAuditTrailTypeGet(auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (auditTrailType === null || auditTrailType === undefined){
            throw new Error('Required parameter auditTrailType was null or undefined when calling metadataAudittrailAuditTrailTypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/audittrail/${encodeURIComponent(String(auditTrailType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Audit Types
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataAudittrailGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataAudittrailGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataAudittrailGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/audittrail`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Component Type Metadata
     * 
     * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataComponentsComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataComponentsComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataComponentsComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (componentType === null || componentType === undefined){
            throw new Error('Required parameter componentType was null or undefined when calling metadataComponentsComponentTypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/components/${encodeURIComponent(String(componentType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Component Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataComponentsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataComponentsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataComponentsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/components`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Template Node Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsBindersTemplatesBindernodesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsBindersTemplatesBindernodesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsBindersTemplatesBindernodesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/binders/templates/bindernodes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Template Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/binders/templates`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Annotation Placemark Type Metadata
     * 
     * @param placemarkType The name of the placemark type. For example, sticky__sys.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (placemarkType === null || placemarkType === undefined){
            throw new Error('Required parameter placemarkType was null or undefined when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/annotations/placemarks/types/${encodeURIComponent(String(placemarkType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Annotation Reference Type Metadata
     * 
     * @param referenceType 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (referenceType === null || referenceType === undefined){
            throw new Error('Required parameter referenceType was null or undefined when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/annotations/references/types/${encodeURIComponent(String(referenceType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Annotation Type Metadata
     * 
     * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (annotationType === null || annotationType === undefined){
            throw new Error('Required parameter annotationType was null or undefined when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/annotations/types/${encodeURIComponent(String(annotationType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Event SubType Metadata
     * 
     * @param eventType The event type. For example, distribution__v.
     * @param eventSubtype The event subtype. For example, approved_email__v.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (eventType === null || eventType === undefined){
            throw new Error('Required parameter eventType was null or undefined when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet.');
        }

        if (eventSubtype === null || eventSubtype === undefined){
            throw new Error('Required parameter eventSubtype was null or undefined when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/events/${encodeURIComponent(String(eventType))}/types/${encodeURIComponent(String(eventSubtype))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Event Types and Subtypes
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsEventsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsEventsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsEventsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/events`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Lock Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsLockGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsLockGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsLockGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/lock`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Common Document Fields
     * 
     * @param contentType 
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsPropertiesFindCommonPost(contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsPropertiesFindCommonPost(contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsPropertiesFindCommonPost(contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/metadata/objects/documents/properties/find_common`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Document Fields
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsPropertiesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsPropertiesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsPropertiesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/properties`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Template Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/templates`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Document Types
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/types`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Type
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling metadataObjectsDocumentsTypesTypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/types/${encodeURIComponent(String(type))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Type Relationships
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsTypesTypeRelationshipsGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsTypesTypeRelationshipsGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsTypesTypeRelationshipsGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling metadataObjectsDocumentsTypesTypeRelationshipsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/types/${encodeURIComponent(String(type))}/relationships`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Classification
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param classification The document classification. See Retrieve Document Types.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet.');
        }

        if (subtype === null || subtype === undefined){
            throw new Error('Required parameter subtype was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet.');
        }

        if (classification === null || classification === undefined){
            throw new Error('Required parameter classification was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/types/${encodeURIComponent(String(type))}/subtypes/${encodeURIComponent(String(subtype))}/classifications/${encodeURIComponent(String(classification))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Subtype
     * 
     * @param type The document type. See Retrieve Document Types.
     * @param subtype The document subtype. See Retrieve Document Types.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet.');
        }

        if (subtype === null || subtype === undefined){
            throw new Error('Required parameter subtype was null or undefined when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/documents/types/${encodeURIComponent(String(type))}/subtypes/${encodeURIComponent(String(subtype))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Group Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsGroupsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsGroupsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsGroupsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/groups`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Security Policy Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/securitypolicies`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve User Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataObjectsUsersGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataObjectsUsersGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataObjectsUsersGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/objects/users`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Archived Document Signature Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/query/archived_documents/relationships/document_signature__sysr`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Signature Metadata
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/query/documents/relationships/document_signature__sysr`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Collection
     * 
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataVobjectsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataVobjectsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataVobjectsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/vobjects?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Cancel Raw Object Deployment
     * 
     * @param objectName 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling metadataVobjectsObjectNameActionsCanceldeploymentPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/metadata/vobjects/${encodeURIComponent(String(objectName))}/actions/canceldeployment`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Field Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet.');
        }

        if (objectFieldName === null || objectFieldName === undefined){
            throw new Error('Required parameter objectFieldName was null or undefined when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/vobjects/${encodeURIComponent(String(objectName))}/fields/${encodeURIComponent(String(objectFieldName))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataVobjectsObjectNameGet(objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataVobjectsObjectNameGet(objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataVobjectsObjectNameGet(objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling metadataVobjectsObjectNameGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/vobjects/${encodeURIComponent(String(objectName))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Page Layouts
     * 
     * @param objectName 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataVobjectsObjectNamePageLayoutsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataVobjectsObjectNamePageLayoutsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataVobjectsObjectNamePageLayoutsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling metadataVobjectsObjectNamePageLayoutsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/vobjects/${encodeURIComponent(String(objectName))}/page_layouts`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Page Layout Metadata
     * 
     * @param objectName The name of the object from which to retrieve page layout metadata.
     * @param layoutName The name of the page layout from which to retrieve metadata.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet.');
        }

        if (layoutName === null || layoutName === undefined){
            throw new Error('Required parameter layoutName was null or undefined when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/metadata/vobjects/${encodeURIComponent(String(objectName))}/page_layouts/${encodeURIComponent(String(layoutName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Email Notification Histories
     * 
     * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
     * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
     * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
     * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public notificationsHistoriesGet(startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public notificationsHistoriesGet(startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public notificationsHistoriesGet(startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (startDate !== undefined) {
            queryParameters.push('startDate='+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push('endDate='+encodeURIComponent(String(endDate)));
        }
        if (allDates !== undefined) {
            queryParameters.push('allDates='+encodeURIComponent(String(allDates)));
        }
        if (formatResult !== undefined) {
            queryParameters.push('formatResult='+encodeURIComponent(String(formatResult)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/notifications/histories?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Bulk Workflow Action Details
     * 
     * @param action 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectWorkflowActionsActionGet(action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectWorkflowActionsActionGet(action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectWorkflowActionsActionGet(action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (action === null || action === undefined){
            throw new Error('Required parameter action was null or undefined when calling objectWorkflowActionsActionGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/object/workflow/actions/${encodeURIComponent(String(action))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Workflow Actions on Multiple Workflows
     * 
     * @param action 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectWorkflowActionsActionPost(action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectWorkflowActionsActionPost(action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectWorkflowActionsActionPost(action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (action === null || action === undefined){
            throw new Error('Required parameter action was null or undefined when calling objectWorkflowActionsActionPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/object/workflow/actions/${encodeURIComponent(String(action))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Cancel Workflow Tasks
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectWorkflowActionsCanceltasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectWorkflowActionsCanceltasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectWorkflowActionsCanceltasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/object/workflow/actions/canceltasks`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Cancel Workflows
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectWorkflowActionsCancelworkflowsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectWorkflowActionsCancelworkflowsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectWorkflowActionsCancelworkflowsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/object/workflow/actions/cancelworkflows`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Bulk Workflow Actions
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectWorkflowActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectWorkflowActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectWorkflowActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/object/workflow/actions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Reassign Workflow Tasks
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectWorkflowActionsReassigntasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectWorkflowActionsReassigntasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectWorkflowActionsReassigntasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/object/workflow/actions/reassigntasks`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Replace Workflow Owner
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectWorkflowActionsReplaceworkflowownerPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectWorkflowActionsReplaceworkflowownerPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectWorkflowActionsReplaceworkflowownerPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/object/workflow/actions/replaceworkflowowner`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersActionsExportJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersActionsExportJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersActionsExportJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling objectsBindersActionsExportJobIdResultsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/actions/export/${encodeURIComponent(String(jobId))}/results`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Export Binder (Latest Version)
     * 
     * @param binderId The binder id field value.
     * @param source to include source content or not
     * @param renditiontype to include viewable renditions
     * @param docversion to include all major versions
     * @param attachments to include all versions of attachments
     * @param _export configurable filename metadata
     * @param docfield to exclude document metadata csv
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdActionsExportPost(binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdActionsExportPost(binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdActionsExportPost(binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdActionsExportPost.');
        }

        let queryParameters: string[] = [];
        if (source !== undefined) {
            queryParameters.push('source='+encodeURIComponent(String(source)));
        }
        if (renditiontype !== undefined) {
            queryParameters.push('renditiontype='+encodeURIComponent(String(renditiontype)));
        }
        if (docversion !== undefined) {
            queryParameters.push('docversion='+encodeURIComponent(String(docversion)));
        }
        if (attachments !== undefined) {
            queryParameters.push('attachments='+encodeURIComponent(String(attachments)));
        }
        if (_export !== undefined) {
            queryParameters.push('_export='+encodeURIComponent(String(_export)));
        }
        if (docfield !== undefined) {
            queryParameters.push('docfield='+encodeURIComponent(String(docfield)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/actions/export?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Refresh Binder Auto-Filing
     * 
     * @param binderId The binder id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdActionsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdActionsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdActionsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdActionsPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/actions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Binding Rule
     * 
     * @param binderId The binder id field value.
     * @param contentType 
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdBindingRulePut(binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdBindingRulePut(binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdBindingRulePut(binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdBindingRulePut.');
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/binding_rule`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Binder
     * 
     * @param binderId The binder id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdDelete(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdDelete(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdDelete(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Binder Document Binding Rule
     * 
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut.');
        }

        if (nodeId === null || nodeId === undefined){
            throw new Error('Required parameter nodeId was null or undefined when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/documents/${encodeURIComponent(String(nodeId))}/binding_rule`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Add Document to Binder
     * 
     * @param binderId The binder id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdDocumentsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdDocumentsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdDocumentsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdDocumentsPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/documents`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove Document from Binder
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdDocumentsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdDocumentsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdDocumentsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdDocumentsSectionIdDelete.');
        }

        if (sectionId === null || sectionId === undefined){
            throw new Error('Required parameter sectionId was null or undefined when calling objectsBindersBinderIdDocumentsSectionIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/documents/${encodeURIComponent(String(sectionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Move Document in Binder
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdDocumentsSectionIdPut(binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdDocumentsSectionIdPut(binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdDocumentsSectionIdPut(binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdDocumentsSectionIdPut.');
        }

        if (sectionId === null || sectionId === undefined){
            throw new Error('Required parameter sectionId was null or undefined when calling objectsBindersBinderIdDocumentsSectionIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/documents/${encodeURIComponent(String(sectionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder
     * 
     * @param binderId The binder id field value.
     * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdGet(binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdGet(binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdGet(binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdGet.');
        }

        let queryParameters: string[] = [];
        if (depth !== undefined) {
            queryParameters.push('depth='+encodeURIComponent(String(depth)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Binder Version
     * 
     * @param binderId The binder id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdPost(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdPost(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdPost(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Binder
     * 
     * @param binderId The binder id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdPut(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdPut(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdPut(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove Users &amp; Groups from Roles on a Single Binder
     * 
     * @param binderId The id value of the binder from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete.');
        }

        if (roleNameAndUserOrGroup === null || roleNameAndUserOrGroup === undefined){
            throw new Error('Required parameter roleNameAndUserOrGroup was null or undefined when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete.');
        }

        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/roles/${encodeURIComponent(String(roleNameAndUserOrGroup))}/${encodeURIComponent(String(id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Binder Section Binding Rule
     * 
     * @param binderId The binder id field value.
     * @param nodeId The binder node id field value.
     * @param contentType 
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut.');
        }

        if (nodeId === null || nodeId === undefined){
            throw new Error('Required parameter nodeId was null or undefined when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut.');
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/sections/${encodeURIComponent(String(nodeId))}/binding_rule`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Binder Section
     * 
     * @param binderId The binder id field value.
     * @param nodeId The binder node id of the section.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdSectionsNodeIdPut(binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdSectionsNodeIdPut(binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdSectionsNodeIdPut(binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdSectionsNodeIdPut.');
        }

        if (nodeId === null || nodeId === undefined){
            throw new Error('Required parameter nodeId was null or undefined when calling objectsBindersBinderIdSectionsNodeIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/sections/${encodeURIComponent(String(nodeId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Binder Section
     * 
     * @param binderId The binder id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdSectionsPost(binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdSectionsPost(binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdSectionsPost(binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdSectionsPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/sections`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Binder Section
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdSectionsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdSectionsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdSectionsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdSectionsSectionIdDelete.');
        }

        if (sectionId === null || sectionId === undefined){
            throw new Error('Required parameter sectionId was null or undefined when calling objectsBindersBinderIdSectionsSectionIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/sections/${encodeURIComponent(String(sectionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Sections
     * 
     * @param binderId The binder id field value.
     * @param sectionId The binder node id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdSectionsSectionIdGet(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdSectionsSectionIdGet(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdSectionsSectionIdGet(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdSectionsSectionIdGet.');
        }

        if (sectionId === null || sectionId === undefined){
            throw new Error('Required parameter sectionId was null or undefined when calling objectsBindersBinderIdSectionsSectionIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/sections/${encodeURIComponent(String(sectionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Binder Versions
     * 
     * @param binderId The binder id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdVersionsGet(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdVersionsGet(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdVersionsGet(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdVersionsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/versions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Export Binder (Specific Version)
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param source to include source content or not
     * @param renditiontype to include viewable renditions
     * @param docversion to include all major versions
     * @param attachments to include all versions of attachments
     * @param _export configurable filename metadata
     * @param docfield to exclude document metadata csv
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost.');
        }

        let queryParameters: string[] = [];
        if (source !== undefined) {
            queryParameters.push('source='+encodeURIComponent(String(source)));
        }
        if (renditiontype !== undefined) {
            queryParameters.push('renditiontype='+encodeURIComponent(String(renditiontype)));
        }
        if (docversion !== undefined) {
            queryParameters.push('docversion='+encodeURIComponent(String(docversion)));
        }
        if (attachments !== undefined) {
            queryParameters.push('attachments='+encodeURIComponent(String(attachments)));
        }
        if (_export !== undefined) {
            queryParameters.push('_export='+encodeURIComponent(String(_export)));
        }
        if (docfield !== undefined) {
            queryParameters.push('docfield='+encodeURIComponent(String(docfield)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/actions/export?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Binder Version
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Version
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Binder Version
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Binder Relationship
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/relationships`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Binder Relationship
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete.');
        }

        if (relationshipId === null || relationshipId === undefined){
            throw new Error('Required parameter relationshipId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/relationships/${encodeURIComponent(String(relationshipId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Relationship
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param relationshipId The binder relationship id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet.');
        }

        if (relationshipId === null || relationshipId === undefined){
            throw new Error('Required parameter relationshipId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/relationships/${encodeURIComponent(String(relationshipId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Version Section
     * 
     * @param binderId The binder id field value.
     * @param majorVersion The binder major_version_number__v field value.
     * @param minorVersion The binder minor_version_number__v field value.
     * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (binderId === null || binderId === undefined){
            throw new Error('Required parameter binderId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet.');
        }

        if (sectionId === null || sectionId === undefined){
            throw new Error('Required parameter sectionId was null or undefined when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(binderId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/sections/${encodeURIComponent(String(sectionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Binder Roles
     * 
     * @param id 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsBindersIdRolesGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(id))}/roles`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Assign Users &amp; Groups to Roles on a Single Binder
     * 
     * @param id 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsBindersIdRolesPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/${encodeURIComponent(String(id))}/roles`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Role
     * 
     * @param id The binder &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsBindersIdRolesRoleNameGet.');
        }

        if (roleName === null || roleName === undefined){
            throw new Error('Required parameter roleName was null or undefined when calling objectsBindersIdRolesRoleNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder User Actions
     * 
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(id))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/lifecycle_actions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Entry Criteria
     * 
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet.');
        }

        if (nameV === null || nameV === undefined){
            throw new Error('Required parameter nameV was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/${encodeURIComponent(String(id))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/lifecycle_actions/${encodeURIComponent(String(nameV))}/entry_requirements`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Binder User Action
     * 
     * @param id The binder id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the binder.
     * @param minorVersion The minor version number of the binder.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut.');
        }

        if (nameV === null || nameV === undefined){
            throw new Error('Required parameter nameV was null or undefined when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/${encodeURIComponent(String(id))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/lifecycle_actions/${encodeURIComponent(String(nameV))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve User Actions on Multiple Binders
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/lifecycle_actions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Bulk Binder User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (userActionName === null || userActionName === undefined){
            throw new Error('Required parameter userActionName was null or undefined when calling objectsBindersLifecycleActionsUserActionNamePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/lifecycle_actions/${encodeURIComponent(String(userActionName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Binder
     * 
     * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersPost(async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersPost(async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersPost(async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (async !== undefined) {
            queryParameters.push('async='+encodeURIComponent(String(async)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Template Collection
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/templates`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Binder Template
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersTemplatesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersTemplatesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersTemplatesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/templates`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Binder Template
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/templates`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Template Node Attributes
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersTemplatesTemplateNameBindernodesGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersTemplatesTemplateNameBindernodesGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersTemplatesTemplateNameBindernodesGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (templateName === null || templateName === undefined){
            throw new Error('Required parameter templateName was null or undefined when calling objectsBindersTemplatesTemplateNameBindernodesGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/templates/${encodeURIComponent(String(templateName))}/bindernodes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Binder Template Node
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersTemplatesTemplateNameBindernodesPost(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersTemplatesTemplateNameBindernodesPost(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersTemplatesTemplateNameBindernodesPost(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (templateName === null || templateName === undefined){
            throw new Error('Required parameter templateName was null or undefined when calling objectsBindersTemplatesTemplateNameBindernodesPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/binders/templates/${encodeURIComponent(String(templateName))}/bindernodes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Replace Binder Template Nodes
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersTemplatesTemplateNameBindernodesPut(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersTemplatesTemplateNameBindernodesPut(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersTemplatesTemplateNameBindernodesPut(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (templateName === null || templateName === undefined){
            throw new Error('Required parameter templateName was null or undefined when calling objectsBindersTemplatesTemplateNameBindernodesPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/binders/templates/${encodeURIComponent(String(templateName))}/bindernodes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Binder Template
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (templateName === null || templateName === undefined){
            throw new Error('Required parameter templateName was null or undefined when calling objectsBindersTemplatesTemplateNameDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/binders/templates/${encodeURIComponent(String(templateName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Binder Template Attributes
     * 
     * @param templateName The binder template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsBindersTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsBindersTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsBindersTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (templateName === null || templateName === undefined){
            throw new Error('Required parameter templateName was null or undefined when calling objectsBindersTemplatesTemplateNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/binders/templates/${encodeURIComponent(String(templateName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Deleted Document IDs
     * 
     * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
     * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDeletionsDocumentsGet(startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDeletionsDocumentsGet(startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDeletionsDocumentsGet(startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (startDate !== undefined) {
            queryParameters.push('startDate='+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push('endDate='+encodeURIComponent(String(endDate)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/deletions/documents?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Deleted Object Record ID
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDeletionsVobjectsObjectNameGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDeletionsVobjectsObjectNameGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDeletionsVobjectsObjectNameGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling objectsDeletionsVobjectsObjectNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/deletions/vobjects/${encodeURIComponent(String(objectName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Document Workflows
     * 
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsActionsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsActionsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsActionsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/actions?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Controlled Copy Job Results
     * 
     * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
     * @param jobId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (lifecycleAndStateAndAction === null || lifecycleAndStateAndAction === undefined){
            throw new Error('Required parameter lifecycleAndStateAndAction was null or undefined when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet.');
        }

        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/actions/${encodeURIComponent(String(lifecycleAndStateAndAction))}/${encodeURIComponent(String(jobId))}/results`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Workflow Details
     * 
     * @param workflowName The document workflow name value.
     * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsActionsWorkflowNameGet(workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsActionsWorkflowNameGet(workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsActionsWorkflowNameGet(workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (workflowName === null || workflowName === undefined){
            throw new Error('Required parameter workflowName was null or undefined when calling objectsDocumentsActionsWorkflowNameGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/actions/${encodeURIComponent(String(workflowName))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Document Workflow
     * 
     * @param workflowName The document workflow name value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsActionsWorkflowNamePost(workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsActionsWorkflowNamePost(workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsActionsWorkflowNamePost(workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (workflowName === null || workflowName === undefined){
            throw new Error('Required parameter workflowName was null or undefined when calling objectsDocumentsActionsWorkflowNamePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/actions/${encodeURIComponent(String(workflowName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Annotations
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsAnnotationsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsAnnotationsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsAnnotationsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/annotations/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Multiple Annotations
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsAnnotationsBatchPost(authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsAnnotationsBatchPost(authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsAnnotationsBatchPost(authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization === null || authorization === undefined){
            throw new Error('Required parameter authorization was null or undefined when calling objectsDocumentsAnnotationsBatchPost.');
        }

        if (contentType === null || contentType === undefined){
            throw new Error('Required parameter contentType was null or undefined when calling objectsDocumentsAnnotationsBatchPost.');
        }

        if (accept === null || accept === undefined){
            throw new Error('Required parameter accept was null or undefined when calling objectsDocumentsAnnotationsBatchPost.');
        }

        if (xVaultAPIClientID === null || xVaultAPIClientID === undefined){
            throw new Error('Required parameter xVaultAPIClientID was null or undefined when calling objectsDocumentsAnnotationsBatchPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/annotations/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Annotations
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsAnnotationsBatchPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsAnnotationsBatchPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsAnnotationsBatchPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/annotations/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Add Annotation Replies
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsAnnotationsRepliesBatchPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsAnnotationsRepliesBatchPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsAnnotationsRepliesBatchPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/annotations/replies/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Multiple Document Attachments
     * 
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsAttachmentsBatchDelete(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsAttachmentsBatchDelete(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsAttachmentsBatchDelete(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/attachments/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Multiple Document Attachments
     * 
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsAttachmentsBatchPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsAttachmentsBatchPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsAttachmentsBatchPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/attachments/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Multiple Document Attachment Descriptions
     * 
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsAttachmentsBatchPut(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsAttachmentsBatchPut(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsAttachmentsBatchPut(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/attachments/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Export Results
     * 
     * @param jobId The id value of the requested export job. This is returned with the export document requests.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/batch/actions/fileextract/${encodeURIComponent(String(jobId))}/results`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Export Documents
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (source !== undefined) {
            queryParameters.push('source='+encodeURIComponent(String(source)));
        }
        if (renditions !== undefined) {
            queryParameters.push('renditions='+encodeURIComponent(String(renditions)));
        }
        if (allversions !== undefined) {
            queryParameters.push('allversions='+encodeURIComponent(String(allversions)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/batch/actions/fileextract?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Reclassify Multiple Documents
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsBatchActionsReclassifyPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsBatchActionsReclassifyPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsBatchActionsReclassifyPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/batch/actions/reclassify`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Multiple Document Renditions
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsBatchActionsRerenderPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsBatchActionsRerenderPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsBatchActionsRerenderPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/batch/actions/rerender`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Multiple Documents
     * 
     * @param idParam If you’re identifying documents in your input by their external ID
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsBatchDelete(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsBatchDelete(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsBatchDelete(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (idParam !== undefined) {
            queryParameters.push('idParam='+encodeURIComponent(String(idParam)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/batch?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Undo Collaborative Authoring Checkout
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsBatchLockDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsBatchLockDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsBatchLockDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/batch/lock`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Multiple Documents
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Multiple Documents
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsBatchPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsBatchPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsBatchPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Anchor IDs
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAnchorsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAnchorsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAnchorsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAnchorsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/anchors`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Export Document Annotations to PDF
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAnnotationsFileGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAnnotationsFileGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAnnotationsFileGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAnnotationsFileGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/annotations/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Import Document Annotations from PDF
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAnnotationsFilePost(docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAnnotationsFilePost(docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAnnotationsFilePost(docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAnnotationsFilePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/annotations/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Single Document Attachment
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/${encodeURIComponent(String(attachmentId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Document Attachment
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/${encodeURIComponent(String(attachmentId))}/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Attachment Metadata
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/${encodeURIComponent(String(attachmentId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Document Attachment Description
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/${encodeURIComponent(String(attachmentId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Single Document Attachment Version
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Document Attachment Version
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Attachment Version Metadata
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Restore Document Attachment Version
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore The parameter restore must be set to true. 
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost.');
        }

        let queryParameters: string[] = [];
        if (restore !== undefined) {
            queryParameters.push('restore='+encodeURIComponent(String(restore)));
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Attachment Versions
     * 
     * @param docId The document id field value.
     * @param attachmentId The attachment id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download All Document Attachments
     * 
     * @param docId The document id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsFileGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsFileGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsFileGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsFileGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Attachments
     * 
     * @param docId The document id field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Document Attachment
     * 
     * @param docId The document id field value.
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAttachmentsPost(docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAttachmentsPost(docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAttachmentsPost(docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAttachmentsPost.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/attachments`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Complete Audit History for a Single Document
     * 
     * @param docId The document ID for which to retrieve audit history.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param formatResult To request a CSV file of your audit history, use csv. 
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdAudittrailGet(docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdAudittrailGet(docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdAudittrailGet(docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdAudittrailGet.');
        }

        let queryParameters: string[] = [];
        if (startDate !== undefined) {
            queryParameters.push('startDate='+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push('endDate='+encodeURIComponent(String(endDate)));
        }
        if (formatResult !== undefined) {
            queryParameters.push('formatResult='+encodeURIComponent(String(formatResult)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }
        if (events !== undefined) {
            queryParameters.push('events='+encodeURIComponent(String(events)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/audittrail?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Single Document
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Events
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdEventsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdEventsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdEventsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdEventsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/events`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Document File
     * 
     * @param docId The document id field value.
     * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdFileGet(docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdFileGet(docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdFileGet(docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdFileGet.');
        }

        let queryParameters: string[] = [];
        if (lockDocument !== undefined) {
            queryParameters.push('lockDocument='+encodeURIComponent(String(lockDocument)));
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/file?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Document Lock
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdLockDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdLockDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdLockDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdLockDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/lock`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Lock
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdLockGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdLockGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdLockGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdLockGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/lock`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Document Lock
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdLockPost(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdLockPost(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdLockPost(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdLockPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/lock`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download All Document Version Attachments
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/attachments/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Single Document Version
     * 
     * @param docId The document id field value.
     * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdPost(docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdPost(docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdPost(docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdPost.');
        }

        let queryParameters: string[] = [];
        if (suppressRendition !== undefined) {
            queryParameters.push('suppressRendition='+encodeURIComponent(String(suppressRendition)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Single Document
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdPut(docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdPut(docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdPut(docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Renditions
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdRenditionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdRenditionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdRenditionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdRenditionsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/renditions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Single Document Rendition
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete.');
        }

        if (renditionType === null || renditionType === undefined){
            throw new Error('Required parameter renditionType was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/renditions/${encodeURIComponent(String(renditionType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Document Rendition File
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypeGet.');
        }

        if (renditionType === null || renditionType === undefined){
            throw new Error('Required parameter renditionType was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypeGet.');
        }

        let queryParameters: string[] = [];
        if (steadyState !== undefined) {
            queryParameters.push('steadyState='+encodeURIComponent(String(steadyState)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/renditions/${encodeURIComponent(String(renditionType))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Add Single Document Rendition
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdRenditionsRenditionTypePost(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdRenditionsRenditionTypePost(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdRenditionsRenditionTypePost(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypePost.');
        }

        if (renditionType === null || renditionType === undefined){
            throw new Error('Required parameter renditionType was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/renditions/${encodeURIComponent(String(renditionType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Replace Document Rendition
     * 
     * @param docId The document id field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdRenditionsRenditionTypePut(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdRenditionsRenditionTypePut(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdRenditionsRenditionTypePut(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypePut.');
        }

        if (renditionType === null || renditionType === undefined){
            throw new Error('Required parameter renditionType was null or undefined when calling objectsDocumentsDocIdRenditionsRenditionTypePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/renditions/${encodeURIComponent(String(renditionType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove Users &amp; Groups from Roles on a Single Document
     * 
     * @param docId The id value of the document from which to remove roles.
     * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param id The id value of the user or group to remove from the role.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete.');
        }

        if (roleNameAndUserOrGroup === null || roleNameAndUserOrGroup === undefined){
            throw new Error('Required parameter roleNameAndUserOrGroup was null or undefined when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete.');
        }

        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/roles/${encodeURIComponent(String(roleNameAndUserOrGroup))}/${encodeURIComponent(String(id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Version Attachments
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/version/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/attachments`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Versions
     * 
     * @param docId The document id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Read Annotations by ID
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet.');
        }

        if (annotationId === null || annotationId === undefined){
            throw new Error('Required parameter annotationId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/annotations/${encodeURIComponent(String(annotationId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Read Replies of Parent Annotation
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet.');
        }

        if (annotationId === null || annotationId === undefined){
            throw new Error('Required parameter annotationId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/annotations/${encodeURIComponent(String(annotationId))}/replies`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Export Document Version Annotations to PDF
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/annotations/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Import Document Version Annotations from PDF
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/annotations/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Read Annotations by Document Version and Type
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
     * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
     * @param paginationId A unique identifier used to load requests with paginated results.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet.');
        }

        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }
        if (annotationTypes !== undefined) {
            queryParameters.push('annotationTypes='+encodeURIComponent(String(annotationTypes)));
        }
        if (paginationId !== undefined) {
            queryParameters.push('paginationId='+encodeURIComponent(String(paginationId)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/annotations?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Document Version Attachment Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id field value of the attachment.
     * @param attachmentVersion The version of the attachment.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Version Attachment Versions
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param attachmentId The id of the document attachment to retrieve.
     * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Single Document Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Version Notes as CSV
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/doc-export-annotations-to-csv`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Document Event
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/events`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Video Annotations
     * 
     * @param docId The video document id field value.
     * @param majorVersion The video document major_version_number__v field value.
     * @param minorVersion The video document minor_version_number__v field value.
     * @param authorization 
     * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/export-video-annotations`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Document Version File
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Document Version
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Relationships
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/relationships`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Single Document Relationship
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/relationships`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Single Document Relationship
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete.');
        }

        if (relationshipId === null || relationshipId === undefined){
            throw new Error('Required parameter relationshipId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/relationships/${encodeURIComponent(String(relationshipId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Relationship
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet.');
        }

        if (relationshipId === null || relationshipId === undefined){
            throw new Error('Required parameter relationshipId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/relationships/${encodeURIComponent(String(relationshipId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Version Renditions
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/renditions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Document Version Rendition
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete.');
        }

        if (renditionType === null || renditionType === undefined){
            throw new Error('Required parameter renditionType was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/renditions/${encodeURIComponent(String(renditionType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Document Version Rendition File
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet.');
        }

        if (renditionType === null || renditionType === undefined){
            throw new Error('Required parameter renditionType was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/renditions/${encodeURIComponent(String(renditionType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Upload Document Version Rendition
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost.');
        }

        if (renditionType === null || renditionType === undefined){
            throw new Error('Required parameter renditionType was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/renditions/${encodeURIComponent(String(renditionType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Replace Document Version Rendition
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param renditionType The document rendition type.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut.');
        }

        if (renditionType === null || renditionType === undefined){
            throw new Error('Required parameter renditionType was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/renditions/${encodeURIComponent(String(renditionType))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Document Version Thumbnail File
     * 
     * @param docId The document id field value.
     * @param majorVersion The document major_version_number__v field value.
     * @param minorVersion The document minor_version_number__v field value.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (docId === null || docId === undefined){
            throw new Error('Required parameter docId was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(docId))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/thumbnail`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Documents
     * 
     * @param namedFilter Retrieves only documents which you have created.
     * @param scope Searches only within the document content.
     * @param versionscope Retrieves all document versions, rather than only the latest version.
     * @param search Search for documents based on a {keyword} in searchable document fields.
     * @param limit See VQL documentation for more information.
     * @param sort See VQL documentation for more information.
     * @param start See VQL documentation for more information.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsGet(namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsGet(namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsGet(namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (namedFilter !== undefined) {
            queryParameters.push('namedFilter='+encodeURIComponent(String(namedFilter)));
        }
        if (scope !== undefined) {
            queryParameters.push('scope='+encodeURIComponent(String(scope)));
        }
        if (versionscope !== undefined) {
            queryParameters.push('versionscope='+encodeURIComponent(String(versionscope)));
        }
        if (search !== undefined) {
            queryParameters.push('search='+encodeURIComponent(String(search)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (sort !== undefined) {
            queryParameters.push('sort='+encodeURIComponent(String(sort)));
        }
        if (start !== undefined) {
            queryParameters.push('start='+encodeURIComponent(String(start)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Document Roles
     * 
     * @param id 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsDocumentsIdRolesGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(id))}/roles`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Assign Users &amp; Groups to Roles on a Single Document
     * 
     * @param id 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsDocumentsIdRolesPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/${encodeURIComponent(String(id))}/roles`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Role
     * 
     * @param id The document &#x60;id&#x60;.
     * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsDocumentsIdRolesRoleNameGet.');
        }

        if (roleName === null || roleName === undefined){
            throw new Error('Required parameter roleName was null or undefined when calling objectsDocumentsIdRolesRoleNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document User Actions
     * 
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(id))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/lifecycle_actions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Entry Criteria
     * 
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet.');
        }

        if (nameV === null || nameV === undefined){
            throw new Error('Required parameter nameV was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/${encodeURIComponent(String(id))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/lifecycle_actions/${encodeURIComponent(String(nameV))}/entry_requirements`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Document User Action
     * 
     * @param id The document id field value from which to retrieve available user actions.
     * @param majorVersion The major version number of the document.
     * @param minorVersion The minor version number of the document.
     * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut.');
        }

        if (majorVersion === null || majorVersion === undefined){
            throw new Error('Required parameter majorVersion was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut.');
        }

        if (minorVersion === null || minorVersion === undefined){
            throw new Error('Required parameter minorVersion was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut.');
        }

        if (nameV === null || nameV === undefined){
            throw new Error('Required parameter nameV was null or undefined when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/${encodeURIComponent(String(id))}/versions/${encodeURIComponent(String(majorVersion))}/${encodeURIComponent(String(minorVersion))}/lifecycle_actions/${encodeURIComponent(String(nameV))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve User Actions on Multiple Documents
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/lifecycle_actions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Bulk Document User Actions
     * 
     * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (userActionName === null || userActionName === undefined){
            throw new Error('Required parameter userActionName was null or undefined when calling objectsDocumentsLifecycleActionsUserActionNamePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/lifecycle_actions/${encodeURIComponent(String(userActionName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Single Document
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsPost(authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsPost(authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsPost(authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Multiple Document Relationships
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsRelationshipsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsRelationshipsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsRelationshipsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/relationships/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Multiple Document Relationships
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsRelationshipsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsRelationshipsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsRelationshipsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/relationships/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Multiple Document Renditions
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsRenditionsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsRenditionsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsRenditionsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/renditions/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Add Multiple Document Renditions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID
     * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsRenditionsBatchPost(idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsRenditionsBatchPost(idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsRenditionsBatchPost(idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (idParam !== undefined) {
            queryParameters.push('idParam='+encodeURIComponent(String(idParam)));
        }
        if (largeSizeAsset !== undefined) {
            queryParameters.push('largeSizeAsset='+encodeURIComponent(String(largeSizeAsset)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/renditions/batch?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsRolesBatchDelete(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsRolesBatchDelete(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsRolesBatchDelete(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/roles/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsRolesBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsRolesBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsRolesBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/roles/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Template Collection
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/templates`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Single Document Template
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsTemplatesPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsTemplatesPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsTemplatesPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/templates`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Multiple Document Templates
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/templates`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Basic Document Template
     * 
     * @param templateName The document template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (templateName === null || templateName === undefined){
            throw new Error('Required parameter templateName was null or undefined when calling objectsDocumentsTemplatesTemplateNameDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/templates/${encodeURIComponent(String(templateName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Document Template File
     * 
     * @param templateName The document template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsTemplatesTemplateNameFileGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsTemplatesTemplateNameFileGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsTemplatesTemplateNameFileGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (templateName === null || templateName === undefined){
            throw new Error('Required parameter templateName was null or undefined when calling objectsDocumentsTemplatesTemplateNameFileGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/templates/${encodeURIComponent(String(templateName))}/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Document Template Attributes
     * 
     * @param templateName The document template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (templateName === null || templateName === undefined){
            throw new Error('Required parameter templateName was null or undefined when calling objectsDocumentsTemplatesTemplateNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/documents/templates/${encodeURIComponent(String(templateName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Single Document Template
     * 
     * @param templateName The document template name__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsTemplatesTemplateNamePut(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsTemplatesTemplateNamePut(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsTemplatesTemplateNamePut(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (templateName === null || templateName === undefined){
            throw new Error('Required parameter templateName was null or undefined when calling objectsDocumentsTemplatesTemplateNamePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/documents/templates/${encodeURIComponent(String(templateName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Document Tokens
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsTokensPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsTokensPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsTokensPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/tokens`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Export Document Versions
     * 
     * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsVersionsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsVersionsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsVersionsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (source !== undefined) {
            queryParameters.push('source='+encodeURIComponent(String(source)));
        }
        if (renditions !== undefined) {
            queryParameters.push('renditions='+encodeURIComponent(String(renditions)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/versions/batch/actions/fileextract?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsVersionsBatchDelete(idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsVersionsBatchDelete(idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsVersionsBatchDelete(idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (idParam !== undefined) {
            queryParameters.push('idParam='+encodeURIComponent(String(idParam)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/documents/versions/batch?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Multiple Document Versions
     * 
     * @param idParam If you’re identifying documents in your input by their external ID
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDocumentsVersionsBatchPost(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDocumentsVersionsBatchPost(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDocumentsVersionsBatchPost(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (idParam !== undefined) {
            queryParameters.push('idParam='+encodeURIComponent(String(idParam)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/documents/versions/batch?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Domain Information
     * 
     * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDomainGet(includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDomainGet(includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDomainGet(includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (includeApplication !== undefined) {
            queryParameters.push('includeApplication='+encodeURIComponent(String(includeApplication)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/domain?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Domains
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsDomainsGet(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsDomainsGet(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsDomainsGet(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/domains`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Add EDL Matched Documents
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsEdlMatchedDocumentsBatchActionsAddPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsEdlMatchedDocumentsBatchActionsAddPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsEdlMatchedDocumentsBatchActionsAddPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/edl_matched_documents/batch/actions/add`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove EDL Matched Documents
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/edl_matched_documents/batch/actions/remove`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Auto Managed Groups
     * 
     * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsGroupsAutoGet(limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsGroupsAutoGet(limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsGroupsAutoGet(limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/groups/auto?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Groups
     * 
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsGroupsGet(includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsGroupsGet(includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsGroupsGet(includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (includeImplied !== undefined) {
            queryParameters.push('includeImplied='+encodeURIComponent(String(includeImplied)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/groups?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Group
     * 
     * @param groupId The group id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsGroupsGroupIdDelete(groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsGroupsGroupIdDelete(groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsGroupsGroupIdDelete(groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (groupId === null || groupId === undefined){
            throw new Error('Required parameter groupId was null or undefined when calling objectsGroupsGroupIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/groups/${encodeURIComponent(String(groupId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Group
     * 
     * @param groupId The group id field value.
     * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsGroupsGroupIdGet(groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsGroupsGroupIdGet(groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsGroupsGroupIdGet(groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (groupId === null || groupId === undefined){
            throw new Error('Required parameter groupId was null or undefined when calling objectsGroupsGroupIdGet.');
        }

        let queryParameters: string[] = [];
        if (includeImplied !== undefined) {
            queryParameters.push('includeImplied='+encodeURIComponent(String(includeImplied)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/groups/${encodeURIComponent(String(groupId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Group
     * 
     * @param groupId The group id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsGroupsGroupIdPut(groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsGroupsGroupIdPut(groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsGroupsGroupIdPut(groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (groupId === null || groupId === undefined){
            throw new Error('Required parameter groupId was null or undefined when calling objectsGroupsGroupIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/groups/${encodeURIComponent(String(groupId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Group 
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsGroupsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsGroupsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsGroupsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/groups`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Application License Usage
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsLicensesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsLicensesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsLicensesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/licenses`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Multi-Record Workflows
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows/actions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Multi-Record Workflow Details
     * 
     * @param workflowName 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsActionsWorkflowNameGet(workflowName: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsActionsWorkflowNameGet(workflowName: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsActionsWorkflowNameGet(workflowName: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (workflowName === null || workflowName === undefined){
            throw new Error('Required parameter workflowName was null or undefined when calling objectsObjectworkflowsActionsWorkflowNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows/actions/${encodeURIComponent(String(workflowName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Multi-Record Workflow
     * 
     * @param workflowName 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsActionsWorkflowNamePost(workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsActionsWorkflowNamePost(workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsActionsWorkflowNamePost(workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (workflowName === null || workflowName === undefined){
            throw new Error('Required parameter workflowName was null or undefined when calling objectsObjectworkflowsActionsWorkflowNamePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/actions/${encodeURIComponent(String(workflowName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Workflows
     * 
     * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsGet(objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsGet(objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsGet(objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (objectV !== undefined) {
            queryParameters.push('objectV='+encodeURIComponent(String(objectV)));
        }
        if (recordIdV !== undefined) {
            queryParameters.push('recordIdV='+encodeURIComponent(String(recordIdV)));
        }
        if (participant !== undefined) {
            queryParameters.push('participant='+encodeURIComponent(String(participant)));
        }
        if (statusV !== undefined) {
            queryParameters.push('statusV='+encodeURIComponent(String(statusV)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Workflow Tasks
     * 
     * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
     * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksGet(objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksGet(objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksGet(objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (objectV !== undefined) {
            queryParameters.push('objectV='+encodeURIComponent(String(objectV)));
        }
        if (recordIdV !== undefined) {
            queryParameters.push('recordIdV='+encodeURIComponent(String(recordIdV)));
        }
        if (assigneeV !== undefined) {
            queryParameters.push('assigneeV='+encodeURIComponent(String(assigneeV)));
        }
        if (statusV !== undefined) {
            queryParameters.push('statusV='+encodeURIComponent(String(statusV)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows/tasks?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Accept Single Record Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/accept`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Cancel Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/cancel`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Complete Single Record Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/complete`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Workflow Task Actions
     * 
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsGet(taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsGet(taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsGet(taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Accept Multi-item Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/mdwaccept`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Complete Multi-item Workflow Task
     * 
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/mdwcomplete`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Manage Multi-Item Workflow Content
     * 
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/mdwmanagecontent`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Reassign Multi-item Workflow Task
     * 
     * @param taskId The id of the task to reassign.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/mdwreassign`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Reassign Single Record Workflow Task
     * 
     * @param taskId The id of the task to reassign.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/reassign`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Workflow Task Action Details
     * 
     * @param taskId The task id field value.
     * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet.');
        }

        if (taskAction === null || taskAction === undefined){
            throw new Error('Required parameter taskAction was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/${encodeURIComponent(String(taskAction))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Undo Workflow Task Acceptance
     * 
     * @param taskId The task id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/undoaccept`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Workflow Task Due Date
     * 
     * @param taskId The id of the task.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}/actions/updateduedate`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Workflow Task Details
     * 
     * @param taskId The task id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsTasksTaskIdGet(taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsTasksTaskIdGet(taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsTasksTaskIdGet(taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling objectsObjectworkflowsTasksTaskIdGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows/tasks/${encodeURIComponent(String(taskId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Workflow Actions
     * 
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsWorkflowIdActionsGet(workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsWorkflowIdActionsGet(workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsWorkflowIdActionsGet(workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (workflowId === null || workflowId === undefined){
            throw new Error('Required parameter workflowId was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows/${encodeURIComponent(String(workflowId))}/actions?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Workflow Action Details
     * 
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (workflowId === null || workflowId === undefined){
            throw new Error('Required parameter workflowId was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet.');
        }

        if (workflowAction === null || workflowAction === undefined){
            throw new Error('Required parameter workflowAction was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows/${encodeURIComponent(String(workflowId))}/actions/${encodeURIComponent(String(workflowAction))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Workflow Action
     * 
     * @param workflowId The workflow id field value.
     * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (workflowId === null || workflowId === undefined){
            throw new Error('Required parameter workflowId was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost.');
        }

        if (workflowAction === null || workflowAction === undefined){
            throw new Error('Required parameter workflowAction was null or undefined when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost.');
        }

        let queryParameters: string[] = [];
        if (documentsSys !== undefined) {
            queryParameters.push('documentsSys='+encodeURIComponent(String(documentsSys)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/objectworkflows/${encodeURIComponent(String(workflowId))}/actions/${encodeURIComponent(String(workflowAction))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Workflow Details
     * 
     * @param workflowId The workflow id field value.
     * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsObjectworkflowsWorkflowIdGet(workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsObjectworkflowsWorkflowIdGet(workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsObjectworkflowsWorkflowIdGet(workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (workflowId === null || workflowId === undefined){
            throw new Error('Required parameter workflowId was null or undefined when calling objectsObjectworkflowsWorkflowIdGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/objectworkflows/${encodeURIComponent(String(workflowId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Picklists
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsPicklistsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsPicklistsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsPicklistsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/picklists`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsPicklistsPicklistNameGet(picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsPicklistsPicklistNameGet(picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsPicklistsPicklistNameGet(picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (picklistName === null || picklistName === undefined){
            throw new Error('Required parameter picklistName was null or undefined when calling objectsPicklistsPicklistNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/picklists/${encodeURIComponent(String(picklistName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Inactivate Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (picklistName === null || picklistName === undefined){
            throw new Error('Required parameter picklistName was null or undefined when calling objectsPicklistsPicklistNamePicklistValueNameDelete.');
        }

        if (picklistValueName === null || picklistValueName === undefined){
            throw new Error('Required parameter picklistValueName was null or undefined when calling objectsPicklistsPicklistNamePicklistValueNameDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/picklists/${encodeURIComponent(String(picklistName))}/${encodeURIComponent(String(picklistValueName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Picklist Value
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (picklistName === null || picklistName === undefined){
            throw new Error('Required parameter picklistName was null or undefined when calling objectsPicklistsPicklistNamePicklistValueNamePut.');
        }

        if (picklistValueName === null || picklistValueName === undefined){
            throw new Error('Required parameter picklistValueName was null or undefined when calling objectsPicklistsPicklistNamePicklistValueNamePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/picklists/${encodeURIComponent(String(picklistName))}/${encodeURIComponent(String(picklistValueName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Picklist Values
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsPicklistsPicklistNamePost(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsPicklistsPicklistNamePost(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsPicklistsPicklistNamePost(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (picklistName === null || picklistName === undefined){
            throw new Error('Required parameter picklistName was null or undefined when calling objectsPicklistsPicklistNamePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/picklists/${encodeURIComponent(String(picklistName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Picklist Value Label
     * 
     * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsPicklistsPicklistNamePut(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsPicklistsPicklistNamePut(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsPicklistsPicklistNamePut(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (picklistName === null || picklistName === undefined){
            throw new Error('Required parameter picklistName was null or undefined when calling objectsPicklistsPicklistNamePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/picklists/${encodeURIComponent(String(picklistName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Build Production Vault
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxActionsBuildproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxActionsBuildproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxActionsBuildproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox/actions/buildproduction`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Promote to Production
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxActionsPromoteproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxActionsPromoteproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxActionsPromoteproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox/actions/promoteproduction`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Recheck Sandbox Usage Limit
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxActionsRecheckusagePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxActionsRecheckusagePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxActionsRecheckusagePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox/actions/recheckusage`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Change Sandbox Size
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxBatchChangesizePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxBatchChangesizePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxBatchChangesizePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox/batch/changesize`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Set Sandbox Entitlements
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxEntitlementsSetPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxEntitlementsSetPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxEntitlementsSetPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox/entitlements/set`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Sandboxes
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/sandbox`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Sandbox
     * 
     * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxNameDelete(name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxNameDelete(name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxNameDelete(name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (name === null || name === undefined){
            throw new Error('Required parameter name was null or undefined when calling objectsSandboxNameDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/sandbox/${encodeURIComponent(String(name))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create or Refresh Sandbox
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (apiName === null || apiName === undefined){
            throw new Error('Required parameter apiName was null or undefined when calling objectsSandboxSnapshotApiNameActionsUpdatePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox/snapshot/${encodeURIComponent(String(apiName))}/actions/update`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Upgrade Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (apiName === null || apiName === undefined){
            throw new Error('Required parameter apiName was null or undefined when calling objectsSandboxSnapshotApiNameActionsUpgradePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox/snapshot/${encodeURIComponent(String(apiName))}/actions/upgrade`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Sandbox Snapshot
     * 
     * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxSnapshotApiNameDelete(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxSnapshotApiNameDelete(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxSnapshotApiNameDelete(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (apiName === null || apiName === undefined){
            throw new Error('Required parameter apiName was null or undefined when calling objectsSandboxSnapshotApiNameDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/sandbox/snapshot/${encodeURIComponent(String(apiName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Sandbox Snapshots
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxSnapshotGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxSnapshotGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxSnapshotGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/sandbox/snapshot`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Sandbox Snapshot
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxSnapshotPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxSnapshotPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxSnapshotPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox/snapshot`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Refresh Sandbox from Snapshot
     * 
     * @param vaultId The Vault ID of the sandbox to be refreshed.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxVaultIdActionsRefreshPost(vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxVaultIdActionsRefreshPost(vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxVaultIdActionsRefreshPost(vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (vaultId === null || vaultId === undefined){
            throw new Error('Required parameter vaultId was null or undefined when calling objectsSandboxVaultIdActionsRefreshPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/sandbox/${encodeURIComponent(String(vaultId))}/actions/refresh`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Sandbox Details by ID
     * 
     * @param vaultId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSandboxVaultIdGet(vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSandboxVaultIdGet(vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSandboxVaultIdGet(vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (vaultId === null || vaultId === undefined){
            throw new Error('Required parameter vaultId was null or undefined when calling objectsSandboxVaultIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/sandbox/${encodeURIComponent(String(vaultId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Security Policies
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/securitypolicies`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Security Policy
     * 
     * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (securityPolicyName === null || securityPolicyName === undefined){
            throw new Error('Required parameter securityPolicyName was null or undefined when calling objectsSecuritypoliciesSecurityPolicyNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/securitypolicies/${encodeURIComponent(String(securityPolicyName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Users
     * 
     * @param vaults Retrieve all users assigned to all Vaults in your domain.
     * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
     * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersGet(vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersGet(vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersGet(vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (vaults !== undefined) {
            queryParameters.push('vaults='+encodeURIComponent(String(vaults)));
        }
        if (excludeVaultMembership !== undefined) {
            queryParameters.push('excludeVaultMembership='+encodeURIComponent(String(excludeVaultMembership)));
        }
        if (excludeAppLicensing !== undefined) {
            queryParameters.push('excludeAppLicensing='+encodeURIComponent(String(excludeAppLicensing)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/users/?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersIdGet(id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersIdGet(id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersIdGet(id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsUsersIdGet.');
        }

        let queryParameters: string[] = [];
        if (excludeVaultMembership !== undefined) {
            queryParameters.push('excludeVaultMembership='+encodeURIComponent(String(excludeVaultMembership)));
        }
        if (excludeAppLicensing !== undefined) {
            queryParameters.push('excludeAppLicensing='+encodeURIComponent(String(excludeAppLicensing)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/users/${encodeURIComponent(String(id))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve User Permissions
     * 
     * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersIdPermissionsGet(id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersIdPermissionsGet(id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersIdPermissionsGet(id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsUsersIdPermissionsGet.');
        }

        let queryParameters: string[] = [];
        if (filter !== undefined) {
            queryParameters.push('filter='+encodeURIComponent(String(filter)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/users/${encodeURIComponent(String(id))}/permissions?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Single User
     * 
     * @param id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersIdPut(id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersIdPut(id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersIdPut(id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling objectsUsersIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/users/${encodeURIComponent(String(id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Validate Session User
     * 
     * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersMeGet(excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersMeGet(excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersMeGet(excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (excludeVaultMembership !== undefined) {
            queryParameters.push('excludeVaultMembership='+encodeURIComponent(String(excludeVaultMembership)));
        }
        if (excludeAppLicensing !== undefined) {
            queryParameters.push('excludeAppLicensing='+encodeURIComponent(String(excludeAppLicensing)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/users/me?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Change My Password
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersMePasswordPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersMePasswordPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersMePasswordPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/users/me/password`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve My User Permissions
     * 
     * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersMePermissionsGet(filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersMePermissionsGet(filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersMePermissionsGet(filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (filter !== undefined) {
            queryParameters.push('filter='+encodeURIComponent(String(filter)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/objects/users/me/permissions?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update My User
     * 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersMePut(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersMePut(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersMePut(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/users/me`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Single User
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/users`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Multiple Users
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/users`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Disable User
     * 
     * @param userId The user id field value. 
     * @param domain When true, this disables the user account in all vaults in the domain.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersUserIdDelete(userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersUserIdDelete(userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersUserIdDelete(userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (userId === null || userId === undefined){
            throw new Error('Required parameter userId was null or undefined when calling objectsUsersUserIdDelete.');
        }

        let queryParameters: string[] = [];
        if (domain !== undefined) {
            queryParameters.push('domain='+encodeURIComponent(String(domain)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/objects/users/${encodeURIComponent(String(userId))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Vault Membership
     * 
     * @param userId The user id field value.
     * @param vaultId The system-managed id field value assigned to each vault in the domain.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsUsersUserIdVaultMembershipVaultIdPut(userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsUsersUserIdVaultMembershipVaultIdPut(userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsUsersUserIdVaultMembershipVaultIdPut(userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (userId === null || userId === undefined){
            throw new Error('Required parameter userId was null or undefined when calling objectsUsersUserIdVaultMembershipVaultIdPut.');
        }

        if (vaultId === null || vaultId === undefined){
            throw new Error('Required parameter vaultId was null or undefined when calling objectsUsersUserIdVaultMembershipVaultIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/objects/users/${encodeURIComponent(String(userId))}/vault_membership/${encodeURIComponent(String(vaultId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Vault Compare
     * 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsVaultActionsComparePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsVaultActionsComparePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsVaultActionsComparePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/vault/actions/compare`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Vault Configuration Report
     * 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public objectsVaultActionsConfigreportPost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public objectsVaultActionsConfigreportPost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public objectsVaultActionsConfigreportPost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/objects/vault/actions/configreport`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Component Definition Query
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public queryComponentsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public queryComponentsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public queryComponentsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/query/components`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Next Page URL
     * 
     * @param nextPage 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIDescribeQuery 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public queryNextPagePost(nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public queryNextPagePost(nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public queryNextPagePost(nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (nextPage === null || nextPage === undefined){
            throw new Error('Required parameter nextPage was null or undefined when calling queryNextPagePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIDescribeQuery) {
            headers['X-VaultAPI-DescribeQuery'] = String(xVaultAPIDescribeQuery);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/query/${encodeURIComponent(String(nextPage))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Submitting a Query
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIDescribeQuery 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public queryPost(authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public queryPost(authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public queryPost(authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIDescribeQuery) {
            headers['X-VaultAPI-DescribeQuery'] = String(xVaultAPIDescribeQuery);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/query`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Previous Page URL
     * 
     * @param previousPage 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIDescribeQuery 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public queryPreviousPagePost(previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public queryPreviousPagePost(previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public queryPreviousPagePost(previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (previousPage === null || previousPage === undefined){
            throw new Error('Required parameter previousPage was null or undefined when calling queryPreviousPagePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIDescribeQuery) {
            headers['X-VaultAPI-DescribeQuery'] = String(xVaultAPIDescribeQuery);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/query/${encodeURIComponent(String(previousPage))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2MeGet(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2MeGet(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2MeGet(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (attributes !== undefined) {
            queryParameters.push('attributes='+encodeURIComponent(String(attributes)));
        }
        if (excludedAttributes !== undefined) {
            queryParameters.push('excludedAttributes='+encodeURIComponent(String(excludedAttributes)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/Me?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Current User with SCIM
     * 
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2MePut(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2MePut(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2MePut(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (attributes !== undefined) {
            queryParameters.push('attributes='+encodeURIComponent(String(attributes)));
        }
        if (excludedAttributes !== undefined) {
            queryParameters.push('excludedAttributes='+encodeURIComponent(String(excludedAttributes)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/scim/v2/Me?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All SCIM Resource Types
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2ResourceTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2ResourceTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2ResourceTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/ResourceTypes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Single SCIM Resource Type
     * 
     * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2ResourceTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2ResourceTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2ResourceTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling scimV2ResourceTypesTypeGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/ResourceTypes/${encodeURIComponent(String(type))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All SCIM Schema Information
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2SchemasGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2SchemasGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2SchemasGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/Schemas`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Single SCIM Schema Information
     * 
     * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2SchemasIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2SchemasIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2SchemasIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling scimV2SchemasIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/Schemas/${encodeURIComponent(String(id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve SCIM Provider
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2ServiceProviderConfigGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2ServiceProviderConfigGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2ServiceProviderConfigGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/ServiceProviderConfig`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve SCIM Resources
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2TypeGet(type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2TypeGet(type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2TypeGet(type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling scimV2TypeGet.');
        }

        let queryParameters: string[] = [];
        if (filter !== undefined) {
            queryParameters.push('filter='+encodeURIComponent(String(filter)));
        }
        if (attributes !== undefined) {
            queryParameters.push('attributes='+encodeURIComponent(String(attributes)));
        }
        if (excludedAttributes !== undefined) {
            queryParameters.push('excludedAttributes='+encodeURIComponent(String(excludedAttributes)));
        }
        if (sortBy !== undefined) {
            queryParameters.push('sortBy='+encodeURIComponent(String(sortBy)));
        }
        if (sortOrder !== undefined) {
            queryParameters.push('sortOrder='+encodeURIComponent(String(sortOrder)));
        }
        if (startIndex !== undefined) {
            queryParameters.push('startIndex='+encodeURIComponent(String(startIndex)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/${encodeURIComponent(String(type))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Single SCIM Resource
     * 
     * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2TypeIdGet(type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2TypeIdGet(type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2TypeIdGet(type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (type === null || type === undefined){
            throw new Error('Required parameter type was null or undefined when calling scimV2TypeIdGet.');
        }

        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling scimV2TypeIdGet.');
        }

        let queryParameters: string[] = [];
        if (attributes !== undefined) {
            queryParameters.push('attributes='+encodeURIComponent(String(attributes)));
        }
        if (excludedAttributes !== undefined) {
            queryParameters.push('excludedAttributes='+encodeURIComponent(String(excludedAttributes)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/${encodeURIComponent(String(type))}/${encodeURIComponent(String(id))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Users with SCIM
     * 
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
     * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2UsersGet(filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2UsersGet(filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2UsersGet(filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (filter !== undefined) {
            queryParameters.push('filter='+encodeURIComponent(String(filter)));
        }
        if (attributes !== undefined) {
            queryParameters.push('attributes='+encodeURIComponent(String(attributes)));
        }
        if (excludedAttributes !== undefined) {
            queryParameters.push('excludedAttributes='+encodeURIComponent(String(excludedAttributes)));
        }
        if (sortBy !== undefined) {
            queryParameters.push('sortBy='+encodeURIComponent(String(sortBy)));
        }
        if (sortOrder !== undefined) {
            queryParameters.push('sortOrder='+encodeURIComponent(String(sortOrder)));
        }
        if (count !== undefined) {
            queryParameters.push('count='+encodeURIComponent(String(count)));
        }
        if (startIndex !== undefined) {
            queryParameters.push('startIndex='+encodeURIComponent(String(startIndex)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/Users?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Single User with SCIM
     * 
     * @param id The id of the user you wish to update.
     * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2UsersIdGet(id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2UsersIdGet(id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2UsersIdGet(id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling scimV2UsersIdGet.');
        }

        let queryParameters: string[] = [];
        if (filter !== undefined) {
            queryParameters.push('filter='+encodeURIComponent(String(filter)));
        }
        if (attributes !== undefined) {
            queryParameters.push('attributes='+encodeURIComponent(String(attributes)));
        }
        if (excludedAttributes !== undefined) {
            queryParameters.push('excludedAttributes='+encodeURIComponent(String(excludedAttributes)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/scim/v2/Users/${encodeURIComponent(String(id))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update User with SCIM
     * 
     * @param id The id of the user you wish to update.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2UsersIdPut(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2UsersIdPut(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2UsersIdPut(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling scimV2UsersIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/scim/v2/Users/${encodeURIComponent(String(id))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create User with SCIM
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public scimV2UsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public scimV2UsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public scimV2UsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/scim/v2/Users`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Signing Certificate
     * 
     * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesCertificateCertIdGet(certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesCertificateCertIdGet(certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesCertificateCertIdGet(certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (certId === null || certId === undefined){
            throw new Error('Required parameter certId was null or undefined when calling servicesCertificateCertIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/certificate/${encodeURIComponent(String(certId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Disable Configuration Mode
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesConfigurationModeActionsDisablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesConfigurationModeActionsDisablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesConfigurationModeActionsDisablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/configuration_mode/actions/disable`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Enable Configuration Mode
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesConfigurationModeActionsEnablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesConfigurationModeActionsEnablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesConfigurationModeActionsEnablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/configuration_mode/actions/enable`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Available Direct Data Files
     * 
     * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
     * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
     * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesDirectdataFilesGet(extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesDirectdataFilesGet(extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesDirectdataFilesGet(extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (extractType !== undefined) {
            queryParameters.push('extractType='+encodeURIComponent(String(extractType)));
        }
        if (startTime !== undefined) {
            queryParameters.push('startTime='+encodeURIComponent(String(startTime)));
        }
        if (stopTime !== undefined) {
            queryParameters.push('stopTime='+encodeURIComponent(String(stopTime)));
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/directdata/files?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Direct Data File
     * 
     * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesDirectdataFilesNameGet(name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesDirectdataFilesNameGet(name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesDirectdataFilesNameGet(name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (name === null || name === undefined){
            throw new Error('Required parameter name was null or undefined when calling servicesDirectdataFilesNameGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/directdata/files/${encodeURIComponent(String(name))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Item Content
     * 
     * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization 
     * @param accept 
     * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingItemsContentItemGet(item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingItemsContentItemGet(item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingItemsContentItemGet(item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (item === null || item === undefined){
            throw new Error('Required parameter item was null or undefined when calling servicesFileStagingItemsContentItemGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (range) {
            headers['Range'] = String(range);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/file_staging/items/content/${encodeURIComponent(String(item))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete File or Folder
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingItemsItemDelete(item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingItemsItemDelete(item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingItemsItemDelete(item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (item === null || item === undefined){
            throw new Error('Required parameter item was null or undefined when calling servicesFileStagingItemsItemDelete.');
        }

        let queryParameters: string[] = [];
        if (recursive !== undefined) {
            queryParameters.push('recursive='+encodeURIComponent(String(recursive)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/services/file_staging/items/${encodeURIComponent(String(item))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List Items at a Path
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingItemsItemGet(item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingItemsItemGet(item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingItemsItemGet(item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (item === null || item === undefined){
            throw new Error('Required parameter item was null or undefined when calling servicesFileStagingItemsItemGet.');
        }

        let queryParameters: string[] = [];
        if (recursive !== undefined) {
            queryParameters.push('recursive='+encodeURIComponent(String(recursive)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (formatResult !== undefined) {
            queryParameters.push('formatResult='+encodeURIComponent(String(formatResult)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/file_staging/items/${encodeURIComponent(String(item))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Folder or File
     * 
     * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingItemsItemPut(item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingItemsItemPut(item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingItemsItemPut(item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (item === null || item === undefined){
            throw new Error('Required parameter item was null or undefined when calling servicesFileStagingItemsItemPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/services/file_staging/items/${encodeURIComponent(String(item))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Folder or File
     * 
     * @param authorization 
     * @param accept 
     * @param contentMD5 Optional: The MD5 checksum of the file being uploaded.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingItemsPost(authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingItemsPost(authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingItemsPost(authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentMD5) {
            headers['Content-MD5'] = String(contentMD5);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/file_staging/items`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List Upload Sessions
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingUploadGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingUploadGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingUploadGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/file_staging/upload/`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Resumable Upload Session
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingUploadPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingUploadPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingUploadPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/file_staging/upload`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Abort Upload Session
     * 
     * @param uploadSessionId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (uploadSessionId === null || uploadSessionId === undefined){
            throw new Error('Required parameter uploadSessionId was null or undefined when calling servicesFileStagingUploadUploadSessionIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/services/file_staging/upload/${encodeURIComponent(String(uploadSessionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Get Upload Session Details
     * 
     * @param uploadSessionId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (uploadSessionId === null || uploadSessionId === undefined){
            throw new Error('Required parameter uploadSessionId was null or undefined when calling servicesFileStagingUploadUploadSessionIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/file_staging/upload/${encodeURIComponent(String(uploadSessionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List File Parts Uploaded to Session
     * 
     * @param uploadSessionId 
     * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (uploadSessionId === null || uploadSessionId === undefined){
            throw new Error('Required parameter uploadSessionId was null or undefined when calling servicesFileStagingUploadUploadSessionIdPartsGet.');
        }

        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/file_staging/upload/${encodeURIComponent(String(uploadSessionId))}/parts?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Commit Upload Session
     * 
     * @param uploadSessionId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (uploadSessionId === null || uploadSessionId === undefined){
            throw new Error('Required parameter uploadSessionId was null or undefined when calling servicesFileStagingUploadUploadSessionIdPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/file_staging/upload/${encodeURIComponent(String(uploadSessionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Upload to a Session
     * 
     * @param uploadSessionId 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
     * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (uploadSessionId === null || uploadSessionId === undefined){
            throw new Error('Required parameter uploadSessionId was null or undefined when calling servicesFileStagingUploadUploadSessionIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIFilePartNumber) {
            headers['X-VaultAPI-FilePartNumber'] = String(xVaultAPIFilePartNumber);
        }

        if (contentMD5) {
            headers['Content-MD5'] = String(contentMD5);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/services/file_staging/upload/${encodeURIComponent(String(uploadSessionId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Job Histories
     * 
     * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesJobsHistoriesGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesJobsHistoriesGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesJobsHistoriesGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (startDate !== undefined) {
            queryParameters.push('startDate='+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push('endDate='+encodeURIComponent(String(endDate)));
        }
        if (status !== undefined) {
            queryParameters.push('status='+encodeURIComponent(String(status)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/jobs/histories?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Import Bulk Translation File Job Errors
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesJobsJobIdErrorsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesJobsJobIdErrorsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesJobsJobIdErrorsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling servicesJobsJobIdErrorsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/jobs/${encodeURIComponent(String(jobId))}/errors`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Job Status
     * 
     * @param jobId The ID of the job, returned from the original job request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesJobsJobIdGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesJobsJobIdGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesJobsJobIdGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling servicesJobsJobIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/jobs/${encodeURIComponent(String(jobId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Import Bulk Translation File Job Summary
     * 
     * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesJobsJobIdSummaryGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesJobsJobIdSummaryGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesJobsJobIdSummaryGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling servicesJobsJobIdSummaryGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/jobs/${encodeURIComponent(String(jobId))}/summary`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve SDK Job Tasks
     * 
     * @param jobId The ID of the SDK job, returned from the original job request.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesJobsJobIdTasksGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesJobsJobIdTasksGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesJobsJobIdTasksGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling servicesJobsJobIdTasksGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/jobs/${encodeURIComponent(String(jobId))}/tasks`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Job Monitors
     * 
     * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
     * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesJobsMonitorsGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesJobsMonitorsGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesJobsMonitorsGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (startDate !== undefined) {
            queryParameters.push('startDate='+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push('endDate='+encodeURIComponent(String(endDate)));
        }
        if (status !== undefined) {
            queryParameters.push('status='+encodeURIComponent(String(status)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/jobs/monitors?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Start Job
     * 
     * @param jobId The ID of the scheduled job instance to start.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesJobsStartNowJobIdPost(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesJobsStartNowJobIdPost(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesJobsStartNowJobIdPost(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling servicesJobsStartNowJobIdPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/jobs/start_now/${encodeURIComponent(String(jobId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Extract Data Files
     * 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesLoaderExtractPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesLoaderExtractPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesLoaderExtractPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/loader/extract`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Load Failure Log Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling servicesLoaderJobIdTasksTaskIdFailurelogGet.');
        }

        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling servicesLoaderJobIdTasksTaskIdFailurelogGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/loader/${encodeURIComponent(String(jobId))}/tasks/${encodeURIComponent(String(taskId))}/failurelog`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Loader Extract Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesLoaderJobIdTasksTaskIdResultsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesLoaderJobIdTasksTaskIdResultsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesLoaderJobIdTasksTaskIdResultsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling servicesLoaderJobIdTasksTaskIdResultsGet.');
        }

        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling servicesLoaderJobIdTasksTaskIdResultsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/loader/${encodeURIComponent(String(jobId))}/tasks/${encodeURIComponent(String(taskId))}/results`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Loader Extract Renditions Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet.');
        }

        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/loader/${encodeURIComponent(String(jobId))}/tasks/${encodeURIComponent(String(taskId))}/results/renditions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Load Success Log Results
     * 
     * @param jobId The id value of the requested extract job.
     * @param taskId The id value of the requested extract task.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet.');
        }

        if (taskId === null || taskId === undefined){
            throw new Error('Required parameter taskId was null or undefined when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/loader/${encodeURIComponent(String(jobId))}/tasks/${encodeURIComponent(String(taskId))}/successlog`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Load Data Objects
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesLoaderLoadPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesLoaderLoadPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesLoaderLoadPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/loader/load`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Validate Package
     * 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesPackageActionsValidatePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesPackageActionsValidatePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesPackageActionsValidatePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/package/actions/validate`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Export Package
     * 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesPackagePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesPackagePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesPackagePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/package`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Import Package
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesPackagePut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesPackagePut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesPackagePut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/services/package`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Queues
     * 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesQueuesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesQueuesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesQueuesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/queues`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Disable Delivery
     * 
     * @param queueName The name of a specific Queue.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (queueName === null || queueName === undefined){
            throw new Error('Required parameter queueName was null or undefined when calling servicesQueuesQueueNameActionsDisableDeliveryPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/services/queues/${encodeURIComponent(String(queueName))}/actions/disable_delivery`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Enable Delivery
     * 
     * @param queueName The name of a specific Queue.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (queueName === null || queueName === undefined){
            throw new Error('Required parameter queueName was null or undefined when calling servicesQueuesQueueNameActionsEnableDeliveryPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/services/queues/${encodeURIComponent(String(queueName))}/actions/enable_delivery`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Reset Queue
     * 
     * @param queueName The name of a specific Queue.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesQueuesQueueNameActionsResetPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesQueuesQueueNameActionsResetPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesQueuesQueueNameActionsResetPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (queueName === null || queueName === undefined){
            throw new Error('Required parameter queueName was null or undefined when calling servicesQueuesQueueNameActionsResetPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/services/queues/${encodeURIComponent(String(queueName))}/actions/reset`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Queue Status
     * 
     * @param queueName The name of a specific queue. For example, queue__c.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesQueuesQueueNameGet(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesQueuesQueueNameGet(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesQueuesQueueNameGet(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (queueName === null || queueName === undefined){
            throw new Error('Required parameter queueName was null or undefined when calling servicesQueuesQueueNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/services/queues/${encodeURIComponent(String(queueName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Validate Imported Package
     * 
     * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (packageId === null || packageId === undefined){
            throw new Error('Required parameter packageId was null or undefined when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/services/vobject/vault_package__v/${encodeURIComponent(String(packageId))}/actions/validate`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * End Session
     * 
     * @param accept 
     * @param authorization The Vault sessionId to end.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public sessionDelete(accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public sessionDelete(accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public sessionDelete(accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/session`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to download.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public uicodeDistributionsDistributionNameCodeGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public uicodeDistributionsDistributionNameCodeGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public uicodeDistributionsDistributionNameCodeGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (distributionName === null || distributionName === undefined){
            throw new Error('Required parameter distributionName was null or undefined when calling uicodeDistributionsDistributionNameCodeGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/uicode/distributions/${encodeURIComponent(String(distributionName))}/code`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Single Client Code Distribution
     * 
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public uicodeDistributionsDistributionNameDelete(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public uicodeDistributionsDistributionNameDelete(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public uicodeDistributionsDistributionNameDelete(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (distributionName === null || distributionName === undefined){
            throw new Error('Required parameter distributionName was null or undefined when calling uicodeDistributionsDistributionNameDelete.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/uicode/distributions/${encodeURIComponent(String(distributionName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Single Client Code Distribution Metadata
     * 
     * @param distributionName The name attribute of the client code distribution to delete.
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public uicodeDistributionsDistributionNameGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public uicodeDistributionsDistributionNameGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public uicodeDistributionsDistributionNameGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (distributionName === null || distributionName === undefined){
            throw new Error('Required parameter distributionName was null or undefined when calling uicodeDistributionsDistributionNameGet.');
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/uicode/distributions/${encodeURIComponent(String(distributionName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve All Client Code Distribution Metadata
     * 
     * @param accept 
     * @param authorization 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public uicodeDistributionsGet(accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public uicodeDistributionsGet(accept?: string, authorization?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public uicodeDistributionsGet(accept?: string, authorization?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/uicode/distributions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Add or Replace Single Client Code Distribution
     * 
     * @param accept 
     * @param authorization 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public uicodeDistributionsPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public uicodeDistributionsPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public uicodeDistributionsPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/uicode/distributions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Deploy Package
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectVaultPackageVPackageIdActionsDeployPost(packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectVaultPackageVPackageIdActionsDeployPost(packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectVaultPackageVPackageIdActionsDeployPost(packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (packageId === null || packageId === undefined){
            throw new Error('Required parameter packageId was null or undefined when calling vobjectVaultPackageVPackageIdActionsDeployPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobject/vault_package__v/${encodeURIComponent(String(packageId))}/actions/deploy`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Package Deploy Results
     * 
     * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (packageId === null || packageId === undefined){
            throw new Error('Required parameter packageId was null or undefined when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobject/vault_package__v/${encodeURIComponent(String(packageId))}/actions/deploy/results`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Results of Cascade Delete Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus 
     * @param jobId 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet.');
        }

        if (jobStatus === null || jobStatus === undefined){
            throw new Error('Required parameter jobStatus was null or undefined when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet.');
        }

        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/cascadedelete/results/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(jobStatus))}/${encodeURIComponent(String(jobId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Results of Deep Copy Job
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param jobStatus The ID of the job, retrieved from the response of the job request.
     * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet.');
        }

        if (jobStatus === null || jobStatus === undefined){
            throw new Error('Required parameter jobStatus was null or undefined when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet.');
        }

        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/deepcopy/results/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(jobStatus))}/${encodeURIComponent(String(jobId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create a Placeholder from an EDL Item
     * 
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsEdlItemVActionsCreateplaceholderPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsEdlItemVActionsCreateplaceholderPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsEdlItemVActionsCreateplaceholderPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/edl_item__v/actions/createplaceholder`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Merge Records Job Log
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsMergesJobIdLogGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsMergesJobIdLogGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsMergesJobIdLogGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling vobjectsMergesJobIdLogGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/merges/${encodeURIComponent(String(jobId))}/log`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Record Merge Results
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsMergesJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsMergesJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsMergesJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling vobjectsMergesJobIdResultsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/merges/${encodeURIComponent(String(jobId))}/results`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Record Merge Status
     * 
     * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsMergesJobIdStatusGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsMergesJobIdStatusGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsMergesJobIdStatusGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (jobId === null || jobId === undefined){
            throw new Error('Required parameter jobId was null or undefined when calling vobjectsMergesJobIdStatusGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/merges/${encodeURIComponent(String(jobId))}/status`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Object Action on Multiple Records
     * 
     * @param objectName The object name__v field value.
     * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameActionsActionNamePost(objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameActionsActionNamePost(objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameActionsActionNamePost(objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameActionsActionNamePost.');
        }

        if (actionName === null || actionName === undefined){
            throw new Error('Required parameter actionName was null or undefined when calling vobjectsObjectNameActionsActionNamePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/actions/${encodeURIComponent(String(actionName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Change Object Type
     * 
     * @param objectName The name of the object.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameActionsChangetypePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameActionsChangetypePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameActionsChangetypePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameActionsChangetypePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/actions/changetype`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Record Merge
     * 
     * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param vobjectsObjectNameActionsMergePostRequestInner 
     
     */
    public vobjectsObjectNameActionsMergePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameActionsMergePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameActionsMergePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameActionsMergePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/actions/merge`, vobjectsObjectNameActionsMergePostRequestInner , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Roll-up Field Recalculation Status
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameActionsRecalculaterollupsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameActionsRecalculaterollupsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameActionsRecalculaterollupsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameActionsRecalculaterollupsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/actions/recalculaterollups`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Recalculate Roll-up Fields
     * 
     * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameActionsRecalculaterollupsPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameActionsRecalculaterollupsPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameActionsRecalculaterollupsPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameActionsRecalculaterollupsPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/actions/recalculaterollups`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Corporate Currency Fields
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/actions/updatecorporatecurrency`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameAttachmentsBatchDelete(objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameAttachmentsBatchDelete(objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameAttachmentsBatchDelete(objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameAttachmentsBatchDelete.');
        }

        let queryParameters: string[] = [];
        if (idParam !== undefined) {
            queryParameters.push('idParam='+encodeURIComponent(String(idParam)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/attachments/batch?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Multiple Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameAttachmentsBatchPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameAttachmentsBatchPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameAttachmentsBatchPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameAttachmentsBatchPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/attachments/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Multiple Object Record Attachment Descriptions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameAttachmentsBatchPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameAttachmentsBatchPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameAttachmentsBatchPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameAttachmentsBatchPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/attachments/batch`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param contentType Can be text/csv or application/json
     * @param accept Can be text/csv or application/json
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameDelete(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameDelete(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameDelete(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Record Roles
     * 
     * @param objectName The object name.
     * @param id The id of the document, binder, or object record.
     * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameIdRolesRoleNameGet(objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameIdRolesRoleNameGet(objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameIdRolesRoleNameGet(objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameIdRolesRoleNameGet.');
        }

        if (id === null || id === undefined){
            throw new Error('Required parameter id was null or undefined when calling vobjectsObjectNameIdRolesRoleNameGet.');
        }

        if (roleName === null || roleName === undefined){
            throw new Error('Required parameter roleName was null or undefined when calling vobjectsObjectNameIdRolesRoleNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(id))}/roles/${encodeURIComponent(String(roleName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object User Actions Details
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet.');
        }

        if (actionName === null || actionName === undefined){
            throw new Error('Required parameter actionName was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/actions/${encodeURIComponent(String(actionName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Initiate Object Action on a Single Record
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param authorization 
     * @param contentType 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost.');
        }

        if (actionName === null || actionName === undefined){
            throw new Error('Required parameter actionName was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/actions/${encodeURIComponent(String(actionName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Cascade Delete Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/actions/cascadedelete`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Deep Copy Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/actions/deepcopy`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Record User Actions
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value.
     * @param loc Optional: When true, retrieves localized (translated) strings for the label. 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdActionsGet(objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdActionsGet(objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdActionsGet(objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdActionsGet.');
        }

        let queryParameters: string[] = [];
        if (loc !== undefined) {
            queryParameters.push('loc='+encodeURIComponent(String(loc)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/actions?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet.');
        }

        if (attachmentFieldName === null || attachmentFieldName === undefined){
            throw new Error('Required parameter attachmentFieldName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachment_fields/${encodeURIComponent(String(attachmentFieldName))}/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Attachment Field File
     * 
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param attachmentFieldName The name of the Attachment field to update.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost.');
        }

        if (attachmentFieldName === null || attachmentFieldName === undefined){
            throw new Error('Required parameter attachmentFieldName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachment_fields/${encodeURIComponent(String(attachmentFieldName))}/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download All Attachment Field Files
     * 
     * @param objectName The object name__v field value. For example, product__v.
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachment_fields/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments/${encodeURIComponent(String(attachmentId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Record Attachment Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments/${encodeURIComponent(String(attachmentId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Object Record Attachment Description
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments/${encodeURIComponent(String(attachmentId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Delete Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download Object Record Attachment File
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion 
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Record Attachment Version Metadata
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Restore Object Record Attachment Version
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param attachmentVersion The attachment version__v field value.
     * @param restore 
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost.');
        }

        if (attachmentVersion === null || attachmentVersion === undefined){
            throw new Error('Required parameter attachmentVersion was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost.');
        }

        let queryParameters: string[] = [];
        if (restore !== undefined) {
            queryParameters.push('restore='+encodeURIComponent(String(restore)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions/${encodeURIComponent(String(attachmentVersion))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Record Attachment Versions
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param attachmentId The attachment id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet.');
        }

        if (attachmentId === null || attachmentId === undefined){
            throw new Error('Required parameter attachmentId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments/${encodeURIComponent(String(attachmentId))}/versions`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Download All Object Record Attachment Files
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments/file`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Record Attachments
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create Object Record Attachment
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsPost.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAttachmentsPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/attachments`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Complete Audit History for a Single Object Record
     * 
     * @param objectName The object name__v field value.
     * @param objectRecordId The object record id field value from which to retrieve user actions.
     * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
     * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param formatResult To request a CSV file of your audit history, use csv. 
     * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdAudittrailGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdAudittrailGet.');
        }

        let queryParameters: string[] = [];
        if (startDate !== undefined) {
            queryParameters.push('startDate='+encodeURIComponent(String(startDate)));
        }
        if (endDate !== undefined) {
            queryParameters.push('endDate='+encodeURIComponent(String(endDate)));
        }
        if (formatResult !== undefined) {
            queryParameters.push('formatResult='+encodeURIComponent(String(formatResult)));
        }
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }
        if (events !== undefined) {
            queryParameters.push('events='+encodeURIComponent(String(events)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}/audittrail?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Object Record
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param objectRecordId The object record id field value.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameObjectRecordIdGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameObjectRecordIdGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameObjectRecordIdGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameObjectRecordIdGet.');
        }

        if (objectRecordId === null || objectRecordId === undefined){
            throw new Error('Required parameter objectRecordId was null or undefined when calling vobjectsObjectNameObjectRecordIdGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/${encodeURIComponent(String(objectRecordId))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Create &amp; Upsert Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
     * @param authorization 
     * @param contentType Can be text/csv or application/json
     * @param accept Can be text/csv or application/json
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNamePost(objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNamePost(objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNamePost(objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNamePost.');
        }

        let queryParameters: string[] = [];
        if (idParam !== undefined) {
            queryParameters.push('idParam='+encodeURIComponent(String(idParam)));
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPINoTriggers) {
            headers['X-VaultAPI-NoTriggers'] = String(xVaultAPINoTriggers);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Update Object Records
     * 
     * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param authorization 
     * @param contentType Can be text/csv or application/json
     * @param accept Can be text/csv or application/json
     * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNamePut(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNamePut(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNamePut(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNamePut.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIMigrationMode) {
            headers['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
        }

        if (xVaultAPINoTriggers) {
            headers['X-VaultAPI-NoTriggers'] = String(xVaultAPINoTriggers);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.put(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Remove Users &amp; Groups from Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameRolesDelete(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameRolesDelete(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameRolesDelete(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameRolesDelete.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/roles`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Assign Users &amp; Groups to Roles on Object Records
     * 
     * @param objectName The name of the object where you want to remove roles.
     * @param authorization 
     * @param accept 
     * @param contentType 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsObjectNameRolesPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsObjectNameRolesPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsObjectNameRolesPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (objectName === null || objectName === undefined){
            throw new Error('Required parameter objectName was null or undefined when calling vobjectsObjectNameRolesPost.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (contentType) {
            headers['Content-Type'] = String(contentType);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.basePath}/vobjects/${encodeURIComponent(String(objectName))}/roles`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * Retrieve Outbound Package Dependencies
     * 
     * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param authorization 
     * @param accept 
     * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     
     */
    public vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'body', headers?: Headers): Observable<any>;
    public vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (packageId === null || packageId === undefined){
            throw new Error('Required parameter packageId was null or undefined when calling vobjectsOutboundPackageVPackageIdDependenciesGet.');
        }

        if (authorization) {
            headers['Authorization'] = String(authorization);
        }

        if (accept) {
            headers['Accept'] = String(accept);
        }

        if (xVaultAPIClientID) {
            headers['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.basePath}/vobjects/outbound_package__v/${encodeURIComponent(String(packageId))}/dependencies`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }

}
