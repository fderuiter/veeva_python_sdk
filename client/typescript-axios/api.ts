/* tslint:disable */
/* eslint-disable */
/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface VobjectsObjectNameActionsMergePostRequestInner
 */
export interface VobjectsObjectNameActionsMergePostRequestInner {
    /**
     * 
     * @type {string}
     * @memberof VobjectsObjectNameActionsMergePostRequestInner
     */
    'duplicate_record_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof VobjectsObjectNameActionsMergePostRequestInner
     */
    'main_record_id'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieve API Versions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Content File
         * @param {string} componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlComponentsComponentTypeAndRecordNameFilesGet: async (componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'componentTypeAndRecordName' is not null or undefined
            assertParamExists('apiMdlComponentsComponentTypeAndRecordNameFilesGet', 'componentTypeAndRecordName', componentTypeAndRecordName)
            const localVarPath = `/api/mdl/components/{component_type_and_record_name}/files`
                .replace(`{${"component_type_and_record_name"}}`, encodeURIComponent(String(componentTypeAndRecordName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Component Record (MDL)
         * @param {string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlComponentsComponentTypeAndRecordNameGet: async (componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'componentTypeAndRecordName' is not null or undefined
            assertParamExists('apiMdlComponentsComponentTypeAndRecordNameGet', 'componentTypeAndRecordName', componentTypeAndRecordName)
            const localVarPath = `/api/mdl/components/{component_type_and_record_name}`
                .replace(`{${"component_type_and_record_name"}}`, encodeURIComponent(String(componentTypeAndRecordName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Asynchronous MDL Script Results
         * @param {string} jobId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlExecuteAsyncJobIdResultsGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('apiMdlExecuteAsyncJobIdResultsGet', 'jobId', jobId)
            const localVarPath = `/api/mdl/execute_async/{job_id}/results`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute MDL Script Asynchronously
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlExecuteAsyncPost: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/mdl/execute_async`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Execute MDL Script
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlExecutePost: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/mdl/execute`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Content File
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlFilesPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/mdl/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Audit Details
         * @param {string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
         * @param {string} [startDate] Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
         * @param {string} [endDate] Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
         * @param {string} [allDates] Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
         * @param {string} [formatResult] To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [objects] This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
         * @param {string} [events] This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audittrailAuditTrailTypeGet: async (auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auditTrailType' is not null or undefined
            assertParamExists('audittrailAuditTrailTypeGet', 'auditTrailType', auditTrailType)
            const localVarPath = `/audittrail/{audit_trail_type}`
                .replace(`{${"audit_trail_type"}}`, encodeURIComponent(String(auditTrailType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (allDates !== undefined) {
                localVarQueryParameter['all_dates'] = allDates;
            }

            if (formatResult !== undefined) {
                localVarQueryParameter['format_result'] = formatResult;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (objects !== undefined) {
                localVarQueryParameter['objects'] = objects;
            }

            if (events !== undefined) {
                localVarQueryParameter['events'] = events;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authentication Type Discovery
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDiscoveryPost: async (accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/discovery`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary OAuth 2.0 / OpenID Connect
         * @param {string} oathOidcProfileId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOauthSessionOathOidcProfileIdPost: async (oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'oathOidcProfileId' is not null or undefined
            assertParamExists('authOauthSessionOathOidcProfileIdPost', 'oathOidcProfileId', oathOidcProfileId)
            const localVarPath = `/auth/oauth/session/{oath_oidc_profile_id}`
                .replace(`{${"oath_oidc_profile_id"}}`, encodeURIComponent(String(oathOidcProfileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary User Name and Password
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPost: async (contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Single Source Code File
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeClassNameDelete: async (className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'className' is not null or undefined
            assertParamExists('codeClassNameDelete', 'className', className)
            const localVarPath = `/code/{class_name}`
                .replace(`{${"class_name"}}`, encodeURIComponent(String(className)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable Vault Extension
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeClassNameDisablePut: async (className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'className' is not null or undefined
            assertParamExists('codeClassNameDisablePut', 'className', className)
            const localVarPath = `/code/{class_name}/disable`
                .replace(`{${"class_name"}}`, encodeURIComponent(String(className)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable Vault Extension
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeClassNameEnablePut: async (className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'className' is not null or undefined
            assertParamExists('codeClassNameEnablePut', 'className', className)
            const localVarPath = `/code/{class_name}/enable`
                .replace(`{${"class_name"}}`, encodeURIComponent(String(className)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Single Source Code File
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeClassNameGet: async (className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'className' is not null or undefined
            assertParamExists('codeClassNameGet', 'className', className)
            const localVarPath = `/code/{class_name}`
                .replace(`{${"class_name"}}`, encodeURIComponent(String(className)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Profiling Sessions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code/profiler`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Profiling Session
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerPost: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code/profiler`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary End Profiling Session
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerSessionNameActionsEndPost: async (sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionName' is not null or undefined
            assertParamExists('codeProfilerSessionNameActionsEndPost', 'sessionName', sessionName)
            const localVarPath = `/code/profiler/{session_name}/actions/end`
                .replace(`{${"session_name"}}`, encodeURIComponent(String(sessionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Profiling Session
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerSessionNameDelete: async (sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionName' is not null or undefined
            assertParamExists('codeProfilerSessionNameDelete', 'sessionName', sessionName)
            const localVarPath = `/code/profiler/{session_name}`
                .replace(`{${"session_name"}}`, encodeURIComponent(String(sessionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Profiling Session
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerSessionNameGet: async (sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionName' is not null or undefined
            assertParamExists('codeProfilerSessionNameGet', 'sessionName', sessionName)
            const localVarPath = `/code/profiler/{session_name}`
                .replace(`{${"session_name"}}`, encodeURIComponent(String(sessionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Profiling Session Results
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerSessionNameResultsGet: async (sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionName' is not null or undefined
            assertParamExists('codeProfilerSessionNameResultsGet', 'sessionName', sessionName)
            const localVarPath = `/code/profiler/{session_name}/results`
                .replace(`{${"session_name"}}`, encodeURIComponent(String(sessionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add or Replace Single Source Code File
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codePut: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Specific Root Nodes
         * @param {string} edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compositesTreesEdlHierarchyOrTemplateActionsListnodesPost: async (edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'edlHierarchyOrTemplate' is not null or undefined
            assertParamExists('compositesTreesEdlHierarchyOrTemplateActionsListnodesPost', 'edlHierarchyOrTemplate', edlHierarchyOrTemplate)
            const localVarPath = `/composites/trees/{edl_hierarchy_or_template}/actions/listnodes`
                .replace(`{${"edl_hierarchy_or_template"}}`, encodeURIComponent(String(edlHierarchyOrTemplate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Root Nodes
         * @param {string} edlHierarchyOrTemplate 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compositesTreesEdlHierarchyOrTemplateGet: async (edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'edlHierarchyOrTemplate' is not null or undefined
            assertParamExists('compositesTreesEdlHierarchyOrTemplateGet', 'edlHierarchyOrTemplate', edlHierarchyOrTemplate)
            const localVarPath = `/composites/trees/{edl_hierarchy_or_template}`
                .replace(`{${"edl_hierarchy_or_template"}}`, encodeURIComponent(String(edlHierarchyOrTemplate)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve a Node\'s Children
         * @param {string} parentNodeId The ID of a parent node in the hierarchy.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compositesTreesEdlHierarchyVParentNodeIdChildrenGet: async (parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentNodeId' is not null or undefined
            assertParamExists('compositesTreesEdlHierarchyVParentNodeIdChildrenGet', 'parentNodeId', parentNodeId)
            const localVarPath = `/composites/trees/edl_hierarchy__v/{parent_node_id}/children`
                .replace(`{${"parent_node_id"}}`, encodeURIComponent(String(parentNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Node Order
         * @param {string} parentNodeId The ID of a parent node in the hierarchy.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compositesTreesEdlHierarchyVParentNodeIdChildrenPut: async (parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentNodeId' is not null or undefined
            assertParamExists('compositesTreesEdlHierarchyVParentNodeIdChildrenPut', 'parentNodeId', parentNodeId)
            const localVarPath = `/composites/trees/edl_hierarchy__v/{parent_node_id}/children`
                .replace(`{${"parent_node_id"}}`, encodeURIComponent(String(parentNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Component Record (XML/JSON)
         * @param {string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationComponentTypeAndRecordNameGet: async (componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'componentTypeAndRecordName' is not null or undefined
            assertParamExists('configurationComponentTypeAndRecordNameGet', 'componentTypeAndRecordName', componentTypeAndRecordName)
            const localVarPath = `/configuration/{component_type_and_record_name}`
                .replace(`{${"component_type_and_record_name"}}`, encodeURIComponent(String(componentTypeAndRecordName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Component Record Collection
         * @param {string} componentType 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationComponentTypeGet: async (componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'componentType' is not null or undefined
            assertParamExists('configurationComponentTypeGet', 'componentType', componentType)
            const localVarPath = `/configuration/{component_type}`
                .replace(`{${"component_type"}}`, encodeURIComponent(String(componentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Details from a Specific Object
         * @param {string} objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationObjectNameAndObjectTypeGet: async (objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectNameAndObjectType' is not null or undefined
            assertParamExists('configurationObjectNameAndObjectTypeGet', 'objectNameAndObjectType', objectNameAndObjectType)
            const localVarPath = `/configuration/{object_name_and_object_type}`
                .replace(`{${"object_name_and_object_type"}}`, encodeURIComponent(String(objectNameAndObjectType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Details from All Object Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationObjecttypeGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuration/Objecttype`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Lifecycle Role Assignment Override Rules
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRoleAssignmentRuleDelete: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuration/role_assignment_rule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Lifecycle Role Assignment Rules (Default & Override)
         * @param {string} [lifecycleV] Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
         * @param {string} [roleV] Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
         * @param {string} [productV] Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
         * @param {string} [countryV] Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
         * @param {string} [studyV] In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
         * @param {string} [studyCountryV] In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRoleAssignmentRuleGet: async (lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuration/role_assignment_rule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lifecycleV !== undefined) {
                localVarQueryParameter['lifecycle__v'] = lifecycleV;
            }

            if (roleV !== undefined) {
                localVarQueryParameter['role__v'] = roleV;
            }

            if (productV !== undefined) {
                localVarQueryParameter['product__v'] = productV;
            }

            if (countryV !== undefined) {
                localVarQueryParameter['country__v'] = countryV;
            }

            if (studyV !== undefined) {
                localVarQueryParameter['study__v'] = studyV;
            }

            if (studyCountryV !== undefined) {
                localVarQueryParameter['study_country__v'] = studyCountryV;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Lifecycle Role Assignment Override Rules
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRoleAssignmentRulePost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuration/role_assignment_rule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Lifecycle Role Assignment Rules (Default & Override)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRoleAssignmentRulePut: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuration/role_assignment_rule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Delegated Session
         * @param {string} [authorization] The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationLoginPost: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delegation/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Delegations
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationVaultsGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/delegation/vaults`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Session Keep Alive
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keepAlivePost: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/keep-alive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Limits on Objects
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/limits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Daily API Usage
         * @param {string} [date] The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
         * @param {string} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsApiUsageGet: async (date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logs/api_usage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (logFormat !== undefined) {
                localVarQueryParameter['log_format'] = logFormat;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Debug Logs
         * @param {string} [userId] Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
         * @param {boolean} [includeInactive] Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugGet: async (userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logs/code/debug`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (includeInactive !== undefined) {
                localVarQueryParameter['include_inactive'] = includeInactive;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Debug Log
         * @param {string} id The ID of the debug log to delete.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugIdActionsResetDelete: async (id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logsCodeDebugIdActionsResetDelete', 'id', id)
            const localVarPath = `/logs/code/debug/{id}/actions/reset`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset Debug Log
         * @param {string} id The ID of the debug log to delete.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugIdActionsResetPost: async (id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logsCodeDebugIdActionsResetPost', 'id', id)
            const localVarPath = `/logs/code/debug/{id}/actions/reset`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Debug Log Files
         * @param {string} id The ID of the debug log to download.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugIdFilesGet: async (id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logsCodeDebugIdFilesGet', 'id', id)
            const localVarPath = `/logs/code/debug/{id}/files`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Single Debug Log
         * @param {string} id The ID of the debug log to retrieve.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugIdGet: async (id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logsCodeDebugIdGet', 'id', id)
            const localVarPath = `/logs/code/debug/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Debug Log
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logs/code/debug`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download SDK Runtime Log
         * @param {string} [date] 
         * @param {string} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeRuntimeGet: async (date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logs/code/runtime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (logFormat !== undefined) {
                localVarQueryParameter['log_format'] = logFormat;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import Bulk Translation File
         * @param {string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageTypeActionsImportPost: async (messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageType' is not null or undefined
            assertParamExists('messagesMessageTypeActionsImportPost', 'messageType', messageType)
            const localVarPath = `/messages/{message_type}/actions/import`
                .replace(`{${"message_type"}}`, encodeURIComponent(String(messageType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export Bulk Translation File
         * @param {string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
         * @param {string} lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageTypeLanguageLangActionsExportPost: async (messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageType' is not null or undefined
            assertParamExists('messagesMessageTypeLanguageLangActionsExportPost', 'messageType', messageType)
            // verify required parameter 'lang' is not null or undefined
            assertParamExists('messagesMessageTypeLanguageLangActionsExportPost', 'lang', lang)
            const localVarPath = `/messages/{message_type}/language/{lang}/actions/export`
                .replace(`{${"message_type"}}`, encodeURIComponent(String(messageType)))
                .replace(`{${"lang"}}`, encodeURIComponent(String(lang)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Audit Metadata
         * @param {string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataAudittrailAuditTrailTypeGet: async (auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auditTrailType' is not null or undefined
            assertParamExists('metadataAudittrailAuditTrailTypeGet', 'auditTrailType', auditTrailType)
            const localVarPath = `/metadata/audittrail/{audit_trail_type}`
                .replace(`{${"audit_trail_type"}}`, encodeURIComponent(String(auditTrailType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Audit Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataAudittrailGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/audittrail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Component Type Metadata
         * @param {string} componentType The component type name (Picklist, Docfield, Doctype, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataComponentsComponentTypeGet: async (componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'componentType' is not null or undefined
            assertParamExists('metadataComponentsComponentTypeGet', 'componentType', componentType)
            const localVarPath = `/metadata/components/{component_type}`
                .replace(`{${"component_type"}}`, encodeURIComponent(String(componentType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Component Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataComponentsGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/components`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Template Node Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsBindersTemplatesBindernodesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/binders/templates/bindernodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Template Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsBindersTemplatesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/binders/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Annotation Placemark Type Metadata
         * @param {string} placemarkType The name of the placemark type. For example, sticky__sys.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet: async (placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'placemarkType' is not null or undefined
            assertParamExists('metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet', 'placemarkType', placemarkType)
            const localVarPath = `/metadata/objects/documents/annotations/placemarks/types/{placemark_type}`
                .replace(`{${"placemark_type"}}`, encodeURIComponent(String(placemarkType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Annotation Reference Type Metadata
         * @param {string} referenceType 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet: async (referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'referenceType' is not null or undefined
            assertParamExists('metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet', 'referenceType', referenceType)
            const localVarPath = `/metadata/objects/documents/annotations/references/types/{reference_type}`
                .replace(`{${"reference_type"}}`, encodeURIComponent(String(referenceType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Annotation Type Metadata
         * @param {string} annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet: async (annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'annotationType' is not null or undefined
            assertParamExists('metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet', 'annotationType', annotationType)
            const localVarPath = `/metadata/objects/documents/annotations/types/{annotation_type}`
                .replace(`{${"annotation_type"}}`, encodeURIComponent(String(annotationType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Event SubType Metadata
         * @param {string} eventType The event type. For example, distribution__v.
         * @param {string} eventSubtype The event subtype. For example, approved_email__v.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet: async (eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventType' is not null or undefined
            assertParamExists('metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet', 'eventType', eventType)
            // verify required parameter 'eventSubtype' is not null or undefined
            assertParamExists('metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet', 'eventSubtype', eventSubtype)
            const localVarPath = `/metadata/objects/documents/events/{event_type}/types/{event_subtype}`
                .replace(`{${"event_type"}}`, encodeURIComponent(String(eventType)))
                .replace(`{${"event_subtype"}}`, encodeURIComponent(String(eventSubtype)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Event Types and Subtypes
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsEventsGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/documents/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Lock Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsLockGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/documents/lock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Common Document Fields
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsPropertiesFindCommonPost: async (contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/documents/properties/find_common`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Document Fields
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsPropertiesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/documents/properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Template Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTemplatesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/documents/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Document Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/documents/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Type
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesTypeGet: async (type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('metadataObjectsDocumentsTypesTypeGet', 'type', type)
            const localVarPath = `/metadata/objects/documents/types/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Type Relationships
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesTypeRelationshipsGet: async (type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('metadataObjectsDocumentsTypesTypeRelationshipsGet', 'type', type)
            const localVarPath = `/metadata/objects/documents/types/{type}/relationships`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Classification
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} subtype The document subtype. See Retrieve Document Types.
         * @param {string} classification The document classification. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet: async (type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet', 'type', type)
            // verify required parameter 'subtype' is not null or undefined
            assertParamExists('metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet', 'subtype', subtype)
            // verify required parameter 'classification' is not null or undefined
            assertParamExists('metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet', 'classification', classification)
            const localVarPath = `/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"subtype"}}`, encodeURIComponent(String(subtype)))
                .replace(`{${"classification"}}`, encodeURIComponent(String(classification)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Subtype
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} subtype The document subtype. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet: async (type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet', 'type', type)
            // verify required parameter 'subtype' is not null or undefined
            assertParamExists('metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet', 'subtype', subtype)
            const localVarPath = `/metadata/objects/documents/types/{type}/subtypes/{subtype}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"subtype"}}`, encodeURIComponent(String(subtype)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Group Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsGroupsGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Security Policy Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsSecuritypoliciesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/securitypolicies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve User Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsUsersGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/objects/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Archived Document Signature Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/query/archived_documents/relationships/document_signature__sysr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Signature Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/query/documents/relationships/document_signature__sysr`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Collection
         * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsGet: async (loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/metadata/vobjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Raw Object Deployment
         * @param {string} objectName 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNameActionsCanceldeploymentPost: async (objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('metadataVobjectsObjectNameActionsCanceldeploymentPost', 'objectName', objectName)
            const localVarPath = `/metadata/vobjects/{object_name}/actions/canceldeployment`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Field Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectFieldName The object field name value (id, name__v, external_id__v, etc.).
         * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNameFieldsObjectFieldNameGet: async (objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('metadataVobjectsObjectNameFieldsObjectFieldNameGet', 'objectName', objectName)
            // verify required parameter 'objectFieldName' is not null or undefined
            assertParamExists('metadataVobjectsObjectNameFieldsObjectFieldNameGet', 'objectFieldName', objectFieldName)
            const localVarPath = `/metadata/vobjects/{object_name}/fields/{object_field_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_field_name"}}`, encodeURIComponent(String(objectFieldName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNameGet: async (objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('metadataVobjectsObjectNameGet', 'objectName', objectName)
            const localVarPath = `/metadata/vobjects/{object_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Page Layouts
         * @param {string} objectName 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNamePageLayoutsGet: async (objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('metadataVobjectsObjectNamePageLayoutsGet', 'objectName', objectName)
            const localVarPath = `/metadata/vobjects/{object_name}/page_layouts`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Page Layout Metadata
         * @param {string} objectName The name of the object from which to retrieve page layout metadata.
         * @param {string} layoutName The name of the page layout from which to retrieve metadata.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNamePageLayoutsLayoutNameGet: async (objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('metadataVobjectsObjectNamePageLayoutsLayoutNameGet', 'objectName', objectName)
            // verify required parameter 'layoutName' is not null or undefined
            assertParamExists('metadataVobjectsObjectNamePageLayoutsLayoutNameGet', 'layoutName', layoutName)
            const localVarPath = `/metadata/vobjects/{object_name}/page_layouts/{layout_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"layout_name"}}`, encodeURIComponent(String(layoutName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Email Notification Histories
         * @param {string} [startDate] Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
         * @param {string} [endDate] Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
         * @param {boolean} [allDates] Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
         * @param {string} [formatResult] To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsHistoriesGet: async (startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/histories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (allDates !== undefined) {
                localVarQueryParameter['all_dates'] = allDates;
            }

            if (formatResult !== undefined) {
                localVarQueryParameter['format_result'] = formatResult;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Bulk Workflow Action Details
         * @param {string} action 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsActionGet: async (action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('objectWorkflowActionsActionGet', 'action', action)
            const localVarPath = `/object/workflow/actions/{action}`
                .replace(`{${"action"}}`, encodeURIComponent(String(action)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Workflow Actions on Multiple Workflows
         * @param {string} action 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsActionPost: async (action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('objectWorkflowActionsActionPost', 'action', action)
            const localVarPath = `/object/workflow/actions/{action}`
                .replace(`{${"action"}}`, encodeURIComponent(String(action)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Workflow Tasks
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsCanceltasksPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/object/workflow/actions/canceltasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Workflows
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsCancelworkflowsPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/object/workflow/actions/cancelworkflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Bulk Workflow Actions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/object/workflow/actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reassign Workflow Tasks
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsReassigntasksPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/object/workflow/actions/reassigntasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replace Workflow Owner
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsReplaceworkflowownerPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/object/workflow/actions/replaceworkflowowner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Export Results
         * @param {string} jobId The id value of the requested export job. This is returned with the export binder requests above.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersActionsExportJobIdResultsGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('objectsBindersActionsExportJobIdResultsGet', 'jobId', jobId)
            const localVarPath = `/objects/binders/actions/export/{job_id}/results`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export Binder (Latest Version)
         * @param {string} binderId The binder id field value.
         * @param {boolean} [source] to include source content or not
         * @param {string} [renditiontype] to include viewable renditions
         * @param {string} [docversion] to include all major versions
         * @param {string} [attachments] to include all versions of attachments
         * @param {string} [_export] configurable filename metadata
         * @param {boolean} [docfield] to exclude document metadata csv
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdActionsExportPost: async (binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdActionsExportPost', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}/actions/export`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (renditiontype !== undefined) {
                localVarQueryParameter['renditiontype'] = renditiontype;
            }

            if (docversion !== undefined) {
                localVarQueryParameter['docversion'] = docversion;
            }

            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (_export !== undefined) {
                localVarQueryParameter['export'] = _export;
            }

            if (docfield !== undefined) {
                localVarQueryParameter['docfield'] = docfield;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Binder Auto-Filing
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdActionsPost: async (binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdActionsPost', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}/actions`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Binding Rule
         * @param {string} binderId The binder id field value.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdBindingRulePut: async (binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdBindingRulePut', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}/binding_rule`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDelete: async (binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdDelete', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Binder Document Binding Rule
         * @param {string} binderId The binder id field value.
         * @param {string} nodeId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDocumentsNodeIdBindingRulePut: async (binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdDocumentsNodeIdBindingRulePut', 'binderId', binderId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('objectsBindersBinderIdDocumentsNodeIdBindingRulePut', 'nodeId', nodeId)
            const localVarPath = `/objects/binders/{binder_id}/documents/{node_id}/binding_rule`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Document to Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDocumentsPost: async (binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdDocumentsPost', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}/documents`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Document from Binder
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDocumentsSectionIdDelete: async (binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdDocumentsSectionIdDelete', 'binderId', binderId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('objectsBindersBinderIdDocumentsSectionIdDelete', 'sectionId', sectionId)
            const localVarPath = `/objects/binders/{binder_id}/documents/{section_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Move Document in Binder
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDocumentsSectionIdPut: async (binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdDocumentsSectionIdPut', 'binderId', binderId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('objectsBindersBinderIdDocumentsSectionIdPut', 'sectionId', sectionId)
            const localVarPath = `/objects/binders/{binder_id}/documents/{section_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [depth] To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdGet: async (binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdGet', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (depth !== undefined) {
                localVarQueryParameter['depth'] = depth;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdPost: async (binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdPost', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdPut: async (binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdPut', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Users & Groups from Roles on a Single Binder
         * @param {string} binderId The id value of the binder from which to remove roles.
         * @param {string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
         * @param {string} id The id value of the user or group to remove from the role.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete: async (binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete', 'binderId', binderId)
            // verify required parameter 'roleNameAndUserOrGroup' is not null or undefined
            assertParamExists('objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete', 'roleNameAndUserOrGroup', roleNameAndUserOrGroup)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete', 'id', id)
            const localVarPath = `/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"role_name_and_user_or_group"}}`, encodeURIComponent(String(roleNameAndUserOrGroup)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Binder Section Binding Rule
         * @param {string} binderId The binder id field value.
         * @param {string} nodeId The binder node id field value.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsNodeIdBindingRulePut: async (binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdSectionsNodeIdBindingRulePut', 'binderId', binderId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('objectsBindersBinderIdSectionsNodeIdBindingRulePut', 'nodeId', nodeId)
            const localVarPath = `/objects/binders/{binder_id}/sections/{node_id}/binding_rule`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Binder Section
         * @param {string} binderId The binder id field value.
         * @param {string} nodeId The binder node id of the section.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsNodeIdPut: async (binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdSectionsNodeIdPut', 'binderId', binderId)
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('objectsBindersBinderIdSectionsNodeIdPut', 'nodeId', nodeId)
            const localVarPath = `/objects/binders/{binder_id}/sections/{node_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Binder Section
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsPost: async (binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdSectionsPost', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}/sections`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Binder Section
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsSectionIdDelete: async (binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdSectionsSectionIdDelete', 'binderId', binderId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('objectsBindersBinderIdSectionsSectionIdDelete', 'sectionId', sectionId)
            const localVarPath = `/objects/binders/{binder_id}/sections/{section_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Sections
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsSectionIdGet: async (binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdSectionsSectionIdGet', 'binderId', binderId)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('objectsBindersBinderIdSectionsSectionIdGet', 'sectionId', sectionId)
            const localVarPath = `/objects/binders/{binder_id}/sections/{section_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Binder Versions
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsGet: async (binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsGet', 'binderId', binderId)
            const localVarPath = `/objects/binders/{binder_id}/versions`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export Binder (Specific Version)
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {boolean} [source] to include source content or not
         * @param {string} [renditiontype] to include viewable renditions
         * @param {string} [docversion] to include all major versions
         * @param {string} [attachments] to include all versions of attachments
         * @param {string} [_export] configurable filename metadata
         * @param {boolean} [docfield] to exclude document metadata csv
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost: async (binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost', 'binderId', binderId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost', 'minorVersion', minorVersion)
            const localVarPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (renditiontype !== undefined) {
                localVarQueryParameter['renditiontype'] = renditiontype;
            }

            if (docversion !== undefined) {
                localVarQueryParameter['docversion'] = docversion;
            }

            if (attachments !== undefined) {
                localVarQueryParameter['attachments'] = attachments;
            }

            if (_export !== undefined) {
                localVarQueryParameter['export'] = _export;
            }

            if (docfield !== undefined) {
                localVarQueryParameter['docfield'] = docfield;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete: async (binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete', 'binderId', binderId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete', 'minorVersion', minorVersion)
            const localVarPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionGet: async (binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionGet', 'binderId', binderId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionPut: async (binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionPut', 'binderId', binderId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionPut', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionPut', 'minorVersion', minorVersion)
            const localVarPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Binder Relationship
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost: async (binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost', 'binderId', binderId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost', 'minorVersion', minorVersion)
            const localVarPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Binder Relationship
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} relationshipId The binder relationship id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete: async (binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', 'binderId', binderId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', 'minorVersion', minorVersion)
            // verify required parameter 'relationshipId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', 'relationshipId', relationshipId)
            const localVarPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Relationship
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} relationshipId The binder relationship id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet: async (binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', 'binderId', binderId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', 'minorVersion', minorVersion)
            // verify required parameter 'relationshipId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', 'relationshipId', relationshipId)
            const localVarPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Version Section
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet: async (binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'binderId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet', 'binderId', binderId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet', 'minorVersion', minorVersion)
            // verify required parameter 'sectionId' is not null or undefined
            assertParamExists('objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet', 'sectionId', sectionId)
            const localVarPath = `/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}`
                .replace(`{${"binder_id"}}`, encodeURIComponent(String(binderId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"section_id"}}`, encodeURIComponent(String(sectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Binder Roles
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdRolesGet: async (id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsBindersIdRolesGet', 'id', id)
            const localVarPath = `/objects/binders/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on a Single Binder
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdRolesPost: async (id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsBindersIdRolesPost', 'id', id)
            const localVarPath = `/objects/binders/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Role
         * @param {string} id The binder &#x60;id&#x60;.
         * @param {string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdRolesRoleNameGet: async (id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsBindersIdRolesRoleNameGet', 'id', id)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('objectsBindersIdRolesRoleNameGet', 'roleName', roleName)
            const localVarPath = `/objects/binders/{id}/roles/{role_name}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder User Actions
         * @param {string} id The binder id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the binder.
         * @param {string} minorVersion The minor version number of the binder.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet: async (id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet', 'id', id)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Entry Criteria
         * @param {string} id The binder id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the binder.
         * @param {string} minorVersion The minor version number of the binder.
         * @param {string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet: async (id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', 'id', id)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', 'minorVersion', minorVersion)
            // verify required parameter 'nameV' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', 'nameV', nameV)
            const localVarPath = `/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"name__v"}}`, encodeURIComponent(String(nameV)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Binder User Action
         * @param {string} id The binder id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the binder.
         * @param {string} minorVersion The minor version number of the binder.
         * @param {string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut: async (id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', 'id', id)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', 'minorVersion', minorVersion)
            // verify required parameter 'nameV' is not null or undefined
            assertParamExists('objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', 'nameV', nameV)
            const localVarPath = `/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"name__v"}}`, encodeURIComponent(String(nameV)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve User Actions on Multiple Binders
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersLifecycleActionsPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/binders/lifecycle_actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Bulk Binder User Actions
         * @param {string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersLifecycleActionsUserActionNamePut: async (userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userActionName' is not null or undefined
            assertParamExists('objectsBindersLifecycleActionsUserActionNamePut', 'userActionName', userActionName)
            const localVarPath = `/objects/binders/lifecycle_actions/{user_action_name}`
                .replace(`{${"user_action_name"}}`, encodeURIComponent(String(userActionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Binder
         * @param {boolean} [async] When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersPost: async (async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/binders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (async !== undefined) {
                localVarQueryParameter['async'] = async;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Template Collection
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/binders/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Binder Template
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/binders/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Binder Template
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesPut: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/binders/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Template Node Attributes
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameBindernodesGet: async (templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateName' is not null or undefined
            assertParamExists('objectsBindersTemplatesTemplateNameBindernodesGet', 'templateName', templateName)
            const localVarPath = `/objects/binders/templates/{template_name}/bindernodes`
                .replace(`{${"template_name"}}`, encodeURIComponent(String(templateName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Binder Template Node
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameBindernodesPost: async (templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateName' is not null or undefined
            assertParamExists('objectsBindersTemplatesTemplateNameBindernodesPost', 'templateName', templateName)
            const localVarPath = `/objects/binders/templates/{template_name}/bindernodes`
                .replace(`{${"template_name"}}`, encodeURIComponent(String(templateName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replace Binder Template Nodes
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameBindernodesPut: async (templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateName' is not null or undefined
            assertParamExists('objectsBindersTemplatesTemplateNameBindernodesPut', 'templateName', templateName)
            const localVarPath = `/objects/binders/templates/{template_name}/bindernodes`
                .replace(`{${"template_name"}}`, encodeURIComponent(String(templateName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Binder Template
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameDelete: async (templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateName' is not null or undefined
            assertParamExists('objectsBindersTemplatesTemplateNameDelete', 'templateName', templateName)
            const localVarPath = `/objects/binders/templates/{template_name}`
                .replace(`{${"template_name"}}`, encodeURIComponent(String(templateName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Binder Template Attributes
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameGet: async (templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateName' is not null or undefined
            assertParamExists('objectsBindersTemplatesTemplateNameGet', 'templateName', templateName)
            const localVarPath = `/objects/binders/templates/{template_name}`
                .replace(`{${"template_name"}}`, encodeURIComponent(String(templateName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Deleted Document IDs
         * @param {string} [startDate] Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
         * @param {string} [endDate] Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDeletionsDocumentsGet: async (startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/deletions/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Deleted Object Record ID
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDeletionsVobjectsObjectNameGet: async (objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('objectsDeletionsVobjectsObjectNameGet', 'objectName', objectName)
            const localVarPath = `/objects/deletions/vobjects/{object_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Document Workflows
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsActionsGet: async (loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Controlled Copy Job Results
         * @param {string} lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
         * @param {string} jobId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet: async (lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lifecycleAndStateAndAction' is not null or undefined
            assertParamExists('objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet', 'lifecycleAndStateAndAction', lifecycleAndStateAndAction)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet', 'jobId', jobId)
            const localVarPath = `/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results`
                .replace(`{${"lifecycle_and_state_and_action"}}`, encodeURIComponent(String(lifecycleAndStateAndAction)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Workflow Details
         * @param {string} workflowName The document workflow name value.
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsActionsWorkflowNameGet: async (workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('objectsDocumentsActionsWorkflowNameGet', 'workflowName', workflowName)
            const localVarPath = `/objects/documents/actions/{workflow_name}`
                .replace(`{${"workflow_name"}}`, encodeURIComponent(String(workflowName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Document Workflow
         * @param {string} workflowName The document workflow name value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsActionsWorkflowNamePost: async (workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('objectsDocumentsActionsWorkflowNamePost', 'workflowName', workflowName)
            const localVarPath = `/objects/documents/actions/{workflow_name}`
                .replace(`{${"workflow_name"}}`, encodeURIComponent(String(workflowName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Annotations
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAnnotationsBatchDelete: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/annotations/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Multiple Annotations
         * @param {string} authorization 
         * @param {string} contentType 
         * @param {string} accept 
         * @param {string} xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAnnotationsBatchPost: async (authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('objectsDocumentsAnnotationsBatchPost', 'authorization', authorization)
            // verify required parameter 'contentType' is not null or undefined
            assertParamExists('objectsDocumentsAnnotationsBatchPost', 'contentType', contentType)
            // verify required parameter 'accept' is not null or undefined
            assertParamExists('objectsDocumentsAnnotationsBatchPost', 'accept', accept)
            // verify required parameter 'xVaultAPIClientID' is not null or undefined
            assertParamExists('objectsDocumentsAnnotationsBatchPost', 'xVaultAPIClientID', xVaultAPIClientID)
            const localVarPath = `/objects/documents/annotations/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Annotations
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAnnotationsBatchPut: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/annotations/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Annotation Replies
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAnnotationsRepliesBatchPost: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/annotations/replies/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Multiple Document Attachments
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAttachmentsBatchDelete: async (accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/attachments/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Multiple Document Attachments
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAttachmentsBatchPost: async (accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/attachments/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Multiple Document Attachment Descriptions
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAttachmentsBatchPut: async (accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/attachments/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Export Results
         * @param {string} jobId The id value of the requested export job. This is returned with the export document requests.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchActionsFileextractJobIdResultsGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('objectsDocumentsBatchActionsFileextractJobIdResultsGet', 'jobId', jobId)
            const localVarPath = `/objects/documents/batch/actions/fileextract/{job_id}/results`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export Documents
         * @param {boolean} [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
         * @param {boolean} [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
         * @param {boolean} [allversions] Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchActionsFileextractPost: async (source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/batch/actions/fileextract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (renditions !== undefined) {
                localVarQueryParameter['renditions'] = renditions;
            }

            if (allversions !== undefined) {
                localVarQueryParameter['allversions'] = allversions;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reclassify Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchActionsReclassifyPut: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/batch/actions/reclassify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = typeof xVaultAPIMigrationMode === 'string'
                    ? xVaultAPIMigrationMode
                    : JSON.stringify(xVaultAPIMigrationMode);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Multiple Document Renditions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchActionsRerenderPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/batch/actions/rerender`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Multiple Documents
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchDelete: async (idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idParam !== undefined) {
                localVarQueryParameter['idParam'] = idParam;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Undo Collaborative Authoring Checkout
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchLockDelete: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/batch/lock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = typeof xVaultAPIMigrationMode === 'string'
                    ? xVaultAPIMigrationMode
                    : JSON.stringify(xVaultAPIMigrationMode);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchPut: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = typeof xVaultAPIMigrationMode === 'string'
                    ? xVaultAPIMigrationMode
                    : JSON.stringify(xVaultAPIMigrationMode);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Anchor IDs
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAnchorsGet: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAnchorsGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/anchors`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export Document Annotations to PDF
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAnnotationsFileGet: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAnnotationsFileGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/annotations/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import Document Annotations from PDF
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAnnotationsFilePost: async (docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAnnotationsFilePost', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/annotations/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Single Document Attachment
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdDelete: async (docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdDelete', 'docId', docId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdDelete', 'attachmentId', attachmentId)
            const localVarPath = `/objects/documents/{doc_id}/attachments/{attachment_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Document Attachment
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdFileGet: async (docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdFileGet', 'docId', docId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdFileGet', 'attachmentId', attachmentId)
            const localVarPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Attachment Metadata
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdGet: async (docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdGet', 'docId', docId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdGet', 'attachmentId', attachmentId)
            const localVarPath = `/objects/documents/{doc_id}/attachments/{attachment_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Document Attachment Description
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdPut: async (docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdPut', 'docId', docId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdPut', 'attachmentId', attachmentId)
            const localVarPath = `/objects/documents/{doc_id}/attachments/{attachment_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Single Document Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete: async (docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', 'docId', docId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Document Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet: async (docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'docId', docId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Attachment Version Metadata
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet: async (docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'docId', docId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore Document Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {boolean} [restore] The parameter restore must be set to true. 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost: async (docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', 'docId', docId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (restore !== undefined) {
                localVarQueryParameter['restore'] = restore;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Attachment Versions
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet: async (docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet', 'docId', docId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet', 'attachmentId', attachmentId)
            const localVarPath = `/objects/documents/{doc_id}/attachments/{attachment_id}/versions`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download All Document Attachments
         * @param {string} docId The document id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsFileGet: async (docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsFileGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/attachments/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Attachments
         * @param {string} docId The document id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsGet: async (docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/attachments`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Document Attachment
         * @param {string} docId The document id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsPost: async (docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAttachmentsPost', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/attachments`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Complete Audit History for a Single Document
         * @param {string} docId The document ID for which to retrieve audit history.
         * @param {string} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
         * @param {string} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
         * @param {string} [formatResult] To request a CSV file of your audit history, use csv. 
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAudittrailGet: async (docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdAudittrailGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/audittrail`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (formatResult !== undefined) {
                localVarQueryParameter['format_result'] = formatResult;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (events !== undefined) {
                localVarQueryParameter['events'] = events;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Single Document
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdDelete: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdDelete', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Events
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdEventsGet: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdEventsGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/events`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Document File
         * @param {string} docId The document id field value.
         * @param {boolean} [lockDocument] Set to true to Check Out this document before retrieval. If omitted, defaults to false.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdFileGet: async (docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdFileGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (lockDocument !== undefined) {
                localVarQueryParameter['lockDocument'] = lockDocument;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdGet: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Document Lock
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdLockDelete: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdLockDelete', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/lock`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Lock
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdLockGet: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdLockGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/lock`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Document Lock
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdLockPost: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdLockPost', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/lock`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download All Document Version Attachments
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet: async (docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Single Document Version
         * @param {string} docId The document id field value.
         * @param {string} [suppressRendition] Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdPost: async (docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdPost', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (suppressRendition !== undefined) {
                localVarQueryParameter['suppressRendition'] = suppressRendition;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Single Document
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdPut: async (docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdPut', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = typeof xVaultAPIMigrationMode === 'string'
                    ? xVaultAPIMigrationMode
                    : JSON.stringify(xVaultAPIMigrationMode);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Renditions
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsGet: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRenditionsGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/renditions`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Single Document Rendition
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsRenditionTypeDelete: async (docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRenditionsRenditionTypeDelete', 'docId', docId)
            // verify required parameter 'renditionType' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRenditionsRenditionTypeDelete', 'renditionType', renditionType)
            const localVarPath = `/objects/documents/{doc_id}/renditions/{rendition_type}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"rendition_type"}}`, encodeURIComponent(String(renditionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Document Rendition File
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [steadyState] Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsRenditionTypeGet: async (docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRenditionsRenditionTypeGet', 'docId', docId)
            // verify required parameter 'renditionType' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRenditionsRenditionTypeGet', 'renditionType', renditionType)
            const localVarPath = `/objects/documents/{doc_id}/renditions/{rendition_type}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"rendition_type"}}`, encodeURIComponent(String(renditionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (steadyState !== undefined) {
                localVarQueryParameter['steadyState'] = steadyState;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Single Document Rendition
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsRenditionTypePost: async (docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRenditionsRenditionTypePost', 'docId', docId)
            // verify required parameter 'renditionType' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRenditionsRenditionTypePost', 'renditionType', renditionType)
            const localVarPath = `/objects/documents/{doc_id}/renditions/{rendition_type}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"rendition_type"}}`, encodeURIComponent(String(renditionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replace Document Rendition
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsRenditionTypePut: async (docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRenditionsRenditionTypePut', 'docId', docId)
            // verify required parameter 'renditionType' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRenditionsRenditionTypePut', 'renditionType', renditionType)
            const localVarPath = `/objects/documents/{doc_id}/renditions/{rendition_type}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"rendition_type"}}`, encodeURIComponent(String(renditionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Users & Groups from Roles on a Single Document
         * @param {string} docId The id value of the document from which to remove roles.
         * @param {string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
         * @param {string} id The id value of the user or group to remove from the role.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete: async (docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete', 'docId', docId)
            // verify required parameter 'roleNameAndUserOrGroup' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete', 'roleNameAndUserOrGroup', roleNameAndUserOrGroup)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete', 'id', id)
            const localVarPath = `/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"role_name_and_user_or_group"}}`, encodeURIComponent(String(roleNameAndUserOrGroup)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Version Attachments
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet: async (docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Versions
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsGet: async (docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsGet', 'docId', docId)
            const localVarPath = `/objects/documents/{doc_id}/versions`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Annotations by ID
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet: async (docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet', 'minorVersion', minorVersion)
            // verify required parameter 'annotationId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet', 'annotationId', annotationId)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Replies of Parent Annotation
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet: async (docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet', 'minorVersion', minorVersion)
            // verify required parameter 'annotationId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet', 'annotationId', annotationId)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"annotation_id"}}`, encodeURIComponent(String(annotationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export Document Version Annotations to PDF
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import Document Version Annotations from PDF
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Annotations by Document Version and Type
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
         * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
         * @param {string} [annotationTypes] The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
         * @param {string} [paginationId] A unique identifier used to load requests with paginated results.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet: async (docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (annotationTypes !== undefined) {
                localVarQueryParameter['annotation_types'] = annotationTypes;
            }

            if (paginationId !== undefined) {
                localVarQueryParameter['pagination_id'] = paginationId;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Document Version Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} attachmentId The id field value of the attachment.
         * @param {string} attachmentVersion The version of the attachment.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet: async (docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'minorVersion', minorVersion)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Version Attachment Versions
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} attachmentId The id of the document attachment to retrieve.
         * @param {string} attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet: async (docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'minorVersion', minorVersion)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Single Document Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Version Notes as CSV
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Document Event
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Video Annotations
         * @param {string} docId The video document id field value.
         * @param {string} majorVersion The video document major_version_number__v field value.
         * @param {string} minorVersion The video document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Document Version File
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet: async (docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Document Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = typeof xVaultAPIMigrationMode === 'string'
                    ? xVaultAPIMigrationMode
                    : JSON.stringify(xVaultAPIMigrationMode);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Relationships
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Single Document Relationship
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Single Document Relationship
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} relationshipId The relationship id field value. See Retrieve Document Relationships.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete: async (docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', 'minorVersion', minorVersion)
            // verify required parameter 'relationshipId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete', 'relationshipId', relationshipId)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Relationship
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} relationshipId The relationship id field value. See Retrieve Document Relationships.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet: async (docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', 'minorVersion', minorVersion)
            // verify required parameter 'relationshipId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet', 'relationshipId', relationshipId)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"relationship_id"}}`, encodeURIComponent(String(relationshipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Version Renditions
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet: async (docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Document Version Rendition
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete: async (docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete', 'minorVersion', minorVersion)
            // verify required parameter 'renditionType' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete', 'renditionType', renditionType)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"rendition_type"}}`, encodeURIComponent(String(renditionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Document Version Rendition File
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet: async (docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet', 'minorVersion', minorVersion)
            // verify required parameter 'renditionType' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet', 'renditionType', renditionType)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"rendition_type"}}`, encodeURIComponent(String(renditionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload Document Version Rendition
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost: async (docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost', 'minorVersion', minorVersion)
            // verify required parameter 'renditionType' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost', 'renditionType', renditionType)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"rendition_type"}}`, encodeURIComponent(String(renditionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replace Document Version Rendition
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut: async (docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut', 'minorVersion', minorVersion)
            // verify required parameter 'renditionType' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut', 'renditionType', renditionType)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"rendition_type"}}`, encodeURIComponent(String(renditionType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Document Version Thumbnail File
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet: async (docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'docId' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet', 'docId', docId)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail`
                .replace(`{${"doc_id"}}`, encodeURIComponent(String(docId)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Documents
         * @param {string} [namedFilter] Retrieves only documents which you have created.
         * @param {string} [scope] Searches only within the document content.
         * @param {string} [versionscope] Retrieves all document versions, rather than only the latest version.
         * @param {string} [search] Search for documents based on a {keyword} in searchable document fields.
         * @param {string} [limit] See VQL documentation for more information.
         * @param {string} [sort] See VQL documentation for more information.
         * @param {string} [start] See VQL documentation for more information.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsGet: async (namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (namedFilter !== undefined) {
                localVarQueryParameter['named_filter'] = namedFilter;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (versionscope !== undefined) {
                localVarQueryParameter['versionscope'] = versionscope;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Document Roles
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdRolesGet: async (id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsDocumentsIdRolesGet', 'id', id)
            const localVarPath = `/objects/documents/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on a Single Document
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdRolesPost: async (id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsDocumentsIdRolesPost', 'id', id)
            const localVarPath = `/objects/documents/{id}/roles`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Role
         * @param {string} id The document &#x60;id&#x60;.
         * @param {string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdRolesRoleNameGet: async (id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsDocumentsIdRolesRoleNameGet', 'id', id)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('objectsDocumentsIdRolesRoleNameGet', 'roleName', roleName)
            const localVarPath = `/objects/documents/{id}/roles/{role_name}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document User Actions
         * @param {string} id The document id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the document.
         * @param {string} minorVersion The minor version number of the document.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet: async (id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet', 'id', id)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet', 'minorVersion', minorVersion)
            const localVarPath = `/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Entry Criteria
         * @param {string} id The document id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the document.
         * @param {string} minorVersion The minor version number of the document.
         * @param {string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet: async (id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', 'id', id)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', 'minorVersion', minorVersion)
            // verify required parameter 'nameV' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet', 'nameV', nameV)
            const localVarPath = `/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"name__v"}}`, encodeURIComponent(String(nameV)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Document User Action
         * @param {string} id The document id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the document.
         * @param {string} minorVersion The minor version number of the document.
         * @param {string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut: async (id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', 'id', id)
            // verify required parameter 'majorVersion' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', 'majorVersion', majorVersion)
            // verify required parameter 'minorVersion' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', 'minorVersion', minorVersion)
            // verify required parameter 'nameV' is not null or undefined
            assertParamExists('objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut', 'nameV', nameV)
            const localVarPath = `/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"major_version"}}`, encodeURIComponent(String(majorVersion)))
                .replace(`{${"minor_version"}}`, encodeURIComponent(String(minorVersion)))
                .replace(`{${"name__v"}}`, encodeURIComponent(String(nameV)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve User Actions on Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsLifecycleActionsPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/lifecycle_actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Bulk Document User Actions
         * @param {string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsLifecycleActionsUserActionNamePut: async (userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userActionName' is not null or undefined
            assertParamExists('objectsDocumentsLifecycleActionsUserActionNamePut', 'userActionName', userActionName)
            const localVarPath = `/objects/documents/lifecycle_actions/{user_action_name}`
                .replace(`{${"user_action_name"}}`, encodeURIComponent(String(userActionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Single Document
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsPost: async (authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = typeof xVaultAPIMigrationMode === 'string'
                    ? xVaultAPIMigrationMode
                    : JSON.stringify(xVaultAPIMigrationMode);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Multiple Document Relationships
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRelationshipsBatchDelete: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/relationships/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Multiple Document Relationships
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRelationshipsBatchPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/relationships/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Multiple Document Renditions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRenditionsBatchDelete: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/renditions/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Multiple Document Renditions
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [largeSizeAsset] If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {boolean} [xVaultAPIMigrationMode] Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRenditionsBatchPost: async (idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/renditions/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idParam !== undefined) {
                localVarQueryParameter['idParam'] = idParam;
            }

            if (largeSizeAsset !== undefined) {
                localVarQueryParameter['largeSizeAsset'] = largeSizeAsset;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = typeof xVaultAPIMigrationMode === 'string'
                    ? xVaultAPIMigrationMode
                    : JSON.stringify(xVaultAPIMigrationMode);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Users and Groups from Roles on Multiple Documents & Binders
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRolesBatchDelete: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/roles/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on Multiple Documents & Binders
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRolesBatchPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/roles/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Template Collection
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Single Document Template
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesPost: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Multiple Document Templates
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesPut: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Basic Document Template
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesTemplateNameDelete: async (templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateName' is not null or undefined
            assertParamExists('objectsDocumentsTemplatesTemplateNameDelete', 'templateName', templateName)
            const localVarPath = `/objects/documents/templates/{template_name}`
                .replace(`{${"template_name"}}`, encodeURIComponent(String(templateName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Document Template File
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesTemplateNameFileGet: async (templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateName' is not null or undefined
            assertParamExists('objectsDocumentsTemplatesTemplateNameFileGet', 'templateName', templateName)
            const localVarPath = `/objects/documents/templates/{template_name}/file`
                .replace(`{${"template_name"}}`, encodeURIComponent(String(templateName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Document Template Attributes
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesTemplateNameGet: async (templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateName' is not null or undefined
            assertParamExists('objectsDocumentsTemplatesTemplateNameGet', 'templateName', templateName)
            const localVarPath = `/objects/documents/templates/{template_name}`
                .replace(`{${"template_name"}}`, encodeURIComponent(String(templateName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Single Document Template
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesTemplateNamePut: async (templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateName' is not null or undefined
            assertParamExists('objectsDocumentsTemplatesTemplateNamePut', 'templateName', templateName)
            const localVarPath = `/objects/documents/templates/{template_name}`
                .replace(`{${"template_name"}}`, encodeURIComponent(String(templateName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Document Tokens
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTokensPost: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export Document Versions
         * @param {boolean} [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
         * @param {boolean} [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsVersionsBatchActionsFileextractPost: async (source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/versions/batch/actions/fileextract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (renditions !== undefined) {
                localVarQueryParameter['renditions'] = renditions;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Multiple Document Versions
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsVersionsBatchDelete: async (idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/versions/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idParam !== undefined) {
                localVarQueryParameter['idParam'] = idParam;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Multiple Document Versions
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIMigrationMode] Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsVersionsBatchPost: async (idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/documents/versions/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idParam !== undefined) {
                localVarQueryParameter['idParam'] = idParam;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = String(xVaultAPIMigrationMode);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Domain Information
         * @param {boolean} [includeApplication] To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDomainGet: async (includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/domain`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeApplication !== undefined) {
                localVarQueryParameter['include_application'] = includeApplication;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Domains
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDomainsGet: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/domains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add EDL Matched Documents
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsEdlMatchedDocumentsBatchActionsAddPost: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/edl_matched_documents/batch/actions/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove EDL Matched Documents
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsEdlMatchedDocumentsBatchActionsRemovePost: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/edl_matched_documents/batch/actions/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Auto Managed Groups
         * @param {string} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsAutoGet: async (limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/groups/auto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Groups
         * @param {string} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsGet: async (includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeImplied !== undefined) {
                localVarQueryParameter['includeImplied'] = includeImplied;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Group
         * @param {string} groupId The group id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsGroupIdDelete: async (groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('objectsGroupsGroupIdDelete', 'groupId', groupId)
            const localVarPath = `/objects/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Group
         * @param {string} groupId The group id field value.
         * @param {boolean} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsGroupIdGet: async (groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('objectsGroupsGroupIdGet', 'groupId', groupId)
            const localVarPath = `/objects/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeImplied !== undefined) {
                localVarQueryParameter['includeImplied'] = includeImplied;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Group
         * @param {string} groupId The group id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsGroupIdPut: async (groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('objectsGroupsGroupIdPut', 'groupId', groupId)
            const localVarPath = `/objects/groups/{group_id}`
                .replace(`{${"group_id"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Group 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Application License Usage
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsLicensesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/licenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Multi-Record Workflows
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsActionsGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/objectworkflows/actions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Multi-Record Workflow Details
         * @param {string} workflowName 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsActionsWorkflowNameGet: async (workflowName: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('objectsObjectworkflowsActionsWorkflowNameGet', 'workflowName', workflowName)
            const localVarPath = `/objects/objectworkflows/actions/{workflow_name}`
                .replace(`{${"workflow_name"}}`, encodeURIComponent(String(workflowName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Multi-Record Workflow
         * @param {string} workflowName 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsActionsWorkflowNamePost: async (workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowName' is not null or undefined
            assertParamExists('objectsObjectworkflowsActionsWorkflowNamePost', 'workflowName', workflowName)
            const localVarPath = `/objects/objectworkflows/actions/{workflow_name}`
                .replace(`{${"workflow_name"}}`, encodeURIComponent(String(workflowName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Workflows
         * @param {string} [objectV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
         * @param {string} [recordIdV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
         * @param {string} [participant] To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
         * @param {string} [statusV] To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
         * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
         * @param {string} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsGet: async (objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/objectworkflows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (objectV !== undefined) {
                localVarQueryParameter['object__v'] = objectV;
            }

            if (recordIdV !== undefined) {
                localVarQueryParameter['record_id__v'] = recordIdV;
            }

            if (participant !== undefined) {
                localVarQueryParameter['participant'] = participant;
            }

            if (statusV !== undefined) {
                localVarQueryParameter['status__v'] = statusV;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Workflow Tasks
         * @param {string} [objectV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
         * @param {string} [recordIdV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
         * @param {string} [assigneeV] To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
         * @param {string} [statusV] To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
         * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
         * @param {string} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksGet: async (objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/objectworkflows/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (objectV !== undefined) {
                localVarQueryParameter['object__v'] = objectV;
            }

            if (recordIdV !== undefined) {
                localVarQueryParameter['record_id__v'] = recordIdV;
            }

            if (assigneeV !== undefined) {
                localVarQueryParameter['assignee__v'] = assigneeV;
            }

            if (statusV !== undefined) {
                localVarQueryParameter['status__v'] = statusV;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Accept Single Record Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsAcceptPost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsAcceptPost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/accept`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsCancelPost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsCancelPost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/cancel`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Complete Single Record Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsCompletePost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsCompletePost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/complete`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Workflow Task Actions
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsGet: async (taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsGet', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Accept Multi-item Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Complete Multi-item Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Manage Multi-Item Workflow Content
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reassign Multi-item Workflow Task
         * @param {string} taskId The id of the task to reassign.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reassign Single Record Workflow Task
         * @param {string} taskId The id of the task to reassign.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsReassignPost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsReassignPost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/reassign`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Workflow Task Action Details
         * @param {string} taskId The task id field value.
         * @param {string} taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsTaskActionGet: async (taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsTaskActionGet', 'taskId', taskId)
            // verify required parameter 'taskAction' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsTaskActionGet', 'taskAction', taskAction)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/{task_action}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"task_action"}}`, encodeURIComponent(String(taskAction)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Undo Workflow Task Acceptance
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/undoaccept`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Workflow Task Due Date
         * @param {string} taskId The id of the task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost: async (taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}/actions/updateduedate`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Workflow Task Details
         * @param {string} taskId The task id field value.
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdGet: async (taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('objectsObjectworkflowsTasksTaskIdGet', 'taskId', taskId)
            const localVarPath = `/objects/objectworkflows/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Workflow Actions
         * @param {string} workflowId The workflow id field value.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsWorkflowIdActionsGet: async (workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('objectsObjectworkflowsWorkflowIdActionsGet', 'workflowId', workflowId)
            const localVarPath = `/objects/objectworkflows/{workflow_id}/actions`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Workflow Action Details
         * @param {string} workflowId The workflow id field value.
         * @param {string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet: async (workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet', 'workflowId', workflowId)
            // verify required parameter 'workflowAction' is not null or undefined
            assertParamExists('objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet', 'workflowAction', workflowAction)
            const localVarPath = `/objects/objectworkflows/{workflow_id}/actions/{workflow_action}`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"workflow_action"}}`, encodeURIComponent(String(workflowAction)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Workflow Action
         * @param {string} workflowId The workflow id field value.
         * @param {string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
         * @param {string} [documentsSys] Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost: async (workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost', 'workflowId', workflowId)
            // verify required parameter 'workflowAction' is not null or undefined
            assertParamExists('objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost', 'workflowAction', workflowAction)
            const localVarPath = `/objects/objectworkflows/{workflow_id}/actions/{workflow_action}`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId)))
                .replace(`{${"workflow_action"}}`, encodeURIComponent(String(workflowAction)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentsSys !== undefined) {
                localVarQueryParameter['documents__sys'] = documentsSys;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Workflow Details
         * @param {string} workflowId The workflow id field value.
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsWorkflowIdGet: async (workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('objectsObjectworkflowsWorkflowIdGet', 'workflowId', workflowId)
            const localVarPath = `/objects/objectworkflows/{workflow_id}`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Picklists
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/picklists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Picklist Values
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNameGet: async (picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'picklistName' is not null or undefined
            assertParamExists('objectsPicklistsPicklistNameGet', 'picklistName', picklistName)
            const localVarPath = `/objects/picklists/{picklist_name}`
                .replace(`{${"picklist_name"}}`, encodeURIComponent(String(picklistName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inactivate Picklist Value
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNamePicklistValueNameDelete: async (picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'picklistName' is not null or undefined
            assertParamExists('objectsPicklistsPicklistNamePicklistValueNameDelete', 'picklistName', picklistName)
            // verify required parameter 'picklistValueName' is not null or undefined
            assertParamExists('objectsPicklistsPicklistNamePicklistValueNameDelete', 'picklistValueName', picklistValueName)
            const localVarPath = `/objects/picklists/{picklist_name}/{picklist_value_name}`
                .replace(`{${"picklist_name"}}`, encodeURIComponent(String(picklistName)))
                .replace(`{${"picklist_value_name"}}`, encodeURIComponent(String(picklistValueName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Picklist Value
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNamePicklistValueNamePut: async (picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'picklistName' is not null or undefined
            assertParamExists('objectsPicklistsPicklistNamePicklistValueNamePut', 'picklistName', picklistName)
            // verify required parameter 'picklistValueName' is not null or undefined
            assertParamExists('objectsPicklistsPicklistNamePicklistValueNamePut', 'picklistValueName', picklistValueName)
            const localVarPath = `/objects/picklists/{picklist_name}/{picklist_value_name}`
                .replace(`{${"picklist_name"}}`, encodeURIComponent(String(picklistName)))
                .replace(`{${"picklist_value_name"}}`, encodeURIComponent(String(picklistValueName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Picklist Values
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNamePost: async (picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'picklistName' is not null or undefined
            assertParamExists('objectsPicklistsPicklistNamePost', 'picklistName', picklistName)
            const localVarPath = `/objects/picklists/{picklist_name}`
                .replace(`{${"picklist_name"}}`, encodeURIComponent(String(picklistName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Picklist Value Label
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNamePut: async (picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'picklistName' is not null or undefined
            assertParamExists('objectsPicklistsPicklistNamePut', 'picklistName', picklistName)
            const localVarPath = `/objects/picklists/{picklist_name}`
                .replace(`{${"picklist_name"}}`, encodeURIComponent(String(picklistName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Build Production Vault
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxActionsBuildproductionPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/sandbox/actions/buildproduction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Promote to Production
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxActionsPromoteproductionPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/sandbox/actions/promoteproduction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Recheck Sandbox Usage Limit
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxActionsRecheckusagePost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/sandbox/actions/recheckusage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change Sandbox Size
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxBatchChangesizePost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/sandbox/batch/changesize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Sandbox Entitlements
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxEntitlementsSetPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/sandbox/entitlements/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Sandboxes
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/sandbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Sandbox
         * @param {string} name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxNameDelete: async (name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('objectsSandboxNameDelete', 'name', name)
            const localVarPath = `/objects/sandbox/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create or Refresh Sandbox
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/sandbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Sandbox Snapshot
         * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotApiNameActionsUpdatePost: async (apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiName' is not null or undefined
            assertParamExists('objectsSandboxSnapshotApiNameActionsUpdatePost', 'apiName', apiName)
            const localVarPath = `/objects/sandbox/snapshot/{api_name}/actions/update`
                .replace(`{${"api_name"}}`, encodeURIComponent(String(apiName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upgrade Sandbox Snapshot
         * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotApiNameActionsUpgradePost: async (apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiName' is not null or undefined
            assertParamExists('objectsSandboxSnapshotApiNameActionsUpgradePost', 'apiName', apiName)
            const localVarPath = `/objects/sandbox/snapshot/{api_name}/actions/upgrade`
                .replace(`{${"api_name"}}`, encodeURIComponent(String(apiName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Sandbox Snapshot
         * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotApiNameDelete: async (apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiName' is not null or undefined
            assertParamExists('objectsSandboxSnapshotApiNameDelete', 'apiName', apiName)
            const localVarPath = `/objects/sandbox/snapshot/{api_name}`
                .replace(`{${"api_name"}}`, encodeURIComponent(String(apiName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Sandbox Snapshots
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/sandbox/snapshot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Sandbox Snapshot
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/sandbox/snapshot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Sandbox from Snapshot
         * @param {string} vaultId The Vault ID of the sandbox to be refreshed.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxVaultIdActionsRefreshPost: async (vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('objectsSandboxVaultIdActionsRefreshPost', 'vaultId', vaultId)
            const localVarPath = `/objects/sandbox/{vault_id}/actions/refresh`
                .replace(`{${"vault_id"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Sandbox Details by ID
         * @param {string} vaultId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxVaultIdGet: async (vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('objectsSandboxVaultIdGet', 'vaultId', vaultId)
            const localVarPath = `/objects/sandbox/{vault_id}`
                .replace(`{${"vault_id"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Security Policies
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSecuritypoliciesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/securitypolicies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Security Policy
         * @param {string} securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSecuritypoliciesSecurityPolicyNameGet: async (securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityPolicyName' is not null or undefined
            assertParamExists('objectsSecuritypoliciesSecurityPolicyNameGet', 'securityPolicyName', securityPolicyName)
            const localVarPath = `/objects/securitypolicies/{security_policy_name}`
                .replace(`{${"security_policy_name"}}`, encodeURIComponent(String(securityPolicyName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Users
         * @param {string} [vaults] Retrieve all users assigned to all Vaults in your domain.
         * @param {string} [excludeVaultMembership] Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
         * @param {string} [excludeAppLicensing] Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersGet: async (vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (vaults !== undefined) {
                localVarQueryParameter['vaults'] = vaults;
            }

            if (excludeVaultMembership !== undefined) {
                localVarQueryParameter['exclude_vault_membership'] = excludeVaultMembership;
            }

            if (excludeAppLicensing !== undefined) {
                localVarQueryParameter['exclude_app_licensing'] = excludeAppLicensing;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve User
         * @param {string} id The user id field value. Use the value me to get information for the currently authenticated user.
         * @param {string} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
         * @param {string} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersIdGet: async (id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsUsersIdGet', 'id', id)
            const localVarPath = `/objects/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (excludeVaultMembership !== undefined) {
                localVarQueryParameter['exclude_vault_membership'] = excludeVaultMembership;
            }

            if (excludeAppLicensing !== undefined) {
                localVarQueryParameter['exclude_app_licensing'] = excludeAppLicensing;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve User Permissions
         * @param {string} id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
         * @param {string} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersIdPermissionsGet: async (id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsUsersIdPermissionsGet', 'id', id)
            const localVarPath = `/objects/users/{id}/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Single User
         * @param {string} id The user id field value. Use the value me to get information for the currently authenticated user.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersIdPut: async (id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('objectsUsersIdPut', 'id', id)
            const localVarPath = `/objects/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate Session User
         * @param {string} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
         * @param {string} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersMeGet: async (excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (excludeVaultMembership !== undefined) {
                localVarQueryParameter['exclude_vault_membership'] = excludeVaultMembership;
            }

            if (excludeAppLicensing !== undefined) {
                localVarQueryParameter['exclude_app_licensing'] = excludeAppLicensing;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change My Password
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersMePasswordPost: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/users/me/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve My User Permissions
         * @param {string} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersMePermissionsGet: async (filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/users/me/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update My User
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersMePut: async (authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Single User
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Multiple Users
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersPut: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable User
         * @param {string} userId The user id field value. 
         * @param {boolean} [domain] When true, this disables the user account in all vaults in the domain.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersUserIdDelete: async (userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('objectsUsersUserIdDelete', 'userId', userId)
            const localVarPath = `/objects/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = domain;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Vault Membership
         * @param {string} userId The user id field value.
         * @param {string} vaultId The system-managed id field value assigned to each vault in the domain.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersUserIdVaultMembershipVaultIdPut: async (userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('objectsUsersUserIdVaultMembershipVaultIdPut', 'userId', userId)
            // verify required parameter 'vaultId' is not null or undefined
            assertParamExists('objectsUsersUserIdVaultMembershipVaultIdPut', 'vaultId', vaultId)
            const localVarPath = `/objects/users/{user_id}/vault_membership/{vault_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"vault_id"}}`, encodeURIComponent(String(vaultId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Vault Compare
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsVaultActionsComparePost: async (authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/vault/actions/compare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Vault Configuration Report
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsVaultActionsConfigreportPost: async (authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/objects/vault/actions/configreport`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Component Definition Query
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryComponentsPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/query/components`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Next Page URL
         * @param {string} nextPage 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIDescribeQuery] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryNextPagePost: async (nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nextPage' is not null or undefined
            assertParamExists('queryNextPagePost', 'nextPage', nextPage)
            const localVarPath = `/query/{next_page}`
                .replace(`{${"next_page"}}`, encodeURIComponent(String(nextPage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIDescribeQuery != null) {
                localVarHeaderParameter['X-VaultAPI-DescribeQuery'] = typeof xVaultAPIDescribeQuery === 'string'
                    ? xVaultAPIDescribeQuery
                    : JSON.stringify(xVaultAPIDescribeQuery);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submitting a Query
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIDescribeQuery] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPost: async (authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIDescribeQuery != null) {
                localVarHeaderParameter['X-VaultAPI-DescribeQuery'] = typeof xVaultAPIDescribeQuery === 'string'
                    ? xVaultAPIDescribeQuery
                    : JSON.stringify(xVaultAPIDescribeQuery);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Previous Page URL
         * @param {string} previousPage 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIDescribeQuery] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPreviousPagePost: async (previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'previousPage' is not null or undefined
            assertParamExists('queryPreviousPagePost', 'previousPage', previousPage)
            const localVarPath = `/query/{previous_page}`
                .replace(`{${"previous_page"}}`, encodeURIComponent(String(previousPage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIDescribeQuery != null) {
                localVarHeaderParameter['X-VaultAPI-DescribeQuery'] = typeof xVaultAPIDescribeQuery === 'string'
                    ? xVaultAPIDescribeQuery
                    : JSON.stringify(xVaultAPIDescribeQuery);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Current User with SCIM
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2MeGet: async (attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scim/v2/Me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (excludedAttributes !== undefined) {
                localVarQueryParameter['excludedAttributes'] = excludedAttributes;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Current User with SCIM
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2MePut: async (attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scim/v2/Me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (excludedAttributes !== undefined) {
                localVarQueryParameter['excludedAttributes'] = excludedAttributes;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All SCIM Resource Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2ResourceTypesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scim/v2/ResourceTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Single SCIM Resource Type
         * @param {string} type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2ResourceTypesTypeGet: async (type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('scimV2ResourceTypesTypeGet', 'type', type)
            const localVarPath = `/scim/v2/ResourceTypes/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All SCIM Schema Information
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2SchemasGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scim/v2/Schemas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Single SCIM Schema Information
         * @param {string} id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2SchemasIdGet: async (id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scimV2SchemasIdGet', 'id', id)
            const localVarPath = `/scim/v2/Schemas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve SCIM Provider
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2ServiceProviderConfigGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scim/v2/ServiceProviderConfig`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve SCIM Resources
         * @param {string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
         * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
         * @param {string} [sortOrder] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
         * @param {string} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2TypeGet: async (type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('scimV2TypeGet', 'type', type)
            const localVarPath = `/scim/v2/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (excludedAttributes !== undefined) {
                localVarQueryParameter['excludedAttributes'] = excludedAttributes;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Single SCIM Resource
         * @param {string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
         * @param {string} id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2TypeIdGet: async (type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('scimV2TypeIdGet', 'type', type)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scimV2TypeIdGet', 'id', id)
            const localVarPath = `/scim/v2/{type}/{id}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (excludedAttributes !== undefined) {
                localVarQueryParameter['excludedAttributes'] = excludedAttributes;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Users with SCIM
         * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
         * @param {string} [sortOrder] Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
         * @param {string} [count] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
         * @param {string} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2UsersGet: async (filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scim/v2/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (excludedAttributes !== undefined) {
                localVarQueryParameter['excludedAttributes'] = excludedAttributes;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Single User with SCIM
         * @param {string} id The id of the user you wish to update.
         * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2UsersIdGet: async (id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scimV2UsersIdGet', 'id', id)
            const localVarPath = `/scim/v2/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (attributes !== undefined) {
                localVarQueryParameter['attributes'] = attributes;
            }

            if (excludedAttributes !== undefined) {
                localVarQueryParameter['excludedAttributes'] = excludedAttributes;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User with SCIM
         * @param {string} id The id of the user you wish to update.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2UsersIdPut: async (id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('scimV2UsersIdPut', 'id', id)
            const localVarPath = `/scim/v2/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User with SCIM
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2UsersPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scim/v2/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Signing Certificate
         * @param {string} certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesCertificateCertIdGet: async (certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certId' is not null or undefined
            assertParamExists('servicesCertificateCertIdGet', 'certId', certId)
            const localVarPath = `/services/certificate/{cert_id}`
                .replace(`{${"cert_id"}}`, encodeURIComponent(String(certId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable Configuration Mode
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesConfigurationModeActionsDisablePost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/configuration_mode/actions/disable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable Configuration Mode
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesConfigurationModeActionsEnablePost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/configuration_mode/actions/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Available Direct Data Files
         * @param {string} [extractType] The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
         * @param {number} [startTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
         * @param {number} [stopTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesDirectdataFilesGet: async (extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/directdata/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (extractType !== undefined) {
                localVarQueryParameter['extract_type'] = extractType;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }

            if (stopTime !== undefined) {
                localVarQueryParameter['stop_time'] = stopTime;
            }


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Direct Data File
         * @param {string} name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesDirectdataFilesNameGet: async (name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('servicesDirectdataFilesNameGet', 'name', name)
            const localVarPath = `/services/directdata/files/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Item Content
         * @param {string} item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [range] Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsContentItemGet: async (item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'item' is not null or undefined
            assertParamExists('servicesFileStagingItemsContentItemGet', 'item', item)
            const localVarPath = `/services/file_staging/items/content/{item}`
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (range != null) {
                localVarHeaderParameter['Range'] = String(range);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete File or Folder
         * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [recursive] Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsItemDelete: async (item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'item' is not null or undefined
            assertParamExists('servicesFileStagingItemsItemDelete', 'item', item)
            const localVarPath = `/services/file_staging/items/{item}`
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recursive !== undefined) {
                localVarQueryParameter['recursive'] = recursive;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Items at a Path
         * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [recursive] If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
         * @param {string} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
         * @param {string} [formatResult] If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsItemGet: async (item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'item' is not null or undefined
            assertParamExists('servicesFileStagingItemsItemGet', 'item', item)
            const localVarPath = `/services/file_staging/items/{item}`
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (recursive !== undefined) {
                localVarQueryParameter['recursive'] = recursive;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (formatResult !== undefined) {
                localVarQueryParameter['format_result'] = formatResult;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Folder or File
         * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsItemPut: async (item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'item' is not null or undefined
            assertParamExists('servicesFileStagingItemsItemPut', 'item', item)
            const localVarPath = `/services/file_staging/items/{item}`
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Folder or File
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentMD5] Optional: The MD5 checksum of the file being uploaded.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsPost: async (authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/file_staging/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentMD5 != null) {
                localVarHeaderParameter['Content-MD5'] = String(contentMD5);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Upload Sessions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/file_staging/upload/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Resumable Upload Session
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadPost: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/file_staging/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Abort Upload Session
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdDelete: async (uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadSessionId' is not null or undefined
            assertParamExists('servicesFileStagingUploadUploadSessionIdDelete', 'uploadSessionId', uploadSessionId)
            const localVarPath = `/services/file_staging/upload/{upload_session_id}`
                .replace(`{${"upload_session_id"}}`, encodeURIComponent(String(uploadSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Upload Session Details
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdGet: async (uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadSessionId' is not null or undefined
            assertParamExists('servicesFileStagingUploadUploadSessionIdGet', 'uploadSessionId', uploadSessionId)
            const localVarPath = `/services/file_staging/upload/{upload_session_id}`
                .replace(`{${"upload_session_id"}}`, encodeURIComponent(String(uploadSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List File Parts Uploaded to Session
         * @param {string} uploadSessionId 
         * @param {string} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdPartsGet: async (uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadSessionId' is not null or undefined
            assertParamExists('servicesFileStagingUploadUploadSessionIdPartsGet', 'uploadSessionId', uploadSessionId)
            const localVarPath = `/services/file_staging/upload/{upload_session_id}/parts`
                .replace(`{${"upload_session_id"}}`, encodeURIComponent(String(uploadSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Commit Upload Session
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdPost: async (uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadSessionId' is not null or undefined
            assertParamExists('servicesFileStagingUploadUploadSessionIdPost', 'uploadSessionId', uploadSessionId)
            const localVarPath = `/services/file_staging/upload/{upload_session_id}`
                .replace(`{${"upload_session_id"}}`, encodeURIComponent(String(uploadSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload to a Session
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIFilePartNumber] The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
         * @param {string} [contentMD5] Optional: The MD5 checksum of the file part being uploaded.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdPut: async (uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uploadSessionId' is not null or undefined
            assertParamExists('servicesFileStagingUploadUploadSessionIdPut', 'uploadSessionId', uploadSessionId)
            const localVarPath = `/services/file_staging/upload/{upload_session_id}`
                .replace(`{${"upload_session_id"}}`, encodeURIComponent(String(uploadSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIFilePartNumber != null) {
                localVarHeaderParameter['X-VaultAPI-FilePartNumber'] = String(xVaultAPIFilePartNumber);
            }
            if (contentMD5 != null) {
                localVarHeaderParameter['Content-MD5'] = String(contentMD5);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Job Histories
         * @param {string} [startDate] Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
         * @param {string} [endDate] Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
         * @param {string} [status] Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsHistoriesGet: async (startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/jobs/histories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Import Bulk Translation File Job Errors
         * @param {string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsJobIdErrorsGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('servicesJobsJobIdErrorsGet', 'jobId', jobId)
            const localVarPath = `/services/jobs/{job_id}/errors`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Job Status
         * @param {string} jobId The ID of the job, returned from the original job request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsJobIdGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('servicesJobsJobIdGet', 'jobId', jobId)
            const localVarPath = `/services/jobs/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Import Bulk Translation File Job Summary
         * @param {string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsJobIdSummaryGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('servicesJobsJobIdSummaryGet', 'jobId', jobId)
            const localVarPath = `/services/jobs/{job_id}/summary`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve SDK Job Tasks
         * @param {string} jobId The ID of the SDK job, returned from the original job request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsJobIdTasksGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('servicesJobsJobIdTasksGet', 'jobId', jobId)
            const localVarPath = `/services/jobs/{job_id}/tasks`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Job Monitors
         * @param {string} [startDate] Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
         * @param {string} [endDate] Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
         * @param {string} [status] Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
         * @param {string} [limit] Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsMonitorsGet: async (startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/jobs/monitors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start Job
         * @param {string} jobId The ID of the scheduled job instance to start.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsStartNowJobIdPost: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('servicesJobsStartNowJobIdPost', 'jobId', jobId)
            const localVarPath = `/services/jobs/start_now/{job_id}`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Extract Data Files
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderExtractPost: async (authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/loader/extract`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Load Failure Log Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderJobIdTasksTaskIdFailurelogGet: async (jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('servicesLoaderJobIdTasksTaskIdFailurelogGet', 'jobId', jobId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('servicesLoaderJobIdTasksTaskIdFailurelogGet', 'taskId', taskId)
            const localVarPath = `/services/loader/{job_id}/tasks/{task_id}/failurelog`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Loader Extract Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderJobIdTasksTaskIdResultsGet: async (jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('servicesLoaderJobIdTasksTaskIdResultsGet', 'jobId', jobId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('servicesLoaderJobIdTasksTaskIdResultsGet', 'taskId', taskId)
            const localVarPath = `/services/loader/{job_id}/tasks/{task_id}/results`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Loader Extract Renditions Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderJobIdTasksTaskIdResultsRenditionsGet: async (jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('servicesLoaderJobIdTasksTaskIdResultsRenditionsGet', 'jobId', jobId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('servicesLoaderJobIdTasksTaskIdResultsRenditionsGet', 'taskId', taskId)
            const localVarPath = `/services/loader/{job_id}/tasks/{task_id}/results/renditions`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Load Success Log Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderJobIdTasksTaskIdSuccesslogGet: async (jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('servicesLoaderJobIdTasksTaskIdSuccesslogGet', 'jobId', jobId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('servicesLoaderJobIdTasksTaskIdSuccesslogGet', 'taskId', taskId)
            const localVarPath = `/services/loader/{job_id}/tasks/{task_id}/successlog`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Load Data Objects
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderLoadPost: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/loader/load`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate Package
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPackageActionsValidatePost: async (authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/package/actions/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Export Package
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPackagePost: async (authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/package`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Import Package
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPackagePut: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/package`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Queues
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesGet: async (authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services/queues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable Delivery
         * @param {string} queueName The name of a specific Queue.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesQueueNameActionsDisableDeliveryPut: async (queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queueName' is not null or undefined
            assertParamExists('servicesQueuesQueueNameActionsDisableDeliveryPut', 'queueName', queueName)
            const localVarPath = `/services/queues/{queue_name}/actions/disable_delivery`
                .replace(`{${"queue_name"}}`, encodeURIComponent(String(queueName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable Delivery
         * @param {string} queueName The name of a specific Queue.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesQueueNameActionsEnableDeliveryPut: async (queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queueName' is not null or undefined
            assertParamExists('servicesQueuesQueueNameActionsEnableDeliveryPut', 'queueName', queueName)
            const localVarPath = `/services/queues/{queue_name}/actions/enable_delivery`
                .replace(`{${"queue_name"}}`, encodeURIComponent(String(queueName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset Queue
         * @param {string} queueName The name of a specific Queue.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesQueueNameActionsResetPut: async (queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queueName' is not null or undefined
            assertParamExists('servicesQueuesQueueNameActionsResetPut', 'queueName', queueName)
            const localVarPath = `/services/queues/{queue_name}/actions/reset`
                .replace(`{${"queue_name"}}`, encodeURIComponent(String(queueName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Queue Status
         * @param {string} queueName The name of a specific queue. For example, queue__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesQueueNameGet: async (queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'queueName' is not null or undefined
            assertParamExists('servicesQueuesQueueNameGet', 'queueName', queueName)
            const localVarPath = `/services/queues/{queue_name}`
                .replace(`{${"queue_name"}}`, encodeURIComponent(String(queueName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validate Imported Package
         * @param {string} packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesVobjectVaultPackageVPackageIdActionsValidatePost: async (packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('servicesVobjectVaultPackageVPackageIdActionsValidatePost', 'packageId', packageId)
            const localVarPath = `/services/vobject/vault_package__v/{package_id}/actions/validate`
                .replace(`{${"package_id"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary End Session
         * @param {string} [accept] 
         * @param {string} [authorization] The Vault sessionId to end.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionDelete: async (accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Single Client Code Distribution
         * @param {string} distributionName The name attribute of the client code distribution to download.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsDistributionNameCodeGet: async (distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'distributionName' is not null or undefined
            assertParamExists('uicodeDistributionsDistributionNameCodeGet', 'distributionName', distributionName)
            const localVarPath = `/uicode/distributions/{distribution_name}/code`
                .replace(`{${"distribution_name"}}`, encodeURIComponent(String(distributionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Single Client Code Distribution
         * @param {string} distributionName The name attribute of the client code distribution to delete.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsDistributionNameDelete: async (distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'distributionName' is not null or undefined
            assertParamExists('uicodeDistributionsDistributionNameDelete', 'distributionName', distributionName)
            const localVarPath = `/uicode/distributions/{distribution_name}`
                .replace(`{${"distribution_name"}}`, encodeURIComponent(String(distributionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Single Client Code Distribution Metadata
         * @param {string} distributionName The name attribute of the client code distribution to delete.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsDistributionNameGet: async (distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'distributionName' is not null or undefined
            assertParamExists('uicodeDistributionsDistributionNameGet', 'distributionName', distributionName)
            const localVarPath = `/uicode/distributions/{distribution_name}`
                .replace(`{${"distribution_name"}}`, encodeURIComponent(String(distributionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Client Code Distribution Metadata
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsGet: async (accept?: string, authorization?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/uicode/distributions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add or Replace Single Client Code Distribution
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsPost: async (accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/uicode/distributions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deploy Package
         * @param {string} packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectVaultPackageVPackageIdActionsDeployPost: async (packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('vobjectVaultPackageVPackageIdActionsDeployPost', 'packageId', packageId)
            const localVarPath = `/vobject/vault_package__v/{package_id}/actions/deploy`
                .replace(`{${"package_id"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Package Deploy Results
         * @param {string} packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectVaultPackageVPackageIdActionsDeployResultsGet: async (packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('vobjectVaultPackageVPackageIdActionsDeployResultsGet', 'packageId', packageId)
            const localVarPath = `/vobject/vault_package__v/{package_id}/actions/deploy/results`
                .replace(`{${"package_id"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Results of Cascade Delete Job
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} jobStatus 
         * @param {string} jobId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet: async (objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet', 'objectName', objectName)
            // verify required parameter 'jobStatus' is not null or undefined
            assertParamExists('vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet', 'jobStatus', jobStatus)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet', 'jobId', jobId)
            const localVarPath = `/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"job_status"}}`, encodeURIComponent(String(jobStatus)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Results of Deep Copy Job
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} jobStatus The ID of the job, retrieved from the response of the job request.
         * @param {string} jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet: async (objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet', 'objectName', objectName)
            // verify required parameter 'jobStatus' is not null or undefined
            assertParamExists('vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet', 'jobStatus', jobStatus)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet', 'jobId', jobId)
            const localVarPath = `/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"job_status"}}`, encodeURIComponent(String(jobStatus)))
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a Placeholder from an EDL Item
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsEdlItemVActionsCreateplaceholderPost: async (authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vobjects/edl_item__v/actions/createplaceholder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Merge Records Job Log
         * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsMergesJobIdLogGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('vobjectsMergesJobIdLogGet', 'jobId', jobId)
            const localVarPath = `/vobjects/merges/{job_id}/log`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Record Merge Results
         * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsMergesJobIdResultsGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('vobjectsMergesJobIdResultsGet', 'jobId', jobId)
            const localVarPath = `/vobjects/merges/{job_id}/results`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Record Merge Status
         * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsMergesJobIdStatusGet: async (jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('vobjectsMergesJobIdStatusGet', 'jobId', jobId)
            const localVarPath = `/vobjects/merges/{job_id}/status`
                .replace(`{${"job_id"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Object Action on Multiple Records
         * @param {string} objectName The object name__v field value.
         * @param {string} actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsActionNamePost: async (objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameActionsActionNamePost', 'objectName', objectName)
            // verify required parameter 'actionName' is not null or undefined
            assertParamExists('vobjectsObjectNameActionsActionNamePost', 'actionName', actionName)
            const localVarPath = `/vobjects/{object_name}/actions/{action_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"action_name"}}`, encodeURIComponent(String(actionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change Object Type
         * @param {string} objectName The name of the object.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsChangetypePost: async (objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameActionsChangetypePost', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/actions/changetype`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Record Merge
         * @param {string} objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {Array<VobjectsObjectNameActionsMergePostRequestInner>} [vobjectsObjectNameActionsMergePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsMergePost: async (objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameActionsMergePost', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/actions/merge`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vobjectsObjectNameActionsMergePostRequestInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Roll-up Field Recalculation Status
         * @param {string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsRecalculaterollupsGet: async (objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameActionsRecalculaterollupsGet', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/actions/recalculaterollups`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Recalculate Roll-up Fields
         * @param {string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsRecalculaterollupsPost: async (objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameActionsRecalculaterollupsPost', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/actions/recalculaterollups`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Corporate Currency Fields
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsUpdatecorporatecurrencyPut: async (objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameActionsUpdatecorporatecurrencyPut', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/actions/updatecorporatecurrency`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Multiple Object Record Attachments
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [idParam] 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameAttachmentsBatchDelete: async (objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameAttachmentsBatchDelete', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/attachments/batch`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idParam !== undefined) {
                localVarQueryParameter['idParam'] = idParam;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Multiple Object Record Attachments
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameAttachmentsBatchPost: async (objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameAttachmentsBatchPost', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/attachments/batch`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Multiple Object Record Attachment Descriptions
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameAttachmentsBatchPut: async (objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameAttachmentsBatchPut', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/attachments/batch`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Object Records
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [contentType] Can be text/csv or application/json
         * @param {string} [accept] Can be text/csv or application/json
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameDelete: async (objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameDelete', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Record Roles
         * @param {string} objectName The object name.
         * @param {string} id The id of the document, binder, or object record.
         * @param {string} roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameIdRolesRoleNameGet: async (objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameIdRolesRoleNameGet', 'objectName', objectName)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('vobjectsObjectNameIdRolesRoleNameGet', 'id', id)
            // verify required parameter 'roleName' is not null or undefined
            assertParamExists('vobjectsObjectNameIdRolesRoleNameGet', 'roleName', roleName)
            const localVarPath = `/vobjects/{object_name}/{id}/roles/{role_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"role_name"}}`, encodeURIComponent(String(roleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object User Actions Details
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
         * @param {string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsActionNameGet: async (objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsActionNameGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsActionNameGet', 'objectRecordId', objectRecordId)
            // verify required parameter 'actionName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsActionNameGet', 'actionName', actionName)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/actions/{action_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"action_name"}}`, encodeURIComponent(String(actionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Initiate Object Action on a Single Record
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
         * @param {string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsActionNamePost: async (objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsActionNamePost', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsActionNamePost', 'objectRecordId', objectRecordId)
            // verify required parameter 'actionName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsActionNamePost', 'actionName', actionName)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/actions/{action_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"action_name"}}`, encodeURIComponent(String(actionName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cascade Delete Object Record
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsCascadedeletePost: async (objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsCascadedeletePost', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsCascadedeletePost', 'objectRecordId', objectRecordId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/actions/cascadedelete`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deep Copy Object Record
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsDeepcopyPost: async (objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsDeepcopyPost', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsDeepcopyPost', 'objectRecordId', objectRecordId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/actions/deepcopy`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Record User Actions
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value.
         * @param {boolean} [loc] Optional: When true, retrieves localized (translated) strings for the label. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsGet: async (objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdActionsGet', 'objectRecordId', objectRecordId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/actions`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (loc !== undefined) {
                localVarQueryParameter['loc'] = loc;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Attachment Field File
         * @param {string} objectName The object name__v field value. For example, product__v.
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentFieldName The name of the Attachment field to update.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet: async (objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentFieldName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet', 'attachmentFieldName', attachmentFieldName)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_field_name"}}`, encodeURIComponent(String(attachmentFieldName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Attachment Field File
         * @param {string} objectName The object name__v field value. For example, product__v.
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentFieldName The name of the Attachment field to update.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost: async (objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentFieldName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost', 'attachmentFieldName', attachmentFieldName)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_field_name"}}`, encodeURIComponent(String(attachmentFieldName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download All Attachment Field Files
         * @param {string} objectName The object name__v field value. For example, product__v.
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet: async (objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet', 'objectRecordId', objectRecordId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachment_fields/file`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Object Record Attachment
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete: async (objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete', 'attachmentId', attachmentId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Record Attachment Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet: async (objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet', 'attachmentId', attachmentId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Object Record Attachment Description
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut: async (objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut', 'attachmentId', attachmentId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Object Record Attachment Version
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete: async (objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Object Record Attachment File
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet: async (objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Record Attachment Version Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet: async (objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore Object Record Attachment Version
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {boolean} [restore] 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost: async (objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', 'attachmentId', attachmentId)
            // verify required parameter 'attachmentVersion' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost', 'attachmentVersion', attachmentVersion)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)))
                .replace(`{${"attachment_version"}}`, encodeURIComponent(String(attachmentVersion)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (restore !== undefined) {
                localVarQueryParameter['restore'] = restore;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Record Attachment Versions
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet: async (objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet', 'objectRecordId', objectRecordId)
            // verify required parameter 'attachmentId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet', 'attachmentId', attachmentId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)))
                .replace(`{${"attachment_id"}}`, encodeURIComponent(String(attachmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download All Object Record Attachment Files
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsFileGet: async (objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsFileGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsFileGet', 'objectRecordId', objectRecordId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments/file`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Record Attachments
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsGet: async (objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsGet', 'objectRecordId', objectRecordId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Object Record Attachment
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsPost: async (objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsPost', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAttachmentsPost', 'objectRecordId', objectRecordId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/attachments`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Complete Audit History for a Single Object Record
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
         * @param {string} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
         * @param {string} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
         * @param {string} [formatResult] To request a CSV file of your audit history, use csv. 
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAudittrailGet: async (objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAudittrailGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdAudittrailGet', 'objectRecordId', objectRecordId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}/audittrail`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (formatResult !== undefined) {
                localVarQueryParameter['format_result'] = formatResult;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (events !== undefined) {
                localVarQueryParameter['events'] = events;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Object Record
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdGet: async (objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdGet', 'objectName', objectName)
            // verify required parameter 'objectRecordId' is not null or undefined
            assertParamExists('vobjectsObjectNameObjectRecordIdGet', 'objectRecordId', objectRecordId)
            const localVarPath = `/vobjects/{object_name}/{object_record_id}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)))
                .replace(`{${"object_record_id"}}`, encodeURIComponent(String(objectRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create & Upsert Object Records
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [idParam] To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
         * @param {string} [authorization] 
         * @param {string} [contentType] Can be text/csv or application/json
         * @param {string} [accept] Can be text/csv or application/json
         * @param {boolean} [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
         * @param {boolean} [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNamePost: async (objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNamePost', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idParam !== undefined) {
                localVarQueryParameter['idParam'] = idParam;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = typeof xVaultAPIMigrationMode === 'string'
                    ? xVaultAPIMigrationMode
                    : JSON.stringify(xVaultAPIMigrationMode);
            }
            if (xVaultAPINoTriggers != null) {
                localVarHeaderParameter['X-VaultAPI-NoTriggers'] = typeof xVaultAPINoTriggers === 'string'
                    ? xVaultAPINoTriggers
                    : JSON.stringify(xVaultAPINoTriggers);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Object Records
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [contentType] Can be text/csv or application/json
         * @param {string} [accept] Can be text/csv or application/json
         * @param {boolean} [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
         * @param {boolean} [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNamePut: async (objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNamePut', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIMigrationMode != null) {
                localVarHeaderParameter['X-VaultAPI-MigrationMode'] = typeof xVaultAPIMigrationMode === 'string'
                    ? xVaultAPIMigrationMode
                    : JSON.stringify(xVaultAPIMigrationMode);
            }
            if (xVaultAPINoTriggers != null) {
                localVarHeaderParameter['X-VaultAPI-NoTriggers'] = typeof xVaultAPINoTriggers === 'string'
                    ? xVaultAPINoTriggers
                    : JSON.stringify(xVaultAPINoTriggers);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Users & Groups from Roles on Object Records
         * @param {string} objectName The name of the object where you want to remove roles.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameRolesDelete: async (objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameRolesDelete', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/roles`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on Object Records
         * @param {string} objectName The name of the object where you want to remove roles.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameRolesPost: async (objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectName' is not null or undefined
            assertParamExists('vobjectsObjectNameRolesPost', 'objectName', objectName)
            const localVarPath = `/vobjects/{object_name}/roles`
                .replace(`{${"object_name"}}`, encodeURIComponent(String(objectName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (contentType != null) {
                localVarHeaderParameter['Content-Type'] = String(contentType);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Outbound Package Dependencies
         * @param {string} packageId The ID of the outbound_package__v record from which to retrieve dependencies.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsOutboundPackageVPackageIdDependenciesGet: async (packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageId' is not null or undefined
            assertParamExists('vobjectsOutboundPackageVPackageIdDependenciesGet', 'packageId', packageId)
            const localVarPath = `/vobjects/outbound_package__v/{package_id}/dependencies`
                .replace(`{${"package_id"}}`, encodeURIComponent(String(packageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            if (accept != null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }
            if (xVaultAPIClientID != null) {
                localVarHeaderParameter['X-VaultAPI-ClientID'] = String(xVaultAPIClientID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Retrieve API Versions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Content File
         * @param {string} componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiMdlComponentsComponentTypeAndRecordNameFilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Component Record (MDL)
         * @param {string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiMdlComponentsComponentTypeAndRecordNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Asynchronous MDL Script Results
         * @param {string} jobId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMdlExecuteAsyncJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMdlExecuteAsyncJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiMdlExecuteAsyncJobIdResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Execute MDL Script Asynchronously
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMdlExecuteAsyncPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMdlExecuteAsyncPost(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiMdlExecuteAsyncPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Execute MDL Script
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMdlExecutePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMdlExecutePost(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiMdlExecutePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload Content File
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMdlFilesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMdlFilesPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiMdlFilesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Audit Details
         * @param {string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
         * @param {string} [startDate] Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
         * @param {string} [endDate] Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
         * @param {string} [allDates] Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
         * @param {string} [formatResult] To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [objects] This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
         * @param {string} [events] This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async audittrailAuditTrailTypeGet(auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.audittrailAuditTrailTypeGet(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.audittrailAuditTrailTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Authentication Type Discovery
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authDiscoveryPost(accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authDiscoveryPost(accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authDiscoveryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary OAuth 2.0 / OpenID Connect
         * @param {string} oathOidcProfileId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authOauthSessionOathOidcProfileIdPost(oathOidcProfileId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authOauthSessionOathOidcProfileIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary User Name and Password
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authPost(contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authPost(contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.authPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Single Source Code File
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeClassNameDelete(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeClassNameDelete(className, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeClassNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Disable Vault Extension
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeClassNameDisablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeClassNameDisablePut(className, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeClassNameDisablePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Enable Vault Extension
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeClassNameEnablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeClassNameEnablePut(className, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeClassNameEnablePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Single Source Code File
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeClassNameGet(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeClassNameGet(className, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeClassNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Profiling Sessions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeProfilerGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeProfilerGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeProfilerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Profiling Session
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeProfilerPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeProfilerPost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeProfilerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary End Profiling Session
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeProfilerSessionNameActionsEndPost(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeProfilerSessionNameActionsEndPost(sessionName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeProfilerSessionNameActionsEndPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Profiling Session
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeProfilerSessionNameDelete(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeProfilerSessionNameDelete(sessionName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeProfilerSessionNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Profiling Session
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeProfilerSessionNameGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeProfilerSessionNameGet(sessionName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeProfilerSessionNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Profiling Session Results
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codeProfilerSessionNameResultsGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codeProfilerSessionNameResultsGet(sessionName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codeProfilerSessionNameResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add or Replace Single Source Code File
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codePut(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.codePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Specific Root Nodes
         * @param {string} edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.compositesTreesEdlHierarchyOrTemplateActionsListnodesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Root Nodes
         * @param {string} edlHierarchyOrTemplate 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.compositesTreesEdlHierarchyOrTemplateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve a Node\'s Children
         * @param {string} parentNodeId The ID of a parent node in the hierarchy.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.compositesTreesEdlHierarchyVParentNodeIdChildrenGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Node Order
         * @param {string} parentNodeId The ID of a parent node in the hierarchy.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.compositesTreesEdlHierarchyVParentNodeIdChildrenPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Component Record (XML/JSON)
         * @param {string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configurationComponentTypeAndRecordNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Component Record Collection
         * @param {string} componentType 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configurationComponentTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Details from a Specific Object
         * @param {string} objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationObjectNameAndObjectTypeGet(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configurationObjectNameAndObjectTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Details from All Object Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationObjecttypeGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationObjecttypeGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configurationObjecttypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Lifecycle Role Assignment Override Rules
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationRoleAssignmentRuleDelete(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationRoleAssignmentRuleDelete(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configurationRoleAssignmentRuleDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Lifecycle Role Assignment Rules (Default & Override)
         * @param {string} [lifecycleV] Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
         * @param {string} [roleV] Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
         * @param {string} [productV] Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
         * @param {string} [countryV] Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
         * @param {string} [studyV] In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
         * @param {string} [studyCountryV] In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationRoleAssignmentRuleGet(lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationRoleAssignmentRuleGet(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configurationRoleAssignmentRuleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Lifecycle Role Assignment Override Rules
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationRoleAssignmentRulePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationRoleAssignmentRulePost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configurationRoleAssignmentRulePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Lifecycle Role Assignment Rules (Default & Override)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configurationRoleAssignmentRulePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configurationRoleAssignmentRulePut(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.configurationRoleAssignmentRulePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Delegated Session
         * @param {string} [authorization] The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegationLoginPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegationLoginPost(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.delegationLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Delegations
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegationVaultsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegationVaultsGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.delegationVaultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Session Keep Alive
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keepAlivePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keepAlivePost(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.keepAlivePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Limits on Objects
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async limitsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.limitsGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.limitsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Daily API Usage
         * @param {string} [date] The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
         * @param {string} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsApiUsageGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsApiUsageGet(date, logFormat, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logsApiUsageGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Debug Logs
         * @param {string} [userId] Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
         * @param {boolean} [includeInactive] Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsCodeDebugGet(userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsCodeDebugGet(userId, includeInactive, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logsCodeDebugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Debug Log
         * @param {string} id The ID of the debug log to delete.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsCodeDebugIdActionsResetDelete(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsCodeDebugIdActionsResetDelete(id, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logsCodeDebugIdActionsResetDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset Debug Log
         * @param {string} id The ID of the debug log to delete.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsCodeDebugIdActionsResetPost(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsCodeDebugIdActionsResetPost(id, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logsCodeDebugIdActionsResetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Debug Log Files
         * @param {string} id The ID of the debug log to download.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsCodeDebugIdFilesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsCodeDebugIdFilesGet(id, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logsCodeDebugIdFilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Single Debug Log
         * @param {string} id The ID of the debug log to retrieve.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsCodeDebugIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsCodeDebugIdGet(id, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logsCodeDebugIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Debug Log
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsCodeDebugPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsCodeDebugPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logsCodeDebugPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download SDK Runtime Log
         * @param {string} [date] 
         * @param {string} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsCodeRuntimeGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsCodeRuntimeGet(date, logFormat, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.logsCodeRuntimeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import Bulk Translation File
         * @param {string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagesMessageTypeActionsImportPost(messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messagesMessageTypeActionsImportPost(messageType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.messagesMessageTypeActionsImportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Export Bulk Translation File
         * @param {string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
         * @param {string} lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async messagesMessageTypeLanguageLangActionsExportPost(messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.messagesMessageTypeLanguageLangActionsExportPost(messageType, lang, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.messagesMessageTypeLanguageLangActionsExportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Audit Metadata
         * @param {string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataAudittrailAuditTrailTypeGet(auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataAudittrailAuditTrailTypeGet(auditTrailType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataAudittrailAuditTrailTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Audit Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataAudittrailGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataAudittrailGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataAudittrailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Component Type Metadata
         * @param {string} componentType The component type name (Picklist, Docfield, Doctype, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataComponentsComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataComponentsComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataComponentsComponentTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Component Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataComponentsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataComponentsGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataComponentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Template Node Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsBindersTemplatesBindernodesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsBindersTemplatesBindernodesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsBindersTemplatesBindernodesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Template Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsBindersTemplatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Annotation Placemark Type Metadata
         * @param {string} placemarkType The name of the placemark type. For example, sticky__sys.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Annotation Reference Type Metadata
         * @param {string} referenceType 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Annotation Type Metadata
         * @param {string} annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Event SubType Metadata
         * @param {string} eventType The event type. For example, distribution__v.
         * @param {string} eventSubtype The event subtype. For example, approved_email__v.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType, eventSubtype, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Event Types and Subtypes
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsEventsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsEventsGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsEventsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Lock Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsLockGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsLockGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsLockGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Common Document Fields
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsPropertiesFindCommonPost(contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsPropertiesFindCommonPost(contentType, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsPropertiesFindCommonPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Document Fields
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsPropertiesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsPropertiesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsPropertiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Template Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsTemplatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Document Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsTypesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsTypesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Type
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsTypesTypeGet(type, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsTypesTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Type Relationships
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsTypesTypeRelationshipsGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsTypesTypeRelationshipsGet(type, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsTypesTypeRelationshipsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Classification
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} subtype The document subtype. See Retrieve Document Types.
         * @param {string} classification The document classification. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type, subtype, classification, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Subtype
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} subtype The document subtype. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type, subtype, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Group Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsGroupsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsGroupsGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Security Policy Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsSecuritypoliciesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve User Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataObjectsUsersGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataObjectsUsersGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataObjectsUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Archived Document Signature Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Signature Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Collection
         * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataVobjectsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataVobjectsGet(loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataVobjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel Raw Object Deployment
         * @param {string} objectName 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataVobjectsObjectNameActionsCanceldeploymentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Field Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectFieldName The object field name value (id, name__v, external_id__v, etc.).
         * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataVobjectsObjectNameFieldsObjectFieldNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataVobjectsObjectNameGet(objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataVobjectsObjectNameGet(objectName, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataVobjectsObjectNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Page Layouts
         * @param {string} objectName 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataVobjectsObjectNamePageLayoutsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataVobjectsObjectNamePageLayoutsGet(objectName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataVobjectsObjectNamePageLayoutsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Page Layout Metadata
         * @param {string} objectName The name of the object from which to retrieve page layout metadata.
         * @param {string} layoutName The name of the page layout from which to retrieve metadata.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName, layoutName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.metadataVobjectsObjectNamePageLayoutsLayoutNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Email Notification Histories
         * @param {string} [startDate] Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
         * @param {string} [endDate] Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
         * @param {boolean} [allDates] Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
         * @param {string} [formatResult] To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationsHistoriesGet(startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationsHistoriesGet(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.notificationsHistoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Bulk Workflow Action Details
         * @param {string} action 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectWorkflowActionsActionGet(action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectWorkflowActionsActionGet(action, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectWorkflowActionsActionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Workflow Actions on Multiple Workflows
         * @param {string} action 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectWorkflowActionsActionPost(action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectWorkflowActionsActionPost(action, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectWorkflowActionsActionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel Workflow Tasks
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectWorkflowActionsCanceltasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectWorkflowActionsCanceltasksPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectWorkflowActionsCanceltasksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel Workflows
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectWorkflowActionsCancelworkflowsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectWorkflowActionsCancelworkflowsPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectWorkflowActionsCancelworkflowsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Bulk Workflow Actions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectWorkflowActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectWorkflowActionsGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectWorkflowActionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reassign Workflow Tasks
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectWorkflowActionsReassigntasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectWorkflowActionsReassigntasksPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectWorkflowActionsReassigntasksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Replace Workflow Owner
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectWorkflowActionsReplaceworkflowownerPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectWorkflowActionsReplaceworkflowownerPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectWorkflowActionsReplaceworkflowownerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Export Results
         * @param {string} jobId The id value of the requested export job. This is returned with the export binder requests above.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersActionsExportJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersActionsExportJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersActionsExportJobIdResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Export Binder (Latest Version)
         * @param {string} binderId The binder id field value.
         * @param {boolean} [source] to include source content or not
         * @param {string} [renditiontype] to include viewable renditions
         * @param {string} [docversion] to include all major versions
         * @param {string} [attachments] to include all versions of attachments
         * @param {string} [_export] configurable filename metadata
         * @param {boolean} [docfield] to exclude document metadata csv
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdActionsExportPost(binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdActionsExportPost(binderId, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdActionsExportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Refresh Binder Auto-Filing
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdActionsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdActionsPost(binderId, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdActionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Binding Rule
         * @param {string} binderId The binder id field value.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdBindingRulePut(binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdBindingRulePut(binderId, contentType, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdBindingRulePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdDelete(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdDelete(binderId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Binder Document Binding Rule
         * @param {string} binderId The binder id field value.
         * @param {string} nodeId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdDocumentsNodeIdBindingRulePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add Document to Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdDocumentsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdDocumentsPost(binderId, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdDocumentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Document from Binder
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdDocumentsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdDocumentsSectionIdDelete(binderId, sectionId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdDocumentsSectionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Move Document in Binder
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdDocumentsSectionIdPut(binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdDocumentsSectionIdPut(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdDocumentsSectionIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [depth] To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdGet(binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdGet(binderId, depth, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdPost(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdPost(binderId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdPut(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdPut(binderId, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Users & Groups from Roles on a Single Binder
         * @param {string} binderId The id value of the binder from which to remove roles.
         * @param {string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
         * @param {string} id The id value of the user or group to remove from the role.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Binder Section Binding Rule
         * @param {string} binderId The binder id field value.
         * @param {string} nodeId The binder node id field value.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdSectionsNodeIdBindingRulePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Binder Section
         * @param {string} binderId The binder id field value.
         * @param {string} nodeId The binder node id of the section.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdSectionsNodeIdPut(binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdSectionsNodeIdPut(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdSectionsNodeIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Binder Section
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdSectionsPost(binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdSectionsPost(binderId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdSectionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Binder Section
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdSectionsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdSectionsSectionIdDelete(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdSectionsSectionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Sections
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdSectionsSectionIdGet(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdSectionsSectionIdGet(binderId, sectionId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdSectionsSectionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Binder Versions
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdVersionsGet(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdVersionsGet(binderId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdVersionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Export Binder (Specific Version)
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {boolean} [source] to include source content or not
         * @param {string} [renditiontype] to include viewable renditions
         * @param {string} [docversion] to include all major versions
         * @param {string} [attachments] to include all versions of attachments
         * @param {string} [_export] configurable filename metadata
         * @param {boolean} [docfield] to exclude document metadata csv
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdVersionsMajorVersionMinorVersionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdVersionsMajorVersionMinorVersionPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Binder Relationship
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Binder Relationship
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} relationshipId The binder relationship id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Relationship
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} relationshipId The binder relationship id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Version Section
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Binder Roles
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersIdRolesGet(id, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersIdRolesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on a Single Binder
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersIdRolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Role
         * @param {string} id The binder &#x60;id&#x60;.
         * @param {string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersIdRolesRoleNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder User Actions
         * @param {string} id The binder id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the binder.
         * @param {string} minorVersion The minor version number of the binder.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Entry Criteria
         * @param {string} id The binder id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the binder.
         * @param {string} minorVersion The minor version number of the binder.
         * @param {string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Binder User Action
         * @param {string} id The binder id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the binder.
         * @param {string} minorVersion The minor version number of the binder.
         * @param {string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve User Actions on Multiple Binders
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersLifecycleActionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Bulk Binder User Actions
         * @param {string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersLifecycleActionsUserActionNamePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Binder
         * @param {boolean} [async] When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersPost(async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersPost(async, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Template Collection
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersTemplatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Binder Template
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersTemplatesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersTemplatesPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersTemplatesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Binder Template
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersTemplatesPut(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersTemplatesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Template Node Attributes
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersTemplatesTemplateNameBindernodesGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersTemplatesTemplateNameBindernodesGet(templateName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersTemplatesTemplateNameBindernodesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Binder Template Node
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersTemplatesTemplateNameBindernodesPost(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersTemplatesTemplateNameBindernodesPost(templateName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersTemplatesTemplateNameBindernodesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Replace Binder Template Nodes
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersTemplatesTemplateNameBindernodesPut(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersTemplatesTemplateNameBindernodesPut(templateName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersTemplatesTemplateNameBindernodesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Binder Template
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersTemplatesTemplateNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Binder Template Attributes
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsBindersTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsBindersTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsBindersTemplatesTemplateNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Deleted Document IDs
         * @param {string} [startDate] Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
         * @param {string} [endDate] Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDeletionsDocumentsGet(startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDeletionsDocumentsGet(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDeletionsDocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Deleted Object Record ID
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDeletionsVobjectsObjectNameGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDeletionsVobjectsObjectNameGet(objectName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDeletionsVobjectsObjectNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Document Workflows
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsActionsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsActionsGet(loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsActionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Controlled Copy Job Results
         * @param {string} lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
         * @param {string} jobId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Workflow Details
         * @param {string} workflowName The document workflow name value.
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsActionsWorkflowNameGet(workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsActionsWorkflowNameGet(workflowName, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsActionsWorkflowNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Document Workflow
         * @param {string} workflowName The document workflow name value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsActionsWorkflowNamePost(workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsActionsWorkflowNamePost(workflowName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsActionsWorkflowNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Annotations
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsAnnotationsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsAnnotationsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsAnnotationsBatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Multiple Annotations
         * @param {string} authorization 
         * @param {string} contentType 
         * @param {string} accept 
         * @param {string} xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsAnnotationsBatchPost(authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsAnnotationsBatchPost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsAnnotationsBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Annotations
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsAnnotationsBatchPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsAnnotationsBatchPut(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsAnnotationsBatchPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add Annotation Replies
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsAnnotationsRepliesBatchPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsAnnotationsRepliesBatchPost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsAnnotationsRepliesBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Multiple Document Attachments
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsAttachmentsBatchDelete(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsAttachmentsBatchDelete(accept, authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsAttachmentsBatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Multiple Document Attachments
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsAttachmentsBatchPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsAttachmentsBatchPost(accept, authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsAttachmentsBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Multiple Document Attachment Descriptions
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsAttachmentsBatchPut(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsAttachmentsBatchPut(accept, authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsAttachmentsBatchPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Export Results
         * @param {string} jobId The id value of the requested export job. This is returned with the export document requests.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsBatchActionsFileextractJobIdResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Export Documents
         * @param {boolean} [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
         * @param {boolean} [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
         * @param {boolean} [allversions] Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsBatchActionsFileextractPost(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsBatchActionsFileextractPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reclassify Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsBatchActionsReclassifyPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsBatchActionsReclassifyPut(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsBatchActionsReclassifyPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Multiple Document Renditions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsBatchActionsRerenderPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsBatchActionsRerenderPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsBatchActionsRerenderPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Multiple Documents
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsBatchDelete(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsBatchDelete(idParam, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsBatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Undo Collaborative Authoring Checkout
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsBatchLockDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsBatchLockDelete(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsBatchLockDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsBatchPost(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsBatchPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsBatchPut(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsBatchPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Anchor IDs
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAnchorsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAnchorsGet(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAnchorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Export Document Annotations to PDF
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAnnotationsFileGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAnnotationsFileGet(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAnnotationsFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import Document Annotations from PDF
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAnnotationsFilePost(docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAnnotationsFilePost(docId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAnnotationsFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Single Document Attachment
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId, attachmentId, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsAttachmentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Document Attachment
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsAttachmentIdFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Attachment Metadata
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsAttachmentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Document Attachment Description
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsAttachmentIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Single Document Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Document Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Attachment Version Metadata
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restore Document Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {boolean} [restore] The parameter restore must be set to true. 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Attachment Versions
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download All Document Attachments
         * @param {string} docId The document id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsFileGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsFileGet(docId, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Attachments
         * @param {string} docId The document id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsGet(docId, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Document Attachment
         * @param {string} docId The document id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAttachmentsPost(docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAttachmentsPost(docId, accept, authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAttachmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Complete Audit History for a Single Document
         * @param {string} docId The document ID for which to retrieve audit history.
         * @param {string} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
         * @param {string} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
         * @param {string} [formatResult] To request a CSV file of your audit history, use csv. 
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdAudittrailGet(docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdAudittrailGet(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdAudittrailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Single Document
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdDelete(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Events
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdEventsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdEventsGet(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdEventsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Document File
         * @param {string} docId The document id field value.
         * @param {boolean} [lockDocument] Set to true to Check Out this document before retrieval. If omitted, defaults to false.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdFileGet(docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdFileGet(docId, lockDocument, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdGet(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Document Lock
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdLockDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdLockDelete(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdLockDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Lock
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdLockGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdLockGet(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdLockGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Document Lock
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdLockPost(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdLockPost(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdLockPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download All Document Version Attachments
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Single Document Version
         * @param {string} docId The document id field value.
         * @param {string} [suppressRendition] Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdPost(docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdPost(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Single Document
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdPut(docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdPut(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Renditions
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdRenditionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdRenditionsGet(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdRenditionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Single Document Rendition
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId, renditionType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdRenditionsRenditionTypeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Document Rendition File
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [steadyState] Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdRenditionsRenditionTypeGet(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdRenditionsRenditionTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add Single Document Rendition
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdRenditionsRenditionTypePost(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdRenditionsRenditionTypePost(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdRenditionsRenditionTypePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Replace Document Rendition
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdRenditionsRenditionTypePut(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdRenditionsRenditionTypePut(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdRenditionsRenditionTypePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Users & Groups from Roles on a Single Document
         * @param {string} docId The id value of the document from which to remove roles.
         * @param {string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
         * @param {string} id The id value of the user or group to remove from the role.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Version Attachments
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Versions
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsGet(docId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Annotations by ID
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Replies of Parent Annotation
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Export Document Version Annotations to PDF
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import Document Version Annotations from PDF
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Annotations by Document Version and Type
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
         * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
         * @param {string} [annotationTypes] The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
         * @param {string} [paginationId] A unique identifier used to load requests with paginated results.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Document Version Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} attachmentId The id field value of the attachment.
         * @param {string} attachmentVersion The version of the attachment.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Version Attachment Versions
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} attachmentId The id of the document attachment to retrieve.
         * @param {string} attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Single Document Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Version Notes as CSV
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Document Event
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Video Annotations
         * @param {string} docId The video document id field value.
         * @param {string} majorVersion The video document major_version_number__v field value.
         * @param {string} minorVersion The video document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Document Version File
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Document Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Relationships
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Single Document Relationship
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Single Document Relationship
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} relationshipId The relationship id field value. See Retrieve Document Relationships.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Relationship
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} relationshipId The relationship id field value. See Retrieve Document Relationships.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Version Renditions
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Document Version Rendition
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Document Version Rendition File
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload Document Version Rendition
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Replace Document Version Rendition
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Document Version Thumbnail File
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Documents
         * @param {string} [namedFilter] Retrieves only documents which you have created.
         * @param {string} [scope] Searches only within the document content.
         * @param {string} [versionscope] Retrieves all document versions, rather than only the latest version.
         * @param {string} [search] Search for documents based on a {keyword} in searchable document fields.
         * @param {string} [limit] See VQL documentation for more information.
         * @param {string} [sort] See VQL documentation for more information.
         * @param {string} [start] See VQL documentation for more information.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsGet(namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsGet(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Document Roles
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsIdRolesGet(id, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsIdRolesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on a Single Document
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsIdRolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Role
         * @param {string} id The document &#x60;id&#x60;.
         * @param {string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsIdRolesRoleNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document User Actions
         * @param {string} id The document id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the document.
         * @param {string} minorVersion The minor version number of the document.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Entry Criteria
         * @param {string} id The document id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the document.
         * @param {string} minorVersion The minor version number of the document.
         * @param {string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Document User Action
         * @param {string} id The document id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the document.
         * @param {string} minorVersion The minor version number of the document.
         * @param {string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve User Actions on Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsLifecycleActionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Bulk Document User Actions
         * @param {string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsLifecycleActionsUserActionNamePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Single Document
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsPost(authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsPost(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Multiple Document Relationships
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsRelationshipsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsRelationshipsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsRelationshipsBatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Multiple Document Relationships
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsRelationshipsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsRelationshipsBatchPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsRelationshipsBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Multiple Document Renditions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsRenditionsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsRenditionsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsRenditionsBatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add Multiple Document Renditions
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [largeSizeAsset] If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {boolean} [xVaultAPIMigrationMode] Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsRenditionsBatchPost(idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsRenditionsBatchPost(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsRenditionsBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Users and Groups from Roles on Multiple Documents & Binders
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsRolesBatchDelete(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsRolesBatchDelete(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsRolesBatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on Multiple Documents & Binders
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsRolesBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsRolesBatchPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsRolesBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Template Collection
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsTemplatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Single Document Template
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsTemplatesPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsTemplatesPost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsTemplatesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Multiple Document Templates
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsTemplatesPut(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsTemplatesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Basic Document Template
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsTemplatesTemplateNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Document Template File
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsTemplatesTemplateNameFileGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsTemplatesTemplateNameFileGet(templateName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsTemplatesTemplateNameFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Document Template Attributes
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsTemplatesTemplateNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Single Document Template
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsTemplatesTemplateNamePut(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsTemplatesTemplateNamePut(templateName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsTemplatesTemplateNamePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Document Tokens
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsTokensPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsTokensPost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsTokensPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Export Document Versions
         * @param {boolean} [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
         * @param {boolean} [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsVersionsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsVersionsBatchActionsFileextractPost(source, renditions, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsVersionsBatchActionsFileextractPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Multiple Document Versions
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsVersionsBatchDelete(idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsVersionsBatchDelete(idParam, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsVersionsBatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Multiple Document Versions
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIMigrationMode] Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDocumentsVersionsBatchPost(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDocumentsVersionsBatchPost(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDocumentsVersionsBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Domain Information
         * @param {boolean} [includeApplication] To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDomainGet(includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDomainGet(includeApplication, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDomainGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Domains
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsDomainsGet(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsDomainsGet(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsDomainsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add EDL Matched Documents
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsEdlMatchedDocumentsBatchActionsAddPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsEdlMatchedDocumentsBatchActionsAddPost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsEdlMatchedDocumentsBatchActionsAddPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove EDL Matched Documents
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsEdlMatchedDocumentsBatchActionsRemovePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Auto Managed Groups
         * @param {string} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsGroupsAutoGet(limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsGroupsAutoGet(limit, offset, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsGroupsAutoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Groups
         * @param {string} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsGroupsGet(includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsGroupsGet(includeImplied, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Group
         * @param {string} groupId The group id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsGroupsGroupIdDelete(groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsGroupsGroupIdDelete(groupId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsGroupsGroupIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Group
         * @param {string} groupId The group id field value.
         * @param {boolean} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsGroupsGroupIdGet(groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsGroupsGroupIdGet(groupId, includeImplied, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsGroupsGroupIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Group
         * @param {string} groupId The group id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsGroupsGroupIdPut(groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsGroupsGroupIdPut(groupId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsGroupsGroupIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Group 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsGroupsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsGroupsPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsGroupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Application License Usage
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsLicensesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsLicensesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsLicensesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Multi-Record Workflows
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsActionsGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsActionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Multi-Record Workflow Details
         * @param {string} workflowName 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsActionsWorkflowNameGet(workflowName: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsActionsWorkflowNameGet(workflowName, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsActionsWorkflowNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Multi-Record Workflow
         * @param {string} workflowName 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsActionsWorkflowNamePost(workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsActionsWorkflowNamePost(workflowName, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsActionsWorkflowNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Workflows
         * @param {string} [objectV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
         * @param {string} [recordIdV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
         * @param {string} [participant] To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
         * @param {string} [statusV] To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
         * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
         * @param {string} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsGet(objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsGet(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Workflow Tasks
         * @param {string} [objectV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
         * @param {string} [recordIdV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
         * @param {string} [assigneeV] To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
         * @param {string} [statusV] To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
         * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
         * @param {string} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksGet(objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksGet(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Accept Single Record Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsAcceptPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cancel Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Complete Single Record Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Workflow Task Actions
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsGet(taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsGet(taskId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Accept Multi-item Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Complete Multi-item Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Manage Multi-Item Workflow Content
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reassign Multi-item Workflow Task
         * @param {string} taskId The id of the task to reassign.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reassign Single Record Workflow Task
         * @param {string} taskId The id of the task to reassign.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsReassignPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Workflow Task Action Details
         * @param {string} taskId The task id field value.
         * @param {string} taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsTaskActionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Undo Workflow Task Acceptance
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Workflow Task Due Date
         * @param {string} taskId The id of the task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Workflow Task Details
         * @param {string} taskId The task id field value.
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsTasksTaskIdGet(taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsTasksTaskIdGet(taskId, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsTasksTaskIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Workflow Actions
         * @param {string} workflowId The workflow id field value.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsWorkflowIdActionsGet(workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsWorkflowIdActionsGet(workflowId, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsWorkflowIdActionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Workflow Action Details
         * @param {string} workflowId The workflow id field value.
         * @param {string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId, workflowAction, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Workflow Action
         * @param {string} workflowId The workflow id field value.
         * @param {string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
         * @param {string} [documentsSys] Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Workflow Details
         * @param {string} workflowId The workflow id field value.
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsObjectworkflowsWorkflowIdGet(workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsObjectworkflowsWorkflowIdGet(workflowId, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsObjectworkflowsWorkflowIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Picklists
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsPicklistsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsPicklistsGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsPicklistsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Picklist Values
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsPicklistsPicklistNameGet(picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsPicklistsPicklistNameGet(picklistName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsPicklistsPicklistNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Inactivate Picklist Value
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsPicklistsPicklistNamePicklistValueNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Picklist Value
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsPicklistsPicklistNamePicklistValueNamePut(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsPicklistsPicklistNamePicklistValueNamePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Picklist Values
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsPicklistsPicklistNamePost(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsPicklistsPicklistNamePost(picklistName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsPicklistsPicklistNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Picklist Value Label
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsPicklistsPicklistNamePut(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsPicklistsPicklistNamePut(picklistName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsPicklistsPicklistNamePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Build Production Vault
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxActionsBuildproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxActionsBuildproductionPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxActionsBuildproductionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Promote to Production
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxActionsPromoteproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxActionsPromoteproductionPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxActionsPromoteproductionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Recheck Sandbox Usage Limit
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxActionsRecheckusagePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxActionsRecheckusagePost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxActionsRecheckusagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change Sandbox Size
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxBatchChangesizePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxBatchChangesizePost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxBatchChangesizePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set Sandbox Entitlements
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxEntitlementsSetPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxEntitlementsSetPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxEntitlementsSetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Sandboxes
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Sandbox
         * @param {string} name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxNameDelete(name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxNameDelete(name, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create or Refresh Sandbox
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Sandbox Snapshot
         * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxSnapshotApiNameActionsUpdatePost(apiName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxSnapshotApiNameActionsUpdatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upgrade Sandbox Snapshot
         * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxSnapshotApiNameActionsUpgradePost(apiName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxSnapshotApiNameActionsUpgradePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Sandbox Snapshot
         * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxSnapshotApiNameDelete(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxSnapshotApiNameDelete(apiName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxSnapshotApiNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Sandbox Snapshots
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxSnapshotGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxSnapshotGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxSnapshotGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Sandbox Snapshot
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxSnapshotPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxSnapshotPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxSnapshotPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Refresh Sandbox from Snapshot
         * @param {string} vaultId The Vault ID of the sandbox to be refreshed.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxVaultIdActionsRefreshPost(vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxVaultIdActionsRefreshPost(vaultId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxVaultIdActionsRefreshPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Sandbox Details by ID
         * @param {string} vaultId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSandboxVaultIdGet(vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSandboxVaultIdGet(vaultId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSandboxVaultIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Security Policies
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSecuritypoliciesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Security Policy
         * @param {string} securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsSecuritypoliciesSecurityPolicyNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Users
         * @param {string} [vaults] Retrieve all users assigned to all Vaults in your domain.
         * @param {string} [excludeVaultMembership] Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
         * @param {string} [excludeAppLicensing] Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersGet(vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersGet(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve User
         * @param {string} id The user id field value. Use the value me to get information for the currently authenticated user.
         * @param {string} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
         * @param {string} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersIdGet(id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersIdGet(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve User Permissions
         * @param {string} id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
         * @param {string} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersIdPermissionsGet(id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersIdPermissionsGet(id, filter, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersIdPermissionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Single User
         * @param {string} id The user id field value. Use the value me to get information for the currently authenticated user.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersIdPut(id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersIdPut(id, authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validate Session User
         * @param {string} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
         * @param {string} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersMeGet(excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersMeGet(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change My Password
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersMePasswordPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersMePasswordPost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersMePasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve My User Permissions
         * @param {string} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersMePermissionsGet(filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersMePermissionsGet(filter, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersMePermissionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update My User
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersMePut(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersMePut(authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersMePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Single User
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Multiple Users
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersPut(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Disable User
         * @param {string} userId The user id field value. 
         * @param {boolean} [domain] When true, this disables the user account in all vaults in the domain.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersUserIdDelete(userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersUserIdDelete(userId, domain, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Vault Membership
         * @param {string} userId The user id field value.
         * @param {string} vaultId The system-managed id field value assigned to each vault in the domain.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsUsersUserIdVaultMembershipVaultIdPut(userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsUsersUserIdVaultMembershipVaultIdPut(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsUsersUserIdVaultMembershipVaultIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Vault Compare
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsVaultActionsComparePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsVaultActionsComparePost(authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsVaultActionsComparePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Vault Configuration Report
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async objectsVaultActionsConfigreportPost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.objectsVaultActionsConfigreportPost(authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.objectsVaultActionsConfigreportPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Component Definition Query
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryComponentsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryComponentsPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryComponentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Next Page URL
         * @param {string} nextPage 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIDescribeQuery] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryNextPagePost(nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryNextPagePost(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryNextPagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Submitting a Query
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIDescribeQuery] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryPost(authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryPost(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Previous Page URL
         * @param {string} previousPage 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIDescribeQuery] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryPreviousPagePost(previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryPreviousPagePost(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.queryPreviousPagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Current User with SCIM
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2MeGet(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2MeGet(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2MeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Current User with SCIM
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2MePut(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2MePut(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2MePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All SCIM Resource Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2ResourceTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2ResourceTypesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2ResourceTypesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Single SCIM Resource Type
         * @param {string} type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2ResourceTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2ResourceTypesTypeGet(type, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2ResourceTypesTypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All SCIM Schema Information
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2SchemasGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2SchemasGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2SchemasGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Single SCIM Schema Information
         * @param {string} id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2SchemasIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2SchemasIdGet(id, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2SchemasIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve SCIM Provider
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2ServiceProviderConfigGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2ServiceProviderConfigGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2ServiceProviderConfigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve SCIM Resources
         * @param {string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
         * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
         * @param {string} [sortOrder] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
         * @param {string} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2TypeGet(type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2TypeGet(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2TypeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Single SCIM Resource
         * @param {string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
         * @param {string} id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2TypeIdGet(type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2TypeIdGet(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2TypeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Users with SCIM
         * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
         * @param {string} [sortOrder] Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
         * @param {string} [count] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
         * @param {string} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2UsersGet(filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2UsersGet(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2UsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Single User with SCIM
         * @param {string} id The id of the user you wish to update.
         * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2UsersIdGet(id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2UsersIdGet(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2UsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update User with SCIM
         * @param {string} id The id of the user you wish to update.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2UsersIdPut(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2UsersIdPut(id, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2UsersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create User with SCIM
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scimV2UsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scimV2UsersPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.scimV2UsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Signing Certificate
         * @param {string} certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesCertificateCertIdGet(certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesCertificateCertIdGet(certId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesCertificateCertIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Disable Configuration Mode
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesConfigurationModeActionsDisablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesConfigurationModeActionsDisablePost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesConfigurationModeActionsDisablePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Enable Configuration Mode
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesConfigurationModeActionsEnablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesConfigurationModeActionsEnablePost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesConfigurationModeActionsEnablePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Available Direct Data Files
         * @param {string} [extractType] The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
         * @param {number} [startTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
         * @param {number} [stopTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesDirectdataFilesGet(extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesDirectdataFilesGet(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesDirectdataFilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Direct Data File
         * @param {string} name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesDirectdataFilesNameGet(name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesDirectdataFilesNameGet(name, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesDirectdataFilesNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Item Content
         * @param {string} item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [range] Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingItemsContentItemGet(item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingItemsContentItemGet(item, authorization, accept, range, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingItemsContentItemGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete File or Folder
         * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [recursive] Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingItemsItemDelete(item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingItemsItemDelete(item, recursive, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingItemsItemDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Items at a Path
         * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [recursive] If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
         * @param {string} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
         * @param {string} [formatResult] If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingItemsItemGet(item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingItemsItemGet(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingItemsItemGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Folder or File
         * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingItemsItemPut(item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingItemsItemPut(item, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingItemsItemPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Folder or File
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentMD5] Optional: The MD5 checksum of the file being uploaded.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingItemsPost(authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingItemsPost(authorization, accept, contentMD5, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Upload Sessions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingUploadGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingUploadGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingUploadGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Resumable Upload Session
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingUploadPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingUploadPost(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Abort Upload Session
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingUploadUploadSessionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Upload Session Details
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingUploadUploadSessionIdGet(uploadSessionId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingUploadUploadSessionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List File Parts Uploaded to Session
         * @param {string} uploadSessionId 
         * @param {string} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId, limit, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingUploadUploadSessionIdPartsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Commit Upload Session
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingUploadUploadSessionIdPost(uploadSessionId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingUploadUploadSessionIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Upload to a Session
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIFilePartNumber] The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
         * @param {string} [contentMD5] Optional: The MD5 checksum of the file part being uploaded.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesFileStagingUploadUploadSessionIdPut(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesFileStagingUploadUploadSessionIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Job Histories
         * @param {string} [startDate] Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
         * @param {string} [endDate] Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
         * @param {string} [status] Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesJobsHistoriesGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesJobsHistoriesGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesJobsHistoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Import Bulk Translation File Job Errors
         * @param {string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesJobsJobIdErrorsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesJobsJobIdErrorsGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesJobsJobIdErrorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Job Status
         * @param {string} jobId The ID of the job, returned from the original job request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesJobsJobIdGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesJobsJobIdGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesJobsJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Import Bulk Translation File Job Summary
         * @param {string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesJobsJobIdSummaryGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesJobsJobIdSummaryGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesJobsJobIdSummaryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve SDK Job Tasks
         * @param {string} jobId The ID of the SDK job, returned from the original job request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesJobsJobIdTasksGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesJobsJobIdTasksGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesJobsJobIdTasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Job Monitors
         * @param {string} [startDate] Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
         * @param {string} [endDate] Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
         * @param {string} [status] Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
         * @param {string} [limit] Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesJobsMonitorsGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesJobsMonitorsGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesJobsMonitorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Start Job
         * @param {string} jobId The ID of the scheduled job instance to start.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesJobsStartNowJobIdPost(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesJobsStartNowJobIdPost(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesJobsStartNowJobIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Extract Data Files
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesLoaderExtractPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesLoaderExtractPost(authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesLoaderExtractPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Load Failure Log Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesLoaderJobIdTasksTaskIdFailurelogGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Loader Extract Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesLoaderJobIdTasksTaskIdResultsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesLoaderJobIdTasksTaskIdResultsGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesLoaderJobIdTasksTaskIdResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Loader Extract Renditions Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesLoaderJobIdTasksTaskIdResultsRenditionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Load Success Log Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesLoaderJobIdTasksTaskIdSuccesslogGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Load Data Objects
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesLoaderLoadPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesLoaderLoadPost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesLoaderLoadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validate Package
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesPackageActionsValidatePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesPackageActionsValidatePost(authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesPackageActionsValidatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Export Package
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesPackagePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesPackagePost(authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesPackagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Import Package
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesPackagePut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesPackagePut(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesPackagePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Queues
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesQueuesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesQueuesGet(authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesQueuesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Disable Delivery
         * @param {string} queueName The name of a specific Queue.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesQueuesQueueNameActionsDisableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesQueuesQueueNameActionsDisableDeliveryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Enable Delivery
         * @param {string} queueName The name of a specific Queue.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesQueuesQueueNameActionsEnableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesQueuesQueueNameActionsEnableDeliveryPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Reset Queue
         * @param {string} queueName The name of a specific Queue.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesQueuesQueueNameActionsResetPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesQueuesQueueNameActionsResetPut(queueName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesQueuesQueueNameActionsResetPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Queue Status
         * @param {string} queueName The name of a specific queue. For example, queue__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesQueuesQueueNameGet(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesQueuesQueueNameGet(queueName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesQueuesQueueNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Validate Imported Package
         * @param {string} packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesVobjectVaultPackageVPackageIdActionsValidatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary End Session
         * @param {string} [accept] 
         * @param {string} [authorization] The Vault sessionId to end.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionDelete(accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionDelete(accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sessionDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Single Client Code Distribution
         * @param {string} distributionName The name attribute of the client code distribution to download.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uicodeDistributionsDistributionNameCodeGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uicodeDistributionsDistributionNameCodeGet(distributionName, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uicodeDistributionsDistributionNameCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Single Client Code Distribution
         * @param {string} distributionName The name attribute of the client code distribution to delete.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uicodeDistributionsDistributionNameDelete(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uicodeDistributionsDistributionNameDelete(distributionName, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uicodeDistributionsDistributionNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Single Client Code Distribution Metadata
         * @param {string} distributionName The name attribute of the client code distribution to delete.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uicodeDistributionsDistributionNameGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uicodeDistributionsDistributionNameGet(distributionName, accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uicodeDistributionsDistributionNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve All Client Code Distribution Metadata
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uicodeDistributionsGet(accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uicodeDistributionsGet(accept, authorization, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uicodeDistributionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add or Replace Single Client Code Distribution
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uicodeDistributionsPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uicodeDistributionsPost(accept, authorization, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.uicodeDistributionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deploy Package
         * @param {string} packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectVaultPackageVPackageIdActionsDeployPost(packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectVaultPackageVPackageIdActionsDeployPost(packageId, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectVaultPackageVPackageIdActionsDeployPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Package Deploy Results
         * @param {string} packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectVaultPackageVPackageIdActionsDeployResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Results of Cascade Delete Job
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} jobStatus 
         * @param {string} jobId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Results of Deep Copy Job
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} jobStatus The ID of the job, retrieved from the response of the job request.
         * @param {string} jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a Placeholder from an EDL Item
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsEdlItemVActionsCreateplaceholderPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsEdlItemVActionsCreateplaceholderPost(authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsEdlItemVActionsCreateplaceholderPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Merge Records Job Log
         * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsMergesJobIdLogGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsMergesJobIdLogGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsMergesJobIdLogGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Record Merge Results
         * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsMergesJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsMergesJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsMergesJobIdResultsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Record Merge Status
         * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsMergesJobIdStatusGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsMergesJobIdStatusGet(jobId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsMergesJobIdStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Object Action on Multiple Records
         * @param {string} objectName The object name__v field value.
         * @param {string} actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameActionsActionNamePost(objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameActionsActionNamePost(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameActionsActionNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Change Object Type
         * @param {string} objectName The name of the object.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameActionsChangetypePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameActionsChangetypePost(objectName, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameActionsChangetypePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Record Merge
         * @param {string} objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {Array<VobjectsObjectNameActionsMergePostRequestInner>} [vobjectsObjectNameActionsMergePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameActionsMergePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameActionsMergePost(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameActionsMergePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Roll-up Field Recalculation Status
         * @param {string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameActionsRecalculaterollupsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameActionsRecalculaterollupsGet(objectName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameActionsRecalculaterollupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Recalculate Roll-up Fields
         * @param {string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameActionsRecalculaterollupsPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameActionsRecalculaterollupsPost(objectName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameActionsRecalculaterollupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Corporate Currency Fields
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameActionsUpdatecorporatecurrencyPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Multiple Object Record Attachments
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [idParam] 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameAttachmentsBatchDelete(objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameAttachmentsBatchDelete(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameAttachmentsBatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Multiple Object Record Attachments
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameAttachmentsBatchPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameAttachmentsBatchPost(objectName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameAttachmentsBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Multiple Object Record Attachment Descriptions
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameAttachmentsBatchPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameAttachmentsBatchPut(objectName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameAttachmentsBatchPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Object Records
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [contentType] Can be text/csv or application/json
         * @param {string} [accept] Can be text/csv or application/json
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameDelete(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameDelete(objectName, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Record Roles
         * @param {string} objectName The object name.
         * @param {string} id The id of the document, binder, or object record.
         * @param {string} roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameIdRolesRoleNameGet(objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameIdRolesRoleNameGet(objectName, id, roleName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameIdRolesRoleNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object User Actions Details
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
         * @param {string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdActionsActionNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Initiate Object Action on a Single Record
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
         * @param {string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdActionsActionNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Cascade Delete Object Record
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdActionsCascadedeletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Deep Copy Object Record
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdActionsDeepcopyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Record User Actions
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value.
         * @param {boolean} [loc] Optional: When true, retrieves localized (translated) strings for the label. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdActionsGet(objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdActionsGet(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdActionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Attachment Field File
         * @param {string} objectName The object name__v field value. For example, product__v.
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentFieldName The name of the Attachment field to update.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Attachment Field File
         * @param {string} objectName The object name__v field value. For example, product__v.
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentFieldName The name of the Attachment field to update.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download All Attachment Field Files
         * @param {string} objectName The object name__v field value. For example, product__v.
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Object Record Attachment
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Record Attachment Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Object Record Attachment Description
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Object Record Attachment Version
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Object Record Attachment File
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Record Attachment Version Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Restore Object Record Attachment Version
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {boolean} [restore] 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Record Attachment Versions
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download All Object Record Attachment Files
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsFileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Record Attachments
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Object Record Attachment
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAttachmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Complete Audit History for a Single Object Record
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
         * @param {string} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
         * @param {string} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
         * @param {string} [formatResult] To request a CSV file of your audit history, use csv. 
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdAudittrailGet(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdAudittrailGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Object Record
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameObjectRecordIdGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameObjectRecordIdGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameObjectRecordIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create & Upsert Object Records
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [idParam] To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
         * @param {string} [authorization] 
         * @param {string} [contentType] Can be text/csv or application/json
         * @param {string} [accept] Can be text/csv or application/json
         * @param {boolean} [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
         * @param {boolean} [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNamePost(objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNamePost(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Object Records
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [contentType] Can be text/csv or application/json
         * @param {string} [accept] Can be text/csv or application/json
         * @param {boolean} [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
         * @param {boolean} [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNamePut(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNamePut(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNamePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Remove Users & Groups from Roles on Object Records
         * @param {string} objectName The name of the object where you want to remove roles.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameRolesDelete(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameRolesDelete(objectName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameRolesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on Object Records
         * @param {string} objectName The name of the object where you want to remove roles.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsObjectNameRolesPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsObjectNameRolesPost(objectName, authorization, accept, contentType, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsObjectNameRolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve Outbound Package Dependencies
         * @param {string} packageId The ID of the outbound_package__v record from which to retrieve dependencies.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vobjectsOutboundPackageVPackageIdDependenciesGet(packageId, authorization, accept, xVaultAPIClientID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.vobjectsOutboundPackageVPackageIdDependenciesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Retrieve API Versions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Content File
         * @param {string} componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Component Record (MDL)
         * @param {string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Asynchronous MDL Script Results
         * @param {string} jobId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlExecuteAsyncJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMdlExecuteAsyncJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute MDL Script Asynchronously
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlExecuteAsyncPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMdlExecuteAsyncPost(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Execute MDL Script
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlExecutePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMdlExecutePost(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Content File
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMdlFilesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMdlFilesPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Audit Details
         * @param {string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
         * @param {string} [startDate] Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
         * @param {string} [endDate] Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
         * @param {string} [allDates] Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
         * @param {string} [formatResult] To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [objects] This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
         * @param {string} [events] This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        audittrailAuditTrailTypeGet(auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.audittrailAuditTrailTypeGet(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Authentication Type Discovery
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDiscoveryPost(accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authDiscoveryPost(accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary OAuth 2.0 / OpenID Connect
         * @param {string} oathOidcProfileId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authOauthSessionOathOidcProfileIdPost(oathOidcProfileId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary User Name and Password
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authPost(contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authPost(contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Single Source Code File
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeClassNameDelete(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeClassNameDelete(className, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable Vault Extension
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeClassNameDisablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeClassNameDisablePut(className, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable Vault Extension
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeClassNameEnablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeClassNameEnablePut(className, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Single Source Code File
         * @param {string} className The fully qualified class name of your file.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeClassNameGet(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeClassNameGet(className, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Profiling Sessions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeProfilerGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Profiling Session
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeProfilerPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary End Profiling Session
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerSessionNameActionsEndPost(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeProfilerSessionNameActionsEndPost(sessionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Profiling Session
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerSessionNameDelete(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeProfilerSessionNameDelete(sessionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Profiling Session
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerSessionNameGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeProfilerSessionNameGet(sessionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Profiling Session Results
         * @param {string} sessionName The name of the session, for example,  baseline__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codeProfilerSessionNameResultsGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codeProfilerSessionNameResultsGet(sessionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add or Replace Single Source Code File
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.codePut(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Specific Root Nodes
         * @param {string} edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Root Nodes
         * @param {string} edlHierarchyOrTemplate 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve a Node\'s Children
         * @param {string} parentNodeId The ID of a parent node in the hierarchy.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Node Order
         * @param {string} parentNodeId The ID of a parent node in the hierarchy.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Component Record (XML/JSON)
         * @param {string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Component Record Collection
         * @param {string} componentType 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configurationComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Details from a Specific Object
         * @param {string} objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configurationObjectNameAndObjectTypeGet(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Details from All Object Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationObjecttypeGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configurationObjecttypeGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Lifecycle Role Assignment Override Rules
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRoleAssignmentRuleDelete(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configurationRoleAssignmentRuleDelete(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Lifecycle Role Assignment Rules (Default & Override)
         * @param {string} [lifecycleV] Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
         * @param {string} [roleV] Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
         * @param {string} [productV] Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
         * @param {string} [countryV] Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
         * @param {string} [studyV] In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
         * @param {string} [studyCountryV] In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRoleAssignmentRuleGet(lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configurationRoleAssignmentRuleGet(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Lifecycle Role Assignment Override Rules
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRoleAssignmentRulePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configurationRoleAssignmentRulePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Lifecycle Role Assignment Rules (Default & Override)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configurationRoleAssignmentRulePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.configurationRoleAssignmentRulePut(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Delegated Session
         * @param {string} [authorization] The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationLoginPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delegationLoginPost(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Delegations
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationVaultsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delegationVaultsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Session Keep Alive
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keepAlivePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.keepAlivePost(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Limits on Objects
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.limitsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Daily API Usage
         * @param {string} [date] The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
         * @param {string} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsApiUsageGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsApiUsageGet(date, logFormat, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Debug Logs
         * @param {string} [userId] Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
         * @param {boolean} [includeInactive] Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugGet(userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsCodeDebugGet(userId, includeInactive, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Debug Log
         * @param {string} id The ID of the debug log to delete.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugIdActionsResetDelete(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsCodeDebugIdActionsResetDelete(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset Debug Log
         * @param {string} id The ID of the debug log to delete.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugIdActionsResetPost(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsCodeDebugIdActionsResetPost(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Debug Log Files
         * @param {string} id The ID of the debug log to download.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugIdFilesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsCodeDebugIdFilesGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Single Debug Log
         * @param {string} id The ID of the debug log to retrieve.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsCodeDebugIdGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Debug Log
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeDebugPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsCodeDebugPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download SDK Runtime Log
         * @param {string} [date] 
         * @param {string} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsCodeRuntimeGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsCodeRuntimeGet(date, logFormat, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import Bulk Translation File
         * @param {string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageTypeActionsImportPost(messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.messagesMessageTypeActionsImportPost(messageType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export Bulk Translation File
         * @param {string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
         * @param {string} lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageTypeLanguageLangActionsExportPost(messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.messagesMessageTypeLanguageLangActionsExportPost(messageType, lang, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Audit Metadata
         * @param {string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataAudittrailAuditTrailTypeGet(auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataAudittrailAuditTrailTypeGet(auditTrailType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Audit Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataAudittrailGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataAudittrailGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Component Type Metadata
         * @param {string} componentType The component type name (Picklist, Docfield, Doctype, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataComponentsComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataComponentsComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Component Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataComponentsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataComponentsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Template Node Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsBindersTemplatesBindernodesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsBindersTemplatesBindernodesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Template Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Annotation Placemark Type Metadata
         * @param {string} placemarkType The name of the placemark type. For example, sticky__sys.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Annotation Reference Type Metadata
         * @param {string} referenceType 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Annotation Type Metadata
         * @param {string} annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Event SubType Metadata
         * @param {string} eventType The event type. For example, distribution__v.
         * @param {string} eventSubtype The event subtype. For example, approved_email__v.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType, eventSubtype, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Event Types and Subtypes
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsEventsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsEventsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Lock Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsLockGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsLockGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Common Document Fields
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsPropertiesFindCommonPost(contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsPropertiesFindCommonPost(contentType, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Document Fields
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsPropertiesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsPropertiesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Template Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Document Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsTypesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Type
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsTypesTypeGet(type, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Type Relationships
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesTypeRelationshipsGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsTypesTypeRelationshipsGet(type, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Classification
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} subtype The document subtype. See Retrieve Document Types.
         * @param {string} classification The document classification. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type, subtype, classification, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Subtype
         * @param {string} type The document type. See Retrieve Document Types.
         * @param {string} subtype The document subtype. See Retrieve Document Types.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type, subtype, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Group Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsGroupsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsGroupsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Security Policy Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve User Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataObjectsUsersGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataObjectsUsersGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Archived Document Signature Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Signature Metadata
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Collection
         * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataVobjectsGet(loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Raw Object Deployment
         * @param {string} objectName 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Field Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectFieldName The object field name value (id, name__v, external_id__v, etc.).
         * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNameGet(objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataVobjectsObjectNameGet(objectName, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Page Layouts
         * @param {string} objectName 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNamePageLayoutsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataVobjectsObjectNamePageLayoutsGet(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Page Layout Metadata
         * @param {string} objectName The name of the object from which to retrieve page layout metadata.
         * @param {string} layoutName The name of the page layout from which to retrieve metadata.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName, layoutName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Email Notification Histories
         * @param {string} [startDate] Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
         * @param {string} [endDate] Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
         * @param {boolean} [allDates] Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
         * @param {string} [formatResult] To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationsHistoriesGet(startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.notificationsHistoriesGet(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Bulk Workflow Action Details
         * @param {string} action 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsActionGet(action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectWorkflowActionsActionGet(action, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Workflow Actions on Multiple Workflows
         * @param {string} action 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsActionPost(action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectWorkflowActionsActionPost(action, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Workflow Tasks
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsCanceltasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectWorkflowActionsCanceltasksPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Workflows
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsCancelworkflowsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectWorkflowActionsCancelworkflowsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Bulk Workflow Actions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectWorkflowActionsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reassign Workflow Tasks
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsReassigntasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectWorkflowActionsReassigntasksPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Replace Workflow Owner
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectWorkflowActionsReplaceworkflowownerPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectWorkflowActionsReplaceworkflowownerPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Export Results
         * @param {string} jobId The id value of the requested export job. This is returned with the export binder requests above.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersActionsExportJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersActionsExportJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export Binder (Latest Version)
         * @param {string} binderId The binder id field value.
         * @param {boolean} [source] to include source content or not
         * @param {string} [renditiontype] to include viewable renditions
         * @param {string} [docversion] to include all major versions
         * @param {string} [attachments] to include all versions of attachments
         * @param {string} [_export] configurable filename metadata
         * @param {boolean} [docfield] to exclude document metadata csv
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdActionsExportPost(binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdActionsExportPost(binderId, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Binder Auto-Filing
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdActionsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdActionsPost(binderId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Binding Rule
         * @param {string} binderId The binder id field value.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdBindingRulePut(binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdBindingRulePut(binderId, contentType, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDelete(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdDelete(binderId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Binder Document Binding Rule
         * @param {string} binderId The binder id field value.
         * @param {string} nodeId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Document to Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDocumentsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdDocumentsPost(binderId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Document from Binder
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDocumentsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdDocumentsSectionIdDelete(binderId, sectionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Move Document in Binder
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdDocumentsSectionIdPut(binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdDocumentsSectionIdPut(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [depth] To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdGet(binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdGet(binderId, depth, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdPost(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdPost(binderId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Binder
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdPut(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdPut(binderId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Users & Groups from Roles on a Single Binder
         * @param {string} binderId The id value of the binder from which to remove roles.
         * @param {string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
         * @param {string} id The id value of the user or group to remove from the role.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Binder Section Binding Rule
         * @param {string} binderId The binder id field value.
         * @param {string} nodeId The binder node id field value.
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Binder Section
         * @param {string} binderId The binder id field value.
         * @param {string} nodeId The binder node id of the section.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsNodeIdPut(binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdSectionsNodeIdPut(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Binder Section
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsPost(binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdSectionsPost(binderId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Binder Section
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdSectionsSectionIdDelete(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Sections
         * @param {string} binderId The binder id field value.
         * @param {string} sectionId The binder node id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdSectionsSectionIdGet(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdSectionsSectionIdGet(binderId, sectionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Binder Versions
         * @param {string} binderId The binder id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsGet(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdVersionsGet(binderId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export Binder (Specific Version)
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {boolean} [source] to include source content or not
         * @param {string} [renditiontype] to include viewable renditions
         * @param {string} [docversion] to include all major versions
         * @param {string} [attachments] to include all versions of attachments
         * @param {string} [_export] configurable filename metadata
         * @param {boolean} [docfield] to exclude document metadata csv
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Binder Version
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Binder Relationship
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Binder Relationship
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} relationshipId The binder relationship id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Relationship
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} relationshipId The binder relationship id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Version Section
         * @param {string} binderId The binder id field value.
         * @param {string} majorVersion The binder major_version_number__v field value.
         * @param {string} minorVersion The binder minor_version_number__v field value.
         * @param {string} sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Binder Roles
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersIdRolesGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on a Single Binder
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Role
         * @param {string} id The binder &#x60;id&#x60;.
         * @param {string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder User Actions
         * @param {string} id The binder id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the binder.
         * @param {string} minorVersion The minor version number of the binder.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Entry Criteria
         * @param {string} id The binder id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the binder.
         * @param {string} minorVersion The minor version number of the binder.
         * @param {string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Binder User Action
         * @param {string} id The binder id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the binder.
         * @param {string} minorVersion The minor version number of the binder.
         * @param {string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve User Actions on Multiple Binders
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Bulk Binder User Actions
         * @param {string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Binder
         * @param {boolean} [async] When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersPost(async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersPost(async, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Template Collection
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Binder Template
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersTemplatesPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Binder Template
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersTemplatesPut(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Template Node Attributes
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameBindernodesGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersTemplatesTemplateNameBindernodesGet(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Binder Template Node
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameBindernodesPost(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersTemplatesTemplateNameBindernodesPost(templateName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Replace Binder Template Nodes
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameBindernodesPut(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersTemplatesTemplateNameBindernodesPut(templateName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Binder Template
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Binder Template Attributes
         * @param {string} templateName The binder template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsBindersTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsBindersTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Deleted Document IDs
         * @param {string} [startDate] Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
         * @param {string} [endDate] Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDeletionsDocumentsGet(startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDeletionsDocumentsGet(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Deleted Object Record ID
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDeletionsVobjectsObjectNameGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDeletionsVobjectsObjectNameGet(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Document Workflows
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsActionsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsActionsGet(loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Controlled Copy Job Results
         * @param {string} lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
         * @param {string} jobId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Workflow Details
         * @param {string} workflowName The document workflow name value.
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsActionsWorkflowNameGet(workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsActionsWorkflowNameGet(workflowName, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Document Workflow
         * @param {string} workflowName The document workflow name value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsActionsWorkflowNamePost(workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsActionsWorkflowNamePost(workflowName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Annotations
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAnnotationsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsAnnotationsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Multiple Annotations
         * @param {string} authorization 
         * @param {string} contentType 
         * @param {string} accept 
         * @param {string} xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAnnotationsBatchPost(authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsAnnotationsBatchPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Annotations
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAnnotationsBatchPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsAnnotationsBatchPut(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Annotation Replies
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAnnotationsRepliesBatchPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsAnnotationsRepliesBatchPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Multiple Document Attachments
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAttachmentsBatchDelete(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsAttachmentsBatchDelete(accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Multiple Document Attachments
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAttachmentsBatchPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsAttachmentsBatchPost(accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Multiple Document Attachment Descriptions
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsAttachmentsBatchPut(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsAttachmentsBatchPut(accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Export Results
         * @param {string} jobId The id value of the requested export job. This is returned with the export document requests.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export Documents
         * @param {boolean} [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
         * @param {boolean} [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
         * @param {boolean} [allversions] Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsBatchActionsFileextractPost(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reclassify Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchActionsReclassifyPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsBatchActionsReclassifyPut(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Multiple Document Renditions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchActionsRerenderPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsBatchActionsRerenderPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Multiple Documents
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchDelete(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsBatchDelete(idParam, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Undo Collaborative Authoring Checkout
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchLockDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsBatchLockDelete(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsBatchPost(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsBatchPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsBatchPut(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Anchor IDs
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAnchorsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAnchorsGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export Document Annotations to PDF
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAnnotationsFileGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAnnotationsFileGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import Document Annotations from PDF
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAnnotationsFilePost(docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAnnotationsFilePost(docId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Single Document Attachment
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId, attachmentId, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Document Attachment
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Attachment Metadata
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Document Attachment Description
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Single Document Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Document Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Attachment Version Metadata
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore Document Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {boolean} [restore] The parameter restore must be set to true. 
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Attachment Versions
         * @param {string} docId The document id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download All Document Attachments
         * @param {string} docId The document id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsFileGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsFileGet(docId, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Attachments
         * @param {string} docId The document id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsGet(docId, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Document Attachment
         * @param {string} docId The document id field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAttachmentsPost(docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAttachmentsPost(docId, accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Complete Audit History for a Single Document
         * @param {string} docId The document ID for which to retrieve audit history.
         * @param {string} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
         * @param {string} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
         * @param {string} [formatResult] To request a CSV file of your audit history, use csv. 
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdAudittrailGet(docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdAudittrailGet(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Single Document
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdDelete(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Events
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdEventsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdEventsGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Document File
         * @param {string} docId The document id field value.
         * @param {boolean} [lockDocument] Set to true to Check Out this document before retrieval. If omitted, defaults to false.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdFileGet(docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdFileGet(docId, lockDocument, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Document Lock
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdLockDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdLockDelete(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Lock
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdLockGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdLockGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Document Lock
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdLockPost(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdLockPost(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download All Document Version Attachments
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Single Document Version
         * @param {string} docId The document id field value.
         * @param {string} [suppressRendition] Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdPost(docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdPost(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Single Document
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdPut(docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdPut(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Renditions
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdRenditionsGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Single Document Rendition
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId, renditionType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Document Rendition File
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [steadyState] Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdRenditionsRenditionTypeGet(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Single Document Rendition
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsRenditionTypePost(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdRenditionsRenditionTypePost(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Replace Document Rendition
         * @param {string} docId The document id field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRenditionsRenditionTypePut(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdRenditionsRenditionTypePut(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Users & Groups from Roles on a Single Document
         * @param {string} docId The id value of the document from which to remove roles.
         * @param {string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
         * @param {string} id The id value of the user or group to remove from the role.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Version Attachments
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Versions
         * @param {string} docId The document id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Annotations by ID
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Replies of Parent Annotation
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export Document Version Annotations to PDF
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import Document Version Annotations from PDF
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Annotations by Document Version and Type
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
         * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
         * @param {string} [annotationTypes] The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
         * @param {string} [paginationId] A unique identifier used to load requests with paginated results.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Document Version Attachment Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} attachmentId The id field value of the attachment.
         * @param {string} attachmentVersion The version of the attachment.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Version Attachment Versions
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} attachmentId The id of the document attachment to retrieve.
         * @param {string} attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Single Document Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Version Notes as CSV
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Document Event
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Video Annotations
         * @param {string} docId The video document id field value.
         * @param {string} majorVersion The video document major_version_number__v field value.
         * @param {string} minorVersion The video document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Document Version File
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Document Version
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Relationships
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Single Document Relationship
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Single Document Relationship
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} relationshipId The relationship id field value. See Retrieve Document Relationships.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Relationship
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} relationshipId The relationship id field value. See Retrieve Document Relationships.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Version Renditions
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Document Version Rendition
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Document Version Rendition File
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload Document Version Rendition
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Replace Document Version Rendition
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} renditionType The document rendition type.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Document Version Thumbnail File
         * @param {string} docId The document id field value.
         * @param {string} majorVersion The document major_version_number__v field value.
         * @param {string} minorVersion The document minor_version_number__v field value.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Documents
         * @param {string} [namedFilter] Retrieves only documents which you have created.
         * @param {string} [scope] Searches only within the document content.
         * @param {string} [versionscope] Retrieves all document versions, rather than only the latest version.
         * @param {string} [search] Search for documents based on a {keyword} in searchable document fields.
         * @param {string} [limit] See VQL documentation for more information.
         * @param {string} [sort] See VQL documentation for more information.
         * @param {string} [start] See VQL documentation for more information.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsGet(namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsGet(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Document Roles
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsIdRolesGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on a Single Document
         * @param {string} id 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Role
         * @param {string} id The document &#x60;id&#x60;.
         * @param {string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document User Actions
         * @param {string} id The document id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the document.
         * @param {string} minorVersion The minor version number of the document.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Entry Criteria
         * @param {string} id The document id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the document.
         * @param {string} minorVersion The minor version number of the document.
         * @param {string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Document User Action
         * @param {string} id The document id field value from which to retrieve available user actions.
         * @param {string} majorVersion The major version number of the document.
         * @param {string} minorVersion The minor version number of the document.
         * @param {string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve User Actions on Multiple Documents
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Bulk Document User Actions
         * @param {string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Single Document
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIMigrationMode] When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsPost(authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsPost(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Multiple Document Relationships
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRelationshipsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsRelationshipsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Multiple Document Relationships
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRelationshipsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsRelationshipsBatchPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Multiple Document Renditions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRenditionsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsRenditionsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Multiple Document Renditions
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [largeSizeAsset] If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {boolean} [xVaultAPIMigrationMode] Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRenditionsBatchPost(idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsRenditionsBatchPost(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Users and Groups from Roles on Multiple Documents & Binders
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRolesBatchDelete(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsRolesBatchDelete(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on Multiple Documents & Binders
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsRolesBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsRolesBatchPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Template Collection
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Single Document Template
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsTemplatesPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Multiple Document Templates
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsTemplatesPut(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Basic Document Template
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Document Template File
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesTemplateNameFileGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsTemplatesTemplateNameFileGet(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Document Template Attributes
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Single Document Template
         * @param {string} templateName The document template name__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTemplatesTemplateNamePut(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsTemplatesTemplateNamePut(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Document Tokens
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsTokensPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsTokensPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export Document Versions
         * @param {boolean} [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
         * @param {boolean} [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsVersionsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsVersionsBatchActionsFileextractPost(source, renditions, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Multiple Document Versions
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsVersionsBatchDelete(idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsVersionsBatchDelete(idParam, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Multiple Document Versions
         * @param {string} [idParam] If you’re identifying documents in your input by their external ID
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIMigrationMode] Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDocumentsVersionsBatchPost(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDocumentsVersionsBatchPost(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Domain Information
         * @param {boolean} [includeApplication] To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDomainGet(includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDomainGet(includeApplication, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Domains
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsDomainsGet(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsDomainsGet(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add EDL Matched Documents
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsEdlMatchedDocumentsBatchActionsAddPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsEdlMatchedDocumentsBatchActionsAddPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove EDL Matched Documents
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Auto Managed Groups
         * @param {string} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsAutoGet(limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsGroupsAutoGet(limit, offset, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Groups
         * @param {string} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsGet(includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsGroupsGet(includeImplied, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Group
         * @param {string} groupId The group id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsGroupIdDelete(groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsGroupsGroupIdDelete(groupId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Group
         * @param {string} groupId The group id field value.
         * @param {boolean} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsGroupIdGet(groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsGroupsGroupIdGet(groupId, includeImplied, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Group
         * @param {string} groupId The group id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsGroupIdPut(groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsGroupsGroupIdPut(groupId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Group 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsGroupsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsGroupsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Application License Usage
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsLicensesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsLicensesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Multi-Record Workflows
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsActionsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Multi-Record Workflow Details
         * @param {string} workflowName 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsActionsWorkflowNameGet(workflowName: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsActionsWorkflowNameGet(workflowName, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Multi-Record Workflow
         * @param {string} workflowName 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsActionsWorkflowNamePost(workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsActionsWorkflowNamePost(workflowName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Workflows
         * @param {string} [objectV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
         * @param {string} [recordIdV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
         * @param {string} [participant] To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
         * @param {string} [statusV] To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
         * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
         * @param {string} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsGet(objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsGet(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Workflow Tasks
         * @param {string} [objectV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
         * @param {string} [recordIdV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
         * @param {string} [assigneeV] To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
         * @param {string} [statusV] To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
         * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
         * @param {string} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksGet(objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksGet(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Accept Single Record Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Complete Single Record Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Workflow Task Actions
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsGet(taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsGet(taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Accept Multi-item Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Complete Multi-item Workflow Task
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Manage Multi-Item Workflow Content
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reassign Multi-item Workflow Task
         * @param {string} taskId The id of the task to reassign.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reassign Single Record Workflow Task
         * @param {string} taskId The id of the task to reassign.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Workflow Task Action Details
         * @param {string} taskId The task id field value.
         * @param {string} taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Undo Workflow Task Acceptance
         * @param {string} taskId The task id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Workflow Task Due Date
         * @param {string} taskId The id of the task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Workflow Task Details
         * @param {string} taskId The task id field value.
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsTasksTaskIdGet(taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsTasksTaskIdGet(taskId, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Workflow Actions
         * @param {string} workflowId The workflow id field value.
         * @param {string} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsWorkflowIdActionsGet(workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsWorkflowIdActionsGet(workflowId, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Workflow Action Details
         * @param {string} workflowId The workflow id field value.
         * @param {string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId, workflowAction, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Workflow Action
         * @param {string} workflowId The workflow id field value.
         * @param {string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
         * @param {string} [documentsSys] Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Workflow Details
         * @param {string} workflowId The workflow id field value.
         * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsObjectworkflowsWorkflowIdGet(workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsObjectworkflowsWorkflowIdGet(workflowId, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Picklists
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsPicklistsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Picklist Values
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNameGet(picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsPicklistsPicklistNameGet(picklistName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inactivate Picklist Value
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Picklist Value
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsPicklistsPicklistNamePicklistValueNamePut(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Picklist Values
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNamePost(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsPicklistsPicklistNamePost(picklistName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Picklist Value Label
         * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsPicklistsPicklistNamePut(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsPicklistsPicklistNamePut(picklistName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Build Production Vault
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxActionsBuildproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxActionsBuildproductionPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Promote to Production
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxActionsPromoteproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxActionsPromoteproductionPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Recheck Sandbox Usage Limit
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxActionsRecheckusagePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxActionsRecheckusagePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change Sandbox Size
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxBatchChangesizePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxBatchChangesizePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Sandbox Entitlements
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxEntitlementsSetPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxEntitlementsSetPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Sandboxes
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Sandbox
         * @param {string} name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxNameDelete(name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxNameDelete(name, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create or Refresh Sandbox
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Sandbox Snapshot
         * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxSnapshotApiNameActionsUpdatePost(apiName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upgrade Sandbox Snapshot
         * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxSnapshotApiNameActionsUpgradePost(apiName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Sandbox Snapshot
         * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotApiNameDelete(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxSnapshotApiNameDelete(apiName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Sandbox Snapshots
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxSnapshotGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Sandbox Snapshot
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxSnapshotPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxSnapshotPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Sandbox from Snapshot
         * @param {string} vaultId The Vault ID of the sandbox to be refreshed.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxVaultIdActionsRefreshPost(vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxVaultIdActionsRefreshPost(vaultId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Sandbox Details by ID
         * @param {string} vaultId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSandboxVaultIdGet(vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSandboxVaultIdGet(vaultId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Security Policies
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Security Policy
         * @param {string} securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Users
         * @param {string} [vaults] Retrieve all users assigned to all Vaults in your domain.
         * @param {string} [excludeVaultMembership] Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
         * @param {string} [excludeAppLicensing] Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersGet(vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersGet(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve User
         * @param {string} id The user id field value. Use the value me to get information for the currently authenticated user.
         * @param {string} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
         * @param {string} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersIdGet(id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersIdGet(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve User Permissions
         * @param {string} id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
         * @param {string} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersIdPermissionsGet(id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersIdPermissionsGet(id, filter, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Single User
         * @param {string} id The user id field value. Use the value me to get information for the currently authenticated user.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersIdPut(id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersIdPut(id, authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate Session User
         * @param {string} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
         * @param {string} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersMeGet(excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersMeGet(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change My Password
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersMePasswordPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersMePasswordPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve My User Permissions
         * @param {string} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersMePermissionsGet(filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersMePermissionsGet(filter, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update My User
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersMePut(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersMePut(authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Single User
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Multiple Users
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersPut(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable User
         * @param {string} userId The user id field value. 
         * @param {boolean} [domain] When true, this disables the user account in all vaults in the domain.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersUserIdDelete(userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersUserIdDelete(userId, domain, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Vault Membership
         * @param {string} userId The user id field value.
         * @param {string} vaultId The system-managed id field value assigned to each vault in the domain.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsUsersUserIdVaultMembershipVaultIdPut(userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsUsersUserIdVaultMembershipVaultIdPut(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Vault Compare
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsVaultActionsComparePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsVaultActionsComparePost(authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Vault Configuration Report
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        objectsVaultActionsConfigreportPost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.objectsVaultActionsConfigreportPost(authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Component Definition Query
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryComponentsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.queryComponentsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Next Page URL
         * @param {string} nextPage 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIDescribeQuery] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryNextPagePost(nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.queryNextPagePost(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submitting a Query
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIDescribeQuery] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPost(authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.queryPost(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Previous Page URL
         * @param {string} previousPage 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {boolean} [xVaultAPIDescribeQuery] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryPreviousPagePost(previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.queryPreviousPagePost(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Current User with SCIM
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2MeGet(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2MeGet(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Current User with SCIM
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2MePut(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2MePut(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All SCIM Resource Types
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2ResourceTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2ResourceTypesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Single SCIM Resource Type
         * @param {string} type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2ResourceTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2ResourceTypesTypeGet(type, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All SCIM Schema Information
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2SchemasGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2SchemasGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Single SCIM Schema Information
         * @param {string} id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2SchemasIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2SchemasIdGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve SCIM Provider
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2ServiceProviderConfigGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2ServiceProviderConfigGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve SCIM Resources
         * @param {string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
         * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
         * @param {string} [sortOrder] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
         * @param {string} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2TypeGet(type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2TypeGet(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Single SCIM Resource
         * @param {string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
         * @param {string} id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2TypeIdGet(type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2TypeIdGet(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Users with SCIM
         * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
         * @param {string} [sortOrder] Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
         * @param {string} [count] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
         * @param {string} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2UsersGet(filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2UsersGet(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Single User with SCIM
         * @param {string} id The id of the user you wish to update.
         * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
         * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
         * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2UsersIdGet(id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2UsersIdGet(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User with SCIM
         * @param {string} id The id of the user you wish to update.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2UsersIdPut(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2UsersIdPut(id, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create User with SCIM
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scimV2UsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scimV2UsersPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Signing Certificate
         * @param {string} certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesCertificateCertIdGet(certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesCertificateCertIdGet(certId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable Configuration Mode
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesConfigurationModeActionsDisablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesConfigurationModeActionsDisablePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable Configuration Mode
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesConfigurationModeActionsEnablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesConfigurationModeActionsEnablePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Available Direct Data Files
         * @param {string} [extractType] The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
         * @param {number} [startTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
         * @param {number} [stopTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesDirectdataFilesGet(extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesDirectdataFilesGet(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Direct Data File
         * @param {string} name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesDirectdataFilesNameGet(name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesDirectdataFilesNameGet(name, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Item Content
         * @param {string} item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [range] Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsContentItemGet(item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingItemsContentItemGet(item, authorization, accept, range, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete File or Folder
         * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [recursive] Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsItemDelete(item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingItemsItemDelete(item, recursive, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Items at a Path
         * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [recursive] If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
         * @param {string} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
         * @param {string} [formatResult] If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsItemGet(item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingItemsItemGet(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Folder or File
         * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsItemPut(item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingItemsItemPut(item, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Folder or File
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentMD5] Optional: The MD5 checksum of the file being uploaded.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingItemsPost(authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingItemsPost(authorization, accept, contentMD5, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Upload Sessions
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingUploadGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Resumable Upload Session
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingUploadPost(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Abort Upload Session
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Upload Session Details
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingUploadUploadSessionIdGet(uploadSessionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List File Parts Uploaded to Session
         * @param {string} uploadSessionId 
         * @param {string} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId, limit, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Commit Upload Session
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingUploadUploadSessionIdPost(uploadSessionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload to a Session
         * @param {string} uploadSessionId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIFilePartNumber] The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
         * @param {string} [contentMD5] Optional: The MD5 checksum of the file part being uploaded.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesFileStagingUploadUploadSessionIdPut(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Job Histories
         * @param {string} [startDate] Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
         * @param {string} [endDate] Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
         * @param {string} [status] Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsHistoriesGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesJobsHistoriesGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Import Bulk Translation File Job Errors
         * @param {string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsJobIdErrorsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesJobsJobIdErrorsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Job Status
         * @param {string} jobId The ID of the job, returned from the original job request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsJobIdGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesJobsJobIdGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Import Bulk Translation File Job Summary
         * @param {string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsJobIdSummaryGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesJobsJobIdSummaryGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve SDK Job Tasks
         * @param {string} jobId The ID of the SDK job, returned from the original job request.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsJobIdTasksGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesJobsJobIdTasksGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Job Monitors
         * @param {string} [startDate] Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
         * @param {string} [endDate] Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
         * @param {string} [status] Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
         * @param {string} [limit] Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsMonitorsGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesJobsMonitorsGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start Job
         * @param {string} jobId The ID of the scheduled job instance to start.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesJobsStartNowJobIdPost(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesJobsStartNowJobIdPost(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Extract Data Files
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderExtractPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesLoaderExtractPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Load Failure Log Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Loader Extract Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderJobIdTasksTaskIdResultsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesLoaderJobIdTasksTaskIdResultsGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Loader Extract Renditions Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Load Success Log Results
         * @param {string} jobId The id value of the requested extract job.
         * @param {string} taskId The id value of the requested extract task.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Load Data Objects
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLoaderLoadPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesLoaderLoadPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate Package
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPackageActionsValidatePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesPackageActionsValidatePost(authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Export Package
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPackagePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesPackagePost(authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Import Package
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPackagePut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesPackagePut(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Queues
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesQueuesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Disable Delivery
         * @param {string} queueName The name of a specific Queue.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesQueuesQueueNameActionsDisableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Enable Delivery
         * @param {string} queueName The name of a specific Queue.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesQueuesQueueNameActionsEnableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset Queue
         * @param {string} queueName The name of a specific Queue.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesQueueNameActionsResetPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesQueuesQueueNameActionsResetPut(queueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Queue Status
         * @param {string} queueName The name of a specific queue. For example, queue__c.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesQueuesQueueNameGet(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesQueuesQueueNameGet(queueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validate Imported Package
         * @param {string} packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary End Session
         * @param {string} [accept] 
         * @param {string} [authorization] The Vault sessionId to end.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionDelete(accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.sessionDelete(accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Single Client Code Distribution
         * @param {string} distributionName The name attribute of the client code distribution to download.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsDistributionNameCodeGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uicodeDistributionsDistributionNameCodeGet(distributionName, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Single Client Code Distribution
         * @param {string} distributionName The name attribute of the client code distribution to delete.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsDistributionNameDelete(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uicodeDistributionsDistributionNameDelete(distributionName, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Single Client Code Distribution Metadata
         * @param {string} distributionName The name attribute of the client code distribution to delete.
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsDistributionNameGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uicodeDistributionsDistributionNameGet(distributionName, accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Client Code Distribution Metadata
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsGet(accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uicodeDistributionsGet(accept, authorization, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add or Replace Single Client Code Distribution
         * @param {string} [accept] 
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uicodeDistributionsPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uicodeDistributionsPost(accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deploy Package
         * @param {string} packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectVaultPackageVPackageIdActionsDeployPost(packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectVaultPackageVPackageIdActionsDeployPost(packageId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Package Deploy Results
         * @param {string} packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Results of Cascade Delete Job
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} jobStatus 
         * @param {string} jobId 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Results of Deep Copy Job
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} jobStatus The ID of the job, retrieved from the response of the job request.
         * @param {string} jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a Placeholder from an EDL Item
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsEdlItemVActionsCreateplaceholderPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsEdlItemVActionsCreateplaceholderPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Merge Records Job Log
         * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsMergesJobIdLogGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsMergesJobIdLogGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Record Merge Results
         * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsMergesJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsMergesJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Record Merge Status
         * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsMergesJobIdStatusGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsMergesJobIdStatusGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Object Action on Multiple Records
         * @param {string} objectName The object name__v field value.
         * @param {string} actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsActionNamePost(objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameActionsActionNamePost(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change Object Type
         * @param {string} objectName The name of the object.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsChangetypePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameActionsChangetypePost(objectName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Record Merge
         * @param {string} objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {Array<VobjectsObjectNameActionsMergePostRequestInner>} [vobjectsObjectNameActionsMergePostRequestInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsMergePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameActionsMergePost(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Roll-up Field Recalculation Status
         * @param {string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsRecalculaterollupsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameActionsRecalculaterollupsGet(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Recalculate Roll-up Fields
         * @param {string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsRecalculaterollupsPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameActionsRecalculaterollupsPost(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Corporate Currency Fields
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Multiple Object Record Attachments
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [idParam] 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameAttachmentsBatchDelete(objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameAttachmentsBatchDelete(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Multiple Object Record Attachments
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameAttachmentsBatchPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameAttachmentsBatchPost(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Multiple Object Record Attachment Descriptions
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameAttachmentsBatchPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameAttachmentsBatchPut(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Object Records
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [contentType] Can be text/csv or application/json
         * @param {string} [accept] Can be text/csv or application/json
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameDelete(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameDelete(objectName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Record Roles
         * @param {string} objectName The object name.
         * @param {string} id The id of the document, binder, or object record.
         * @param {string} roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameIdRolesRoleNameGet(objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameIdRolesRoleNameGet(objectName, id, roleName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object User Actions Details
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
         * @param {string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Initiate Object Action on a Single Record
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
         * @param {string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
         * @param {string} [authorization] 
         * @param {string} [contentType] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cascade Delete Object Record
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deep Copy Object Record
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Record User Actions
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value.
         * @param {boolean} [loc] Optional: When true, retrieves localized (translated) strings for the label. 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdActionsGet(objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdActionsGet(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Attachment Field File
         * @param {string} objectName The object name__v field value. For example, product__v.
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentFieldName The name of the Attachment field to update.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Attachment Field File
         * @param {string} objectName The object name__v field value. For example, product__v.
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentFieldName The name of the Attachment field to update.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download All Attachment Field Files
         * @param {string} objectName The object name__v field value. For example, product__v.
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Object Record Attachment
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Record Attachment Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Object Record Attachment Description
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Object Record Attachment Version
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Object Record Attachment File
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Record Attachment Version Metadata
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restore Object Record Attachment Version
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} attachmentVersion The attachment version__v field value.
         * @param {boolean} [restore] 
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Record Attachment Versions
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} attachmentId The attachment id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download All Object Record Attachment Files
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Record Attachments
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Object Record Attachment
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Complete Audit History for a Single Object Record
         * @param {string} objectName The object name__v field value.
         * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
         * @param {string} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
         * @param {string} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
         * @param {string} [formatResult] To request a CSV file of your audit history, use csv. 
         * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
         * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
         * @param {string} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdAudittrailGet(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Object Record
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} objectRecordId The object record id field value.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameObjectRecordIdGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameObjectRecordIdGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create & Upsert Object Records
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [idParam] To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
         * @param {string} [authorization] 
         * @param {string} [contentType] Can be text/csv or application/json
         * @param {string} [accept] Can be text/csv or application/json
         * @param {boolean} [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
         * @param {boolean} [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNamePost(objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNamePost(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Object Records
         * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
         * @param {string} [authorization] 
         * @param {string} [contentType] Can be text/csv or application/json
         * @param {string} [accept] Can be text/csv or application/json
         * @param {boolean} [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
         * @param {boolean} [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNamePut(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNamePut(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Users & Groups from Roles on Object Records
         * @param {string} objectName The name of the object where you want to remove roles.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameRolesDelete(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameRolesDelete(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign Users & Groups to Roles on Object Records
         * @param {string} objectName The name of the object where you want to remove roles.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [contentType] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsObjectNameRolesPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsObjectNameRolesPost(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Outbound Package Dependencies
         * @param {string} packageId The ID of the outbound_package__v record from which to retrieve dependencies.
         * @param {string} [authorization] 
         * @param {string} [accept] 
         * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.vobjectsOutboundPackageVPackageIdDependenciesGet(packageId, authorization, accept, xVaultAPIClientID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Retrieve API Versions
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Content File
     * @param {string} componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiMdlComponentsComponentTypeAndRecordNameFilesGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Component Record (MDL)
     * @param {string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiMdlComponentsComponentTypeAndRecordNameGet(componentTypeAndRecordName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Asynchronous MDL Script Results
     * @param {string} jobId 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMdlExecuteAsyncJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiMdlExecuteAsyncJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute MDL Script Asynchronously
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMdlExecuteAsyncPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiMdlExecuteAsyncPost(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Execute MDL Script
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMdlExecutePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiMdlExecutePost(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Content File
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMdlFilesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiMdlFilesPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Audit Details
     * @param {string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
     * @param {string} [startDate] Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param {string} [endDate] Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
     * @param {string} [allDates] Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
     * @param {string} [formatResult] To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
     * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param {string} [objects] This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
     * @param {string} [events] This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public audittrailAuditTrailTypeGet(auditTrailType: string, startDate?: string, endDate?: string, allDates?: string, formatResult?: string, limit?: string, offset?: string, objects?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).audittrailAuditTrailTypeGet(auditTrailType, startDate, endDate, allDates, formatResult, limit, offset, objects, events, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Authentication Type Discovery
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authDiscoveryPost(accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authDiscoveryPost(accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary OAuth 2.0 / OpenID Connect
     * @param {string} oathOidcProfileId 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authOauthSessionOathOidcProfileIdPost(oathOidcProfileId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authOauthSessionOathOidcProfileIdPost(oathOidcProfileId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary User Name and Password
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authPost(contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).authPost(contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Single Source Code File
     * @param {string} className The fully qualified class name of your file.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeClassNameDelete(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeClassNameDelete(className, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable Vault Extension
     * @param {string} className The fully qualified class name of your file.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeClassNameDisablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeClassNameDisablePut(className, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable Vault Extension
     * @param {string} className The fully qualified class name of your file.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeClassNameEnablePut(className: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeClassNameEnablePut(className, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Single Source Code File
     * @param {string} className The fully qualified class name of your file.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeClassNameGet(className: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeClassNameGet(className, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Profiling Sessions
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeProfilerGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeProfilerGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Profiling Session
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeProfilerPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeProfilerPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary End Profiling Session
     * @param {string} sessionName The name of the session, for example,  baseline__c.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeProfilerSessionNameActionsEndPost(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeProfilerSessionNameActionsEndPost(sessionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Profiling Session
     * @param {string} sessionName The name of the session, for example,  baseline__c.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeProfilerSessionNameDelete(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeProfilerSessionNameDelete(sessionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Profiling Session
     * @param {string} sessionName The name of the session, for example,  baseline__c.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeProfilerSessionNameGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeProfilerSessionNameGet(sessionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Profiling Session Results
     * @param {string} sessionName The name of the session, for example,  baseline__c.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codeProfilerSessionNameResultsGet(sessionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codeProfilerSessionNameResultsGet(sessionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add or Replace Single Source Code File
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public codePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).codePut(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Specific Root Nodes
     * @param {string} edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Root Nodes
     * @param {string} edlHierarchyOrTemplate 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).compositesTreesEdlHierarchyOrTemplateGet(edlHierarchyOrTemplate, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve a Node\'s Children
     * @param {string} parentNodeId The ID of a parent node in the hierarchy.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).compositesTreesEdlHierarchyVParentNodeIdChildrenGet(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Node Order
     * @param {string} parentNodeId The ID of a parent node in the hierarchy.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).compositesTreesEdlHierarchyVParentNodeIdChildrenPut(parentNodeId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Component Record (XML/JSON)
     * @param {string} componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
     * @param {string} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).configurationComponentTypeAndRecordNameGet(componentTypeAndRecordName, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Component Record Collection
     * @param {string} componentType 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public configurationComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).configurationComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Details from a Specific Object
     * @param {string} objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
     * @param {string} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public configurationObjectNameAndObjectTypeGet(objectNameAndObjectType: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).configurationObjectNameAndObjectTypeGet(objectNameAndObjectType, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Details from All Object Types
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public configurationObjecttypeGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).configurationObjecttypeGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Lifecycle Role Assignment Override Rules
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public configurationRoleAssignmentRuleDelete(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).configurationRoleAssignmentRuleDelete(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Lifecycle Role Assignment Rules (Default & Override)
     * @param {string} [lifecycleV] Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
     * @param {string} [roleV] Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
     * @param {string} [productV] Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
     * @param {string} [countryV] Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
     * @param {string} [studyV] In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
     * @param {string} [studyCountryV] In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public configurationRoleAssignmentRuleGet(lifecycleV?: string, roleV?: string, productV?: string, countryV?: string, studyV?: string, studyCountryV?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).configurationRoleAssignmentRuleGet(lifecycleV, roleV, productV, countryV, studyV, studyCountryV, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Lifecycle Role Assignment Override Rules
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public configurationRoleAssignmentRulePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).configurationRoleAssignmentRulePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Lifecycle Role Assignment Rules (Default & Override)
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public configurationRoleAssignmentRulePut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).configurationRoleAssignmentRulePut(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Delegated Session
     * @param {string} [authorization] The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delegationLoginPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).delegationLoginPost(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Delegations
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public delegationVaultsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).delegationVaultsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Session Keep Alive
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public keepAlivePost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).keepAlivePost(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Limits on Objects
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public limitsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).limitsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Daily API Usage
     * @param {string} [date] The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
     * @param {string} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logsApiUsageGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logsApiUsageGet(date, logFormat, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Debug Logs
     * @param {string} [userId] Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
     * @param {boolean} [includeInactive] Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logsCodeDebugGet(userId?: string, includeInactive?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logsCodeDebugGet(userId, includeInactive, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Debug Log
     * @param {string} id The ID of the debug log to delete.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logsCodeDebugIdActionsResetDelete(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logsCodeDebugIdActionsResetDelete(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset Debug Log
     * @param {string} id The ID of the debug log to delete.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logsCodeDebugIdActionsResetPost(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logsCodeDebugIdActionsResetPost(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Debug Log Files
     * @param {string} id The ID of the debug log to download.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logsCodeDebugIdFilesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logsCodeDebugIdFilesGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Single Debug Log
     * @param {string} id The ID of the debug log to retrieve.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logsCodeDebugIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logsCodeDebugIdGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Debug Log
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logsCodeDebugPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logsCodeDebugPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download SDK Runtime Log
     * @param {string} [date] 
     * @param {string} [logFormat] Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logsCodeRuntimeGet(date?: string, logFormat?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logsCodeRuntimeGet(date, logFormat, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import Bulk Translation File
     * @param {string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public messagesMessageTypeActionsImportPost(messageType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).messagesMessageTypeActionsImportPost(messageType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export Bulk Translation File
     * @param {string} messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
     * @param {string} lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public messagesMessageTypeLanguageLangActionsExportPost(messageType: string, lang: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).messagesMessageTypeLanguageLangActionsExportPost(messageType, lang, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Audit Metadata
     * @param {string} auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataAudittrailAuditTrailTypeGet(auditTrailType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataAudittrailAuditTrailTypeGet(auditTrailType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Audit Types
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataAudittrailGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataAudittrailGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Component Type Metadata
     * @param {string} componentType The component type name (Picklist, Docfield, Doctype, etc.).
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataComponentsComponentTypeGet(componentType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataComponentsComponentTypeGet(componentType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Component Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataComponentsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataComponentsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Template Node Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsBindersTemplatesBindernodesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsBindersTemplatesBindernodesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Template Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Annotation Placemark Type Metadata
     * @param {string} placemarkType The name of the placemark type. For example, sticky__sys.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(placemarkType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Annotation Reference Type Metadata
     * @param {string} referenceType 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(referenceType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Annotation Type Metadata
     * @param {string} annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(annotationType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Event SubType Metadata
     * @param {string} eventType The event type. For example, distribution__v.
     * @param {string} eventSubtype The event subtype. For example, approved_email__v.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType: string, eventSubtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(eventType, eventSubtype, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Event Types and Subtypes
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsEventsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsEventsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Lock Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsLockGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsLockGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Common Document Fields
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsPropertiesFindCommonPost(contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsPropertiesFindCommonPost(contentType, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Document Fields
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsPropertiesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsPropertiesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Template Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Document Types
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsTypesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Type
     * @param {string} type The document type. See Retrieve Document Types.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsTypesTypeGet(type, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Type Relationships
     * @param {string} type The document type. See Retrieve Document Types.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsTypesTypeRelationshipsGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsTypesTypeRelationshipsGet(type, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Classification
     * @param {string} type The document type. See Retrieve Document Types.
     * @param {string} subtype The document subtype. See Retrieve Document Types.
     * @param {string} classification The document classification. See Retrieve Document Types.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type: string, subtype: string, classification: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(type, subtype, classification, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Subtype
     * @param {string} type The document type. See Retrieve Document Types.
     * @param {string} subtype The document subtype. See Retrieve Document Types.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type: string, subtype: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(type, subtype, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Group Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsGroupsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsGroupsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Security Policy Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve User Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataObjectsUsersGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataObjectsUsersGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Archived Document Signature Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Signature Metadata
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Collection
     * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataVobjectsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataVobjectsGet(loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Raw Object Deployment
     * @param {string} objectName 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataVobjectsObjectNameActionsCanceldeploymentPost(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Field Metadata
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectFieldName The object field name value (id, name__v, external_id__v, etc.).
     * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName: string, objectFieldName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataVobjectsObjectNameFieldsObjectFieldNameGet(objectName, objectFieldName, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Metadata
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {boolean} [loc] To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataVobjectsObjectNameGet(objectName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataVobjectsObjectNameGet(objectName, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Page Layouts
     * @param {string} objectName 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataVobjectsObjectNamePageLayoutsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataVobjectsObjectNamePageLayoutsGet(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Page Layout Metadata
     * @param {string} objectName The name of the object from which to retrieve page layout metadata.
     * @param {string} layoutName The name of the page layout from which to retrieve metadata.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName: string, layoutName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).metadataVobjectsObjectNamePageLayoutsLayoutNameGet(objectName, layoutName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Email Notification Histories
     * @param {string} [startDate] Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
     * @param {string} [endDate] Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
     * @param {boolean} [allDates] Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
     * @param {string} [formatResult] To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
     * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public notificationsHistoriesGet(startDate?: string, endDate?: string, allDates?: boolean, formatResult?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).notificationsHistoriesGet(startDate, endDate, allDates, formatResult, limit, offset, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Bulk Workflow Action Details
     * @param {string} action 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectWorkflowActionsActionGet(action: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectWorkflowActionsActionGet(action, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Workflow Actions on Multiple Workflows
     * @param {string} action 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectWorkflowActionsActionPost(action: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectWorkflowActionsActionPost(action, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Workflow Tasks
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectWorkflowActionsCanceltasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectWorkflowActionsCanceltasksPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Workflows
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectWorkflowActionsCancelworkflowsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectWorkflowActionsCancelworkflowsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Bulk Workflow Actions
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectWorkflowActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectWorkflowActionsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reassign Workflow Tasks
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectWorkflowActionsReassigntasksPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectWorkflowActionsReassigntasksPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Replace Workflow Owner
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectWorkflowActionsReplaceworkflowownerPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectWorkflowActionsReplaceworkflowownerPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Export Results
     * @param {string} jobId The id value of the requested export job. This is returned with the export binder requests above.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersActionsExportJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersActionsExportJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export Binder (Latest Version)
     * @param {string} binderId The binder id field value.
     * @param {boolean} [source] to include source content or not
     * @param {string} [renditiontype] to include viewable renditions
     * @param {string} [docversion] to include all major versions
     * @param {string} [attachments] to include all versions of attachments
     * @param {string} [_export] configurable filename metadata
     * @param {boolean} [docfield] to exclude document metadata csv
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdActionsExportPost(binderId: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdActionsExportPost(binderId, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Binder Auto-Filing
     * @param {string} binderId The binder id field value.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdActionsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdActionsPost(binderId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Binding Rule
     * @param {string} binderId The binder id field value.
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdBindingRulePut(binderId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdBindingRulePut(binderId, contentType, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Binder
     * @param {string} binderId The binder id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdDelete(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdDelete(binderId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Binder Document Binding Rule
     * @param {string} binderId The binder id field value.
     * @param {string} nodeId The binder node id field value.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId: string, nodeId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdDocumentsNodeIdBindingRulePut(binderId, nodeId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Document to Binder
     * @param {string} binderId The binder id field value.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdDocumentsPost(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdDocumentsPost(binderId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Document from Binder
     * @param {string} binderId The binder id field value.
     * @param {string} sectionId The binder node id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdDocumentsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdDocumentsSectionIdDelete(binderId, sectionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Move Document in Binder
     * @param {string} binderId The binder id field value.
     * @param {string} sectionId The binder node id field value.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdDocumentsSectionIdPut(binderId: string, sectionId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdDocumentsSectionIdPut(binderId, sectionId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder
     * @param {string} binderId The binder id field value.
     * @param {string} [depth] To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdGet(binderId: string, depth?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdGet(binderId, depth, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Binder Version
     * @param {string} binderId The binder id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdPost(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdPost(binderId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Binder
     * @param {string} binderId The binder id field value.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdPut(binderId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdPut(binderId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Users & Groups from Roles on a Single Binder
     * @param {string} binderId The id value of the binder from which to remove roles.
     * @param {string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param {string} id The id value of the user or group to remove from the role.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(binderId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Binder Section Binding Rule
     * @param {string} binderId The binder id field value.
     * @param {string} nodeId The binder node id field value.
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId: string, nodeId: string, contentType?: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdSectionsNodeIdBindingRulePut(binderId, nodeId, contentType, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Binder Section
     * @param {string} binderId The binder id field value.
     * @param {string} nodeId The binder node id of the section.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdSectionsNodeIdPut(binderId: string, nodeId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdSectionsNodeIdPut(binderId, nodeId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Binder Section
     * @param {string} binderId The binder id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdSectionsPost(binderId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdSectionsPost(binderId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Binder Section
     * @param {string} binderId The binder id field value.
     * @param {string} sectionId The binder node id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdSectionsSectionIdDelete(binderId: string, sectionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdSectionsSectionIdDelete(binderId, sectionId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Sections
     * @param {string} binderId The binder id field value.
     * @param {string} sectionId The binder node id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdSectionsSectionIdGet(binderId: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdSectionsSectionIdGet(binderId, sectionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Binder Versions
     * @param {string} binderId The binder id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdVersionsGet(binderId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdVersionsGet(binderId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export Binder (Specific Version)
     * @param {string} binderId The binder id field value.
     * @param {string} majorVersion The binder major_version_number__v field value.
     * @param {string} minorVersion The binder minor_version_number__v field value.
     * @param {boolean} [source] to include source content or not
     * @param {string} [renditiontype] to include viewable renditions
     * @param {string} [docversion] to include all major versions
     * @param {string} [attachments] to include all versions of attachments
     * @param {string} [_export] configurable filename metadata
     * @param {boolean} [docfield] to exclude document metadata csv
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId: string, majorVersion: string, minorVersion: string, source?: boolean, renditiontype?: string, docversion?: string, attachments?: string, _export?: string, docfield?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(binderId, majorVersion, minorVersion, source, renditiontype, docversion, attachments, _export, docfield, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Binder Version
     * @param {string} binderId The binder id field value.
     * @param {string} majorVersion The binder major_version_number__v field value.
     * @param {string} minorVersion The binder minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Version
     * @param {string} binderId The binder id field value.
     * @param {string} majorVersion The binder major_version_number__v field value.
     * @param {string} minorVersion The binder minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(binderId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Binder Version
     * @param {string} binderId The binder id field value.
     * @param {string} majorVersion The binder major_version_number__v field value.
     * @param {string} minorVersion The binder minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Binder Relationship
     * @param {string} binderId The binder id field value.
     * @param {string} majorVersion The binder major_version_number__v field value.
     * @param {string} minorVersion The binder minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(binderId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Binder Relationship
     * @param {string} binderId The binder id field value.
     * @param {string} majorVersion The binder major_version_number__v field value.
     * @param {string} minorVersion The binder minor_version_number__v field value.
     * @param {string} relationshipId The binder relationship id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Relationship
     * @param {string} binderId The binder id field value.
     * @param {string} majorVersion The binder major_version_number__v field value.
     * @param {string} minorVersion The binder minor_version_number__v field value.
     * @param {string} relationshipId The binder relationship id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(binderId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Version Section
     * @param {string} binderId The binder id field value.
     * @param {string} majorVersion The binder major_version_number__v field value.
     * @param {string} minorVersion The binder minor_version_number__v field value.
     * @param {string} sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId: string, majorVersion: string, minorVersion: string, sectionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(binderId, majorVersion, minorVersion, sectionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Binder Roles
     * @param {string} id 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersIdRolesGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign Users & Groups to Roles on a Single Binder
     * @param {string} id 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Role
     * @param {string} id The binder &#x60;id&#x60;.
     * @param {string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder User Actions
     * @param {string} id The binder id field value from which to retrieve available user actions.
     * @param {string} majorVersion The major version number of the binder.
     * @param {string} minorVersion The minor version number of the binder.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Entry Criteria
     * @param {string} id The binder id field value from which to retrieve available user actions.
     * @param {string} majorVersion The major version number of the binder.
     * @param {string} minorVersion The minor version number of the binder.
     * @param {string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Binder User Action
     * @param {string} id The binder id field value from which to retrieve available user actions.
     * @param {string} majorVersion The major version number of the binder.
     * @param {string} minorVersion The minor version number of the binder.
     * @param {string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve User Actions on Multiple Binders
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Bulk Binder User Actions
     * @param {string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Binder
     * @param {boolean} [async] When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersPost(async?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersPost(async, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Template Collection
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersTemplatesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Binder Template
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersTemplatesPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersTemplatesPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Binder Template
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersTemplatesPut(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Template Node Attributes
     * @param {string} templateName The binder template name__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersTemplatesTemplateNameBindernodesGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersTemplatesTemplateNameBindernodesGet(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Binder Template Node
     * @param {string} templateName The binder template name__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersTemplatesTemplateNameBindernodesPost(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersTemplatesTemplateNameBindernodesPost(templateName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Replace Binder Template Nodes
     * @param {string} templateName The binder template name__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersTemplatesTemplateNameBindernodesPut(templateName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersTemplatesTemplateNameBindernodesPut(templateName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Binder Template
     * @param {string} templateName The binder template name__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Binder Template Attributes
     * @param {string} templateName The binder template name__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsBindersTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsBindersTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Deleted Document IDs
     * @param {string} [startDate] Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
     * @param {string} [endDate] Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDeletionsDocumentsGet(startDate?: string, endDate?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDeletionsDocumentsGet(startDate, endDate, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Deleted Object Record ID
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDeletionsVobjectsObjectNameGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDeletionsVobjectsObjectNameGet(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Document Workflows
     * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsActionsGet(loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsActionsGet(loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Controlled Copy Job Results
     * @param {string} lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
     * @param {string} jobId 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(lifecycleAndStateAndAction, jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Workflow Details
     * @param {string} workflowName The document workflow name value.
     * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by setting loc to true.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsActionsWorkflowNameGet(workflowName: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsActionsWorkflowNameGet(workflowName, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Document Workflow
     * @param {string} workflowName The document workflow name value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsActionsWorkflowNamePost(workflowName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsActionsWorkflowNamePost(workflowName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Annotations
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsAnnotationsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsAnnotationsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Multiple Annotations
     * @param {string} authorization 
     * @param {string} contentType 
     * @param {string} accept 
     * @param {string} xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsAnnotationsBatchPost(authorization: string, contentType: string, accept: string, xVaultAPIClientID: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsAnnotationsBatchPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Annotations
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsAnnotationsBatchPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsAnnotationsBatchPut(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Annotation Replies
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsAnnotationsRepliesBatchPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsAnnotationsRepliesBatchPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Multiple Document Attachments
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsAttachmentsBatchDelete(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsAttachmentsBatchDelete(accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Multiple Document Attachments
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsAttachmentsBatchPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsAttachmentsBatchPost(accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Multiple Document Attachment Descriptions
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsAttachmentsBatchPut(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsAttachmentsBatchPut(accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Export Results
     * @param {string} jobId The id value of the requested export job. This is returned with the export document requests.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsBatchActionsFileextractJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export Documents
     * @param {boolean} [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param {boolean} [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param {boolean} [allversions] Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, allversions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsBatchActionsFileextractPost(source, renditions, allversions, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reclassify Multiple Documents
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsBatchActionsReclassifyPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsBatchActionsReclassifyPut(authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Multiple Document Renditions
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsBatchActionsRerenderPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsBatchActionsRerenderPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Multiple Documents
     * @param {string} [idParam] If you’re identifying documents in your input by their external ID
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsBatchDelete(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsBatchDelete(idParam, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Undo Collaborative Authoring Checkout
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsBatchLockDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsBatchLockDelete(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Multiple Documents
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsBatchPost(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Multiple Documents
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsBatchPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsBatchPut(authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Anchor IDs
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAnchorsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAnchorsGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export Document Annotations to PDF
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAnnotationsFileGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAnnotationsFileGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import Document Annotations from PDF
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAnnotationsFilePost(docId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAnnotationsFilePost(docId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Single Document Attachment
     * @param {string} docId The document id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsAttachmentIdDelete(docId, attachmentId, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Document Attachment
     * @param {string} docId The document id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Attachment Metadata
     * @param {string} docId The document id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsAttachmentIdGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Document Attachment Description
     * @param {string} docId The document id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId: string, attachmentId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsAttachmentIdPut(docId, attachmentId, accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Single Document Attachment Version
     * @param {string} docId The document id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} attachmentVersion The attachment version__v field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Document Attachment Version
     * @param {string} docId The document id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} attachmentVersion The attachment version__v field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Attachment Version Metadata
     * @param {string} docId The document id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} attachmentVersion The attachment version__v field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore Document Attachment Version
     * @param {string} docId The document id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} attachmentVersion The attachment version__v field value.
     * @param {boolean} [restore] The parameter restore must be set to true. 
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(docId, attachmentId, attachmentVersion, restore, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Attachment Versions
     * @param {string} docId The document id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId: string, attachmentId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(docId, attachmentId, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download All Document Attachments
     * @param {string} docId The document id field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsFileGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsFileGet(docId, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Attachments
     * @param {string} docId The document id field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsGet(docId: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsGet(docId, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Document Attachment
     * @param {string} docId The document id field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAttachmentsPost(docId: string, accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAttachmentsPost(docId, accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Complete Audit History for a Single Document
     * @param {string} docId The document ID for which to retrieve audit history.
     * @param {string} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
     * @param {string} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param {string} [formatResult] To request a CSV file of your audit history, use csv. 
     * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param {string} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdAudittrailGet(docId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdAudittrailGet(docId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Single Document
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdDelete(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Events
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdEventsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdEventsGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Document File
     * @param {string} docId The document id field value.
     * @param {boolean} [lockDocument] Set to true to Check Out this document before retrieval. If omitted, defaults to false.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdFileGet(docId: string, lockDocument?: boolean, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdFileGet(docId, lockDocument, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Document Lock
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdLockDelete(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdLockDelete(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Lock
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdLockGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdLockGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Document Lock
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdLockPost(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdLockPost(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download All Document Version Attachments
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Single Document Version
     * @param {string} docId The document id field value.
     * @param {string} [suppressRendition] Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdPost(docId: string, suppressRendition?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdPost(docId, suppressRendition, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Single Document
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdPut(docId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdPut(docId, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Renditions
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdRenditionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdRenditionsGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Single Document Rendition
     * @param {string} docId The document id field value.
     * @param {string} renditionType The document rendition type.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdRenditionsRenditionTypeDelete(docId, renditionType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Document Rendition File
     * @param {string} docId The document id field value.
     * @param {string} renditionType The document rendition type.
     * @param {string} [steadyState] Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdRenditionsRenditionTypeGet(docId: string, renditionType: string, steadyState?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdRenditionsRenditionTypeGet(docId, renditionType, steadyState, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Single Document Rendition
     * @param {string} docId The document id field value.
     * @param {string} renditionType The document rendition type.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdRenditionsRenditionTypePost(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdRenditionsRenditionTypePost(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Replace Document Rendition
     * @param {string} docId The document id field value.
     * @param {string} renditionType The document rendition type.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdRenditionsRenditionTypePut(docId: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdRenditionsRenditionTypePut(docId, renditionType, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Users & Groups from Roles on a Single Document
     * @param {string} docId The id value of the document from which to remove roles.
     * @param {string} roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
     * @param {string} id The id value of the user or group to remove from the role.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId: string, roleNameAndUserOrGroup: string, id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(docId, roleNameAndUserOrGroup, id, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Version Attachments
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Versions
     * @param {string} docId The document id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsGet(docId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsGet(docId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Annotations by ID
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Replies of Parent Annotation
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId: string, majorVersion: string, minorVersion: string, annotationId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(docId, majorVersion, minorVersion, annotationId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export Document Version Annotations to PDF
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import Document Version Annotations from PDF
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Annotations by Document Version and Type
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
     * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
     * @param {string} [annotationTypes] The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
     * @param {string} [paginationId] A unique identifier used to load requests with paginated results.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, limit?: string, offset?: string, annotationTypes?: string, paginationId?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(docId, majorVersion, minorVersion, limit, offset, annotationTypes, paginationId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Document Version Attachment Version
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} attachmentId The id field value of the attachment.
     * @param {string} attachmentVersion The version of the attachment.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Version Attachment Versions
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} attachmentId The id of the document attachment to retrieve.
     * @param {string} attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId: string, majorVersion: string, minorVersion: string, attachmentId: string, attachmentVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(docId, majorVersion, minorVersion, attachmentId, attachmentVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Single Document Version
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Version Notes as CSV
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Document Event
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Video Annotations
     * @param {string} docId The video document id field value.
     * @param {string} majorVersion The video document major_version_number__v field value.
     * @param {string} minorVersion The video document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Document Version File
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Version
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Document Version
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {boolean} [xVaultAPIMigrationMode] When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId: string, majorVersion: string, minorVersion: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(docId, majorVersion, minorVersion, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Relationships
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Single Document Relationship
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(docId, majorVersion, minorVersion, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Single Document Relationship
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Relationship
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} relationshipId The relationship id field value. See Retrieve Document Relationships.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId: string, majorVersion: string, minorVersion: string, relationshipId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(docId, majorVersion, minorVersion, relationshipId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Version Renditions
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(docId, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Document Version Rendition
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} renditionType The document rendition type.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Document Version Rendition File
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} renditionType The document rendition type.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(docId, majorVersion, minorVersion, renditionType, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload Document Version Rendition
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} renditionType The document rendition type.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Replace Document Version Rendition
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} renditionType The document rendition type.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId: string, majorVersion: string, minorVersion: string, renditionType: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(docId, majorVersion, minorVersion, renditionType, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Document Version Thumbnail File
     * @param {string} docId The document id field value.
     * @param {string} majorVersion The document major_version_number__v field value.
     * @param {string} minorVersion The document minor_version_number__v field value.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId: string, majorVersion: string, minorVersion: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(docId, majorVersion, minorVersion, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Documents
     * @param {string} [namedFilter] Retrieves only documents which you have created.
     * @param {string} [scope] Searches only within the document content.
     * @param {string} [versionscope] Retrieves all document versions, rather than only the latest version.
     * @param {string} [search] Search for documents based on a {keyword} in searchable document fields.
     * @param {string} [limit] See VQL documentation for more information.
     * @param {string} [sort] See VQL documentation for more information.
     * @param {string} [start] See VQL documentation for more information.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsGet(namedFilter?: string, scope?: string, versionscope?: string, search?: string, limit?: string, sort?: string, start?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsGet(namedFilter, scope, versionscope, search, limit, sort, start, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Document Roles
     * @param {string} id 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsIdRolesGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsIdRolesGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign Users & Groups to Roles on a Single Document
     * @param {string} id 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsIdRolesPost(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsIdRolesPost(id, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Role
     * @param {string} id The document &#x60;id&#x60;.
     * @param {string} roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsIdRolesRoleNameGet(id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsIdRolesRoleNameGet(id, roleName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document User Actions
     * @param {string} id The document id field value from which to retrieve available user actions.
     * @param {string} majorVersion The major version number of the document.
     * @param {string} minorVersion The minor version number of the document.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id: string, majorVersion: string, minorVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(id, majorVersion, minorVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Entry Criteria
     * @param {string} id The document id field value from which to retrieve available user actions.
     * @param {string} majorVersion The major version number of the document.
     * @param {string} minorVersion The minor version number of the document.
     * @param {string} nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(id, majorVersion, minorVersion, nameV, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Document User Action
     * @param {string} id The document id field value from which to retrieve available user actions.
     * @param {string} majorVersion The major version number of the document.
     * @param {string} minorVersion The minor version number of the document.
     * @param {string} nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id: string, majorVersion: string, minorVersion: string, nameV: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(id, majorVersion, minorVersion, nameV, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve User Actions on Multiple Documents
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsLifecycleActionsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsLifecycleActionsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Bulk Document User Actions
     * @param {string} userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsLifecycleActionsUserActionNamePut(userActionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsLifecycleActionsUserActionNamePut(userActionName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Single Document
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {boolean} [xVaultAPIMigrationMode] When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsPost(authorization?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsPost(authorization, accept, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Multiple Document Relationships
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsRelationshipsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsRelationshipsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Multiple Document Relationships
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsRelationshipsBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsRelationshipsBatchPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Multiple Document Renditions
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsRenditionsBatchDelete(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsRenditionsBatchDelete(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Multiple Document Renditions
     * @param {string} [idParam] If you’re identifying documents in your input by their external ID
     * @param {string} [largeSizeAsset] If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {boolean} [xVaultAPIMigrationMode] Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsRenditionsBatchPost(idParam?: string, largeSizeAsset?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsRenditionsBatchPost(idParam, largeSizeAsset, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Users and Groups from Roles on Multiple Documents & Binders
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsRolesBatchDelete(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsRolesBatchDelete(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign Users & Groups to Roles on Multiple Documents & Binders
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsRolesBatchPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsRolesBatchPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Template Collection
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsTemplatesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsTemplatesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Single Document Template
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsTemplatesPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsTemplatesPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Multiple Document Templates
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsTemplatesPut(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsTemplatesPut(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Basic Document Template
     * @param {string} templateName The document template name__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsTemplatesTemplateNameDelete(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsTemplatesTemplateNameDelete(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Document Template File
     * @param {string} templateName The document template name__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsTemplatesTemplateNameFileGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsTemplatesTemplateNameFileGet(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Document Template Attributes
     * @param {string} templateName The document template name__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsTemplatesTemplateNameGet(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsTemplatesTemplateNameGet(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Single Document Template
     * @param {string} templateName The document template name__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsTemplatesTemplateNamePut(templateName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsTemplatesTemplateNamePut(templateName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Document Tokens
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsTokensPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsTokensPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export Document Versions
     * @param {boolean} [source] Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
     * @param {boolean} [renditions] Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsVersionsBatchActionsFileextractPost(source?: boolean, renditions?: boolean, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsVersionsBatchActionsFileextractPost(source, renditions, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Multiple Document Versions
     * @param {string} [idParam] If you’re identifying documents in your input by their external ID
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsVersionsBatchDelete(idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsVersionsBatchDelete(idParam, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Multiple Document Versions
     * @param {string} [idParam] If you’re identifying documents in your input by their external ID
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIMigrationMode] Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDocumentsVersionsBatchPost(idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIMigrationMode?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDocumentsVersionsBatchPost(idParam, authorization, accept, contentType, xVaultAPIMigrationMode, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Domain Information
     * @param {boolean} [includeApplication] To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDomainGet(includeApplication?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDomainGet(includeApplication, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Domains
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsDomainsGet(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsDomainsGet(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add EDL Matched Documents
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsEdlMatchedDocumentsBatchActionsAddPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsEdlMatchedDocumentsBatchActionsAddPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove EDL Matched Documents
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsEdlMatchedDocumentsBatchActionsRemovePost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Auto Managed Groups
     * @param {string} [limit] Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
     * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsGroupsAutoGet(limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsGroupsAutoGet(limit, offset, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Groups
     * @param {string} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsGroupsGet(includeImplied?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsGroupsGet(includeImplied, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Group
     * @param {string} groupId The group id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsGroupsGroupIdDelete(groupId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsGroupsGroupIdDelete(groupId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Group
     * @param {string} groupId The group id field value.
     * @param {boolean} [includeImplied] When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsGroupsGroupIdGet(groupId: string, includeImplied?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsGroupsGroupIdGet(groupId, includeImplied, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Group
     * @param {string} groupId The group id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsGroupsGroupIdPut(groupId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsGroupsGroupIdPut(groupId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Group 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsGroupsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsGroupsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Application License Usage
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsLicensesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsLicensesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Multi-Record Workflows
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsActionsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsActionsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Multi-Record Workflow Details
     * @param {string} workflowName 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsActionsWorkflowNameGet(workflowName: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsActionsWorkflowNameGet(workflowName, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Multi-Record Workflow
     * @param {string} workflowName 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsActionsWorkflowNamePost(workflowName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsActionsWorkflowNamePost(workflowName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Workflows
     * @param {string} [objectV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param {string} [recordIdV] To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
     * @param {string} [participant] To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param {string} [statusV] To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
     * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param {string} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param {string} [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsGet(objectV?: string, recordIdV?: string, participant?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsGet(objectV, recordIdV, participant, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Workflow Tasks
     * @param {string} [objectV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param {string} [recordIdV] To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
     * @param {string} [assigneeV] To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
     * @param {string} [statusV] To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
     * @param {string} [offset] This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
     * @param {string} [pageSize] This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
     * @param {string} [loc] When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksGet(objectV?: string, recordIdV?: string, assigneeV?: string, statusV?: string, offset?: string, pageSize?: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksGet(objectV, recordIdV, assigneeV, statusV, offset, pageSize, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Accept Single Record Workflow Task
     * @param {string} taskId The task id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsAcceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Workflow Task
     * @param {string} taskId The task id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsCancelPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Complete Single Record Workflow Task
     * @param {string} taskId The task id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsCompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Workflow Task Actions
     * @param {string} taskId The task id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsGet(taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsGet(taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Accept Multi-item Workflow Task
     * @param {string} taskId The task id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Complete Multi-item Workflow Task
     * @param {string} taskId The task id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Manage Multi-Item Workflow Content
     * @param {string} taskId The task id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reassign Multi-item Workflow Task
     * @param {string} taskId The id of the task to reassign.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reassign Single Record Workflow Task
     * @param {string} taskId The id of the task to reassign.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsReassignPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Workflow Task Action Details
     * @param {string} taskId The task id field value.
     * @param {string} taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
     * @param {string} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId: string, taskAction: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(taskId, taskAction, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Undo Workflow Task Acceptance
     * @param {string} taskId The task id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Workflow Task Due Date
     * @param {string} taskId The id of the task.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(taskId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Workflow Task Details
     * @param {string} taskId The task id field value.
     * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsTasksTaskIdGet(taskId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsTasksTaskIdGet(taskId, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Workflow Actions
     * @param {string} workflowId The workflow id field value.
     * @param {string} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsWorkflowIdActionsGet(workflowId: string, loc?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsWorkflowIdActionsGet(workflowId, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Workflow Action Details
     * @param {string} workflowId The workflow id field value.
     * @param {string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId: string, workflowAction: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(workflowId, workflowAction, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Workflow Action
     * @param {string} workflowId The workflow id field value.
     * @param {string} workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
     * @param {string} [documentsSys] Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId: string, workflowAction: string, documentsSys?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(workflowId, workflowAction, documentsSys, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Workflow Details
     * @param {string} workflowId The workflow id field value.
     * @param {boolean} [loc] When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsObjectworkflowsWorkflowIdGet(workflowId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsObjectworkflowsWorkflowIdGet(workflowId, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Picklists
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsPicklistsGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsPicklistsGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Picklist Values
     * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsPicklistsPicklistNameGet(picklistName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsPicklistsPicklistNameGet(picklistName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inactivate Picklist Value
     * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsPicklistsPicklistNamePicklistValueNameDelete(picklistName, picklistValueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Picklist Value
     * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {string} picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsPicklistsPicklistNamePicklistValueNamePut(picklistName: string, picklistValueName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsPicklistsPicklistNamePicklistValueNamePut(picklistName, picklistValueName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Picklist Values
     * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsPicklistsPicklistNamePost(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsPicklistsPicklistNamePost(picklistName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Picklist Value Label
     * @param {string} picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsPicklistsPicklistNamePut(picklistName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsPicklistsPicklistNamePut(picklistName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Build Production Vault
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxActionsBuildproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxActionsBuildproductionPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Promote to Production
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxActionsPromoteproductionPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxActionsPromoteproductionPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Recheck Sandbox Usage Limit
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxActionsRecheckusagePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxActionsRecheckusagePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change Sandbox Size
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxBatchChangesizePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxBatchChangesizePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Sandbox Entitlements
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxEntitlementsSetPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxEntitlementsSetPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Sandboxes
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Sandbox
     * @param {string} name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxNameDelete(name: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxNameDelete(name, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create or Refresh Sandbox
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Sandbox Snapshot
     * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxSnapshotApiNameActionsUpdatePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxSnapshotApiNameActionsUpdatePost(apiName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upgrade Sandbox Snapshot
     * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxSnapshotApiNameActionsUpgradePost(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxSnapshotApiNameActionsUpgradePost(apiName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Sandbox Snapshot
     * @param {string} apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxSnapshotApiNameDelete(apiName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxSnapshotApiNameDelete(apiName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Sandbox Snapshots
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxSnapshotGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxSnapshotGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Sandbox Snapshot
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxSnapshotPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxSnapshotPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Sandbox from Snapshot
     * @param {string} vaultId The Vault ID of the sandbox to be refreshed.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxVaultIdActionsRefreshPost(vaultId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxVaultIdActionsRefreshPost(vaultId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Sandbox Details by ID
     * @param {string} vaultId 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSandboxVaultIdGet(vaultId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSandboxVaultIdGet(vaultId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Security Policies
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSecuritypoliciesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSecuritypoliciesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Security Policy
     * @param {string} securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsSecuritypoliciesSecurityPolicyNameGet(securityPolicyName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Users
     * @param {string} [vaults] Retrieve all users assigned to all Vaults in your domain.
     * @param {string} [excludeVaultMembership] Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
     * @param {string} [excludeAppLicensing] Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersGet(vaults?: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersGet(vaults, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve User
     * @param {string} id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param {string} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param {string} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersIdGet(id: string, excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersIdGet(id, excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve User Permissions
     * @param {string} id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
     * @param {string} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersIdPermissionsGet(id: string, filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersIdPermissionsGet(id, filter, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Single User
     * @param {string} id The user id field value. Use the value me to get information for the currently authenticated user.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersIdPut(id: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersIdPut(id, authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate Session User
     * @param {string} [excludeVaultMembership] Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
     * @param {string} [excludeAppLicensing] Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersMeGet(excludeVaultMembership?: string, excludeAppLicensing?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersMeGet(excludeVaultMembership, excludeAppLicensing, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change My Password
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersMePasswordPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersMePasswordPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve My User Permissions
     * @param {string} [filter] Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersMePermissionsGet(filter?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersMePermissionsGet(filter, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update My User
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersMePut(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersMePut(authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Single User
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Multiple Users
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersPut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersPut(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable User
     * @param {string} userId The user id field value. 
     * @param {boolean} [domain] When true, this disables the user account in all vaults in the domain.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersUserIdDelete(userId: string, domain?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersUserIdDelete(userId, domain, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Vault Membership
     * @param {string} userId The user id field value.
     * @param {string} vaultId The system-managed id field value assigned to each vault in the domain.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsUsersUserIdVaultMembershipVaultIdPut(userId: string, vaultId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsUsersUserIdVaultMembershipVaultIdPut(userId, vaultId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Vault Compare
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsVaultActionsComparePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsVaultActionsComparePost(authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Vault Configuration Report
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public objectsVaultActionsConfigreportPost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).objectsVaultActionsConfigreportPost(authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Component Definition Query
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryComponentsPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryComponentsPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Next Page URL
     * @param {string} nextPage 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {boolean} [xVaultAPIDescribeQuery] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryNextPagePost(nextPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryNextPagePost(nextPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submitting a Query
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {boolean} [xVaultAPIDescribeQuery] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryPost(authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryPost(authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Previous Page URL
     * @param {string} previousPage 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {boolean} [xVaultAPIDescribeQuery] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public queryPreviousPagePost(previousPage: string, authorization?: string, accept?: string, xVaultAPIDescribeQuery?: boolean, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).queryPreviousPagePost(previousPage, authorization, accept, xVaultAPIDescribeQuery, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Current User with SCIM
     * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2MeGet(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2MeGet(attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Current User with SCIM
     * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2MePut(attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2MePut(attributes, excludedAttributes, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All SCIM Resource Types
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2ResourceTypesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2ResourceTypesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Single SCIM Resource Type
     * @param {string} type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2ResourceTypesTypeGet(type: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2ResourceTypesTypeGet(type, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All SCIM Schema Information
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2SchemasGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2SchemasGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Single SCIM Schema Information
     * @param {string} id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2SchemasIdGet(id: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2SchemasIdGet(id, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve SCIM Provider
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2ServiceProviderConfigGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2ServiceProviderConfigGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve SCIM Resources
     * @param {string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {string} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param {string} [sortOrder] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param {string} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2TypeGet(type: string, filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2TypeGet(type, filter, attributes, excludedAttributes, sortBy, sortOrder, startIndex, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Single SCIM Resource
     * @param {string} type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
     * @param {string} id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
     * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2TypeIdGet(type: string, id: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2TypeIdGet(type, id, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Users with SCIM
     * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {string} [sortBy] Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
     * @param {string} [sortOrder] Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
     * @param {string} [count] Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
     * @param {string} [startIndex] Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2UsersGet(filter?: string, attributes?: string, excludedAttributes?: string, sortBy?: string, sortOrder?: string, count?: string, startIndex?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2UsersGet(filter, attributes, excludedAttributes, sortBy, sortOrder, count, startIndex, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Single User with SCIM
     * @param {string} id The id of the user you wish to update.
     * @param {string} [filter] Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
     * @param {string} [attributes] Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
     * @param {string} [excludedAttributes] Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2UsersIdGet(id: string, filter?: string, attributes?: string, excludedAttributes?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2UsersIdGet(id, filter, attributes, excludedAttributes, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User with SCIM
     * @param {string} id The id of the user you wish to update.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2UsersIdPut(id: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2UsersIdPut(id, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create User with SCIM
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public scimV2UsersPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).scimV2UsersPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Signing Certificate
     * @param {string} certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesCertificateCertIdGet(certId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesCertificateCertIdGet(certId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable Configuration Mode
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesConfigurationModeActionsDisablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesConfigurationModeActionsDisablePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable Configuration Mode
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesConfigurationModeActionsEnablePost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesConfigurationModeActionsEnablePost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Available Direct Data Files
     * @param {string} [extractType] The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
     * @param {number} [startTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
     * @param {number} [stopTime] Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesDirectdataFilesGet(extractType?: string, startTime?: number, stopTime?: number, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesDirectdataFilesGet(extractType, startTime, stopTime, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Direct Data File
     * @param {string} name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesDirectdataFilesNameGet(name: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesDirectdataFilesNameGet(name, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Item Content
     * @param {string} item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [range] Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingItemsContentItemGet(item: string, authorization?: string, accept?: string, range?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingItemsContentItemGet(item, authorization, accept, range, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete File or Folder
     * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {string} [recursive] Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingItemsItemDelete(item: string, recursive?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingItemsItemDelete(item, recursive, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Items at a Path
     * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {string} [recursive] If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
     * @param {string} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param {string} [formatResult] If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingItemsItemGet(item: string, recursive?: string, limit?: string, formatResult?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingItemsItemGet(item, recursive, limit, formatResult, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Folder or File
     * @param {string} item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingItemsItemPut(item: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingItemsItemPut(item, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Folder or File
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentMD5] Optional: The MD5 checksum of the file being uploaded.
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingItemsPost(authorization?: string, accept?: string, contentMD5?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingItemsPost(authorization, accept, contentMD5, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Upload Sessions
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingUploadGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingUploadGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Resumable Upload Session
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingUploadPost(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingUploadPost(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Abort Upload Session
     * @param {string} uploadSessionId 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingUploadUploadSessionIdDelete(uploadSessionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Upload Session Details
     * @param {string} uploadSessionId 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingUploadUploadSessionIdGet(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingUploadUploadSessionIdGet(uploadSessionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List File Parts Uploaded to Session
     * @param {string} uploadSessionId 
     * @param {string} [limit] Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId: string, limit?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingUploadUploadSessionIdPartsGet(uploadSessionId, limit, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Commit Upload Session
     * @param {string} uploadSessionId 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingUploadUploadSessionIdPost(uploadSessionId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingUploadUploadSessionIdPost(uploadSessionId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload to a Session
     * @param {string} uploadSessionId 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIFilePartNumber] The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
     * @param {string} [contentMD5] Optional: The MD5 checksum of the file part being uploaded.
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesFileStagingUploadUploadSessionIdPut(uploadSessionId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIFilePartNumber?: string, contentMD5?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesFileStagingUploadUploadSessionIdPut(uploadSessionId, authorization, accept, contentType, xVaultAPIFilePartNumber, contentMD5, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Job Histories
     * @param {string} [startDate] Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param {string} [endDate] Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param {string} [status] Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
     * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesJobsHistoriesGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesJobsHistoriesGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Import Bulk Translation File Job Errors
     * @param {string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesJobsJobIdErrorsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesJobsJobIdErrorsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Job Status
     * @param {string} jobId The ID of the job, returned from the original job request.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesJobsJobIdGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesJobsJobIdGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Import Bulk Translation File Job Summary
     * @param {string} jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesJobsJobIdSummaryGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesJobsJobIdSummaryGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve SDK Job Tasks
     * @param {string} jobId The ID of the SDK job, returned from the original job request.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesJobsJobIdTasksGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesJobsJobIdTasksGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Job Monitors
     * @param {string} [startDate] Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
     * @param {string} [endDate] Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
     * @param {string} [status] Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
     * @param {string} [limit] Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
     * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesJobsMonitorsGet(startDate?: string, endDate?: string, status?: string, limit?: string, offset?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesJobsMonitorsGet(startDate, endDate, status, limit, offset, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start Job
     * @param {string} jobId The ID of the scheduled job instance to start.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesJobsStartNowJobIdPost(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesJobsStartNowJobIdPost(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Extract Data Files
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesLoaderExtractPost(authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesLoaderExtractPost(authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Load Failure Log Results
     * @param {string} jobId The id value of the requested extract job.
     * @param {string} taskId The id value of the requested extract task.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesLoaderJobIdTasksTaskIdFailurelogGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Loader Extract Results
     * @param {string} jobId The id value of the requested extract job.
     * @param {string} taskId The id value of the requested extract task.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesLoaderJobIdTasksTaskIdResultsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesLoaderJobIdTasksTaskIdResultsGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Loader Extract Renditions Results
     * @param {string} jobId The id value of the requested extract job.
     * @param {string} taskId The id value of the requested extract task.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Load Success Log Results
     * @param {string} jobId The id value of the requested extract job.
     * @param {string} taskId The id value of the requested extract task.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId: string, taskId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesLoaderJobIdTasksTaskIdSuccesslogGet(jobId, taskId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Load Data Objects
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesLoaderLoadPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesLoaderLoadPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate Package
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesPackageActionsValidatePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesPackageActionsValidatePost(authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Export Package
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesPackagePost(authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesPackagePost(authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Import Package
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesPackagePut(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesPackagePut(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Queues
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesQueuesGet(authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesQueuesGet(authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Disable Delivery
     * @param {string} queueName The name of a specific Queue.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesQueuesQueueNameActionsDisableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesQueuesQueueNameActionsDisableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Enable Delivery
     * @param {string} queueName The name of a specific Queue.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesQueuesQueueNameActionsEnableDeliveryPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesQueuesQueueNameActionsEnableDeliveryPut(queueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset Queue
     * @param {string} queueName The name of a specific Queue.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesQueuesQueueNameActionsResetPut(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesQueuesQueueNameActionsResetPut(queueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Queue Status
     * @param {string} queueName The name of a specific queue. For example, queue__c.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesQueuesQueueNameGet(queueName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesQueuesQueueNameGet(queueName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validate Imported Package
     * @param {string} packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesVobjectVaultPackageVPackageIdActionsValidatePost(packageId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary End Session
     * @param {string} [accept] 
     * @param {string} [authorization] The Vault sessionId to end.
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sessionDelete(accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sessionDelete(accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Single Client Code Distribution
     * @param {string} distributionName The name attribute of the client code distribution to download.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uicodeDistributionsDistributionNameCodeGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uicodeDistributionsDistributionNameCodeGet(distributionName, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Single Client Code Distribution
     * @param {string} distributionName The name attribute of the client code distribution to delete.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uicodeDistributionsDistributionNameDelete(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uicodeDistributionsDistributionNameDelete(distributionName, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Single Client Code Distribution Metadata
     * @param {string} distributionName The name attribute of the client code distribution to delete.
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uicodeDistributionsDistributionNameGet(distributionName: string, accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uicodeDistributionsDistributionNameGet(distributionName, accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Client Code Distribution Metadata
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uicodeDistributionsGet(accept?: string, authorization?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uicodeDistributionsGet(accept, authorization, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add or Replace Single Client Code Distribution
     * @param {string} [accept] 
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uicodeDistributionsPost(accept?: string, authorization?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uicodeDistributionsPost(accept, authorization, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deploy Package
     * @param {string} packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectVaultPackageVPackageIdActionsDeployPost(packageId: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectVaultPackageVPackageIdActionsDeployPost(packageId, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Package Deploy Results
     * @param {string} packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectVaultPackageVPackageIdActionsDeployResultsGet(packageId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Results of Cascade Delete Job
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} jobStatus 
     * @param {string} jobId 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Results of Deep Copy Job
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} jobStatus The ID of the job, retrieved from the response of the job request.
     * @param {string} jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName: string, jobStatus: string, jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(objectName, jobStatus, jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a Placeholder from an EDL Item
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsEdlItemVActionsCreateplaceholderPost(authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsEdlItemVActionsCreateplaceholderPost(authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Merge Records Job Log
     * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsMergesJobIdLogGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsMergesJobIdLogGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Record Merge Results
     * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsMergesJobIdResultsGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsMergesJobIdResultsGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Record Merge Status
     * @param {string} jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsMergesJobIdStatusGet(jobId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsMergesJobIdStatusGet(jobId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Object Action on Multiple Records
     * @param {string} objectName The object name__v field value.
     * @param {string} actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameActionsActionNamePost(objectName: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameActionsActionNamePost(objectName, actionName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change Object Type
     * @param {string} objectName The name of the object.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameActionsChangetypePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameActionsChangetypePost(objectName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Record Merge
     * @param {string} objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {Array<VobjectsObjectNameActionsMergePostRequestInner>} [vobjectsObjectNameActionsMergePostRequestInner] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameActionsMergePost(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, vobjectsObjectNameActionsMergePostRequestInner?: Array<VobjectsObjectNameActionsMergePostRequestInner>, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameActionsMergePost(objectName, authorization, contentType, accept, xVaultAPIClientID, vobjectsObjectNameActionsMergePostRequestInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Roll-up Field Recalculation Status
     * @param {string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameActionsRecalculaterollupsGet(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameActionsRecalculaterollupsGet(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Recalculate Roll-up Fields
     * @param {string} objectName The name of the object for which to check the status of a Roll-up field recalculation.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameActionsRecalculaterollupsPost(objectName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameActionsRecalculaterollupsPost(objectName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Corporate Currency Fields
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameActionsUpdatecorporatecurrencyPut(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Multiple Object Record Attachments
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} [idParam] 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameAttachmentsBatchDelete(objectName: string, idParam?: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameAttachmentsBatchDelete(objectName, idParam, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Multiple Object Record Attachments
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameAttachmentsBatchPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameAttachmentsBatchPost(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Multiple Object Record Attachment Descriptions
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameAttachmentsBatchPut(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameAttachmentsBatchPut(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Object Records
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} [authorization] 
     * @param {string} [contentType] Can be text/csv or application/json
     * @param {string} [accept] Can be text/csv or application/json
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameDelete(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameDelete(objectName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Record Roles
     * @param {string} objectName The object name.
     * @param {string} id The id of the document, binder, or object record.
     * @param {string} roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameIdRolesRoleNameGet(objectName: string, id: string, roleName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameIdRolesRoleNameGet(objectName, id, roleName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object User Actions Details
     * @param {string} objectName The object name__v field value.
     * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
     * @param {string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName: string, objectRecordId: string, actionName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdActionsActionNameGet(objectName, objectRecordId, actionName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Initiate Object Action on a Single Record
     * @param {string} objectName The object name__v field value.
     * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
     * @param {string} actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
     * @param {string} [authorization] 
     * @param {string} [contentType] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName: string, objectRecordId: string, actionName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdActionsActionNamePost(objectName, objectRecordId, actionName, authorization, contentType, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cascade Delete Object Record
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deep Copy Object Record
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Record User Actions
     * @param {string} objectName The object name__v field value.
     * @param {string} objectRecordId The object record id field value.
     * @param {boolean} [loc] Optional: When true, retrieves localized (translated) strings for the label. 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdActionsGet(objectName: string, objectRecordId: string, loc?: boolean, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdActionsGet(objectName, objectRecordId, loc, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Attachment Field File
     * @param {string} objectName The object name__v field value. For example, product__v.
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentFieldName The name of the Attachment field to update.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Attachment Field File
     * @param {string} objectName The object name__v field value. For example, product__v.
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentFieldName The name of the Attachment field to update.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName: string, objectRecordId: string, attachmentFieldName: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(objectName, objectRecordId, attachmentFieldName, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download All Attachment Field Files
     * @param {string} objectName The object name__v field value. For example, product__v.
     * @param {string} objectRecordId The object record id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Object Record Attachment
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Record Attachment Metadata
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Object Record Attachment Description
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(objectName, objectRecordId, attachmentId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Object Record Attachment Version
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} attachmentVersion The attachment version__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Object Record Attachment File
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} attachmentVersion 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Record Attachment Version Metadata
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} attachmentVersion The attachment version__v field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(objectName, objectRecordId, attachmentId, attachmentVersion, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restore Object Record Attachment Version
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} attachmentVersion The attachment version__v field value.
     * @param {boolean} [restore] 
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName: string, objectRecordId: string, attachmentId: string, attachmentVersion: string, restore?: boolean, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(objectName, objectRecordId, attachmentId, attachmentVersion, restore, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Record Attachment Versions
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} attachmentId The attachment id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName: string, objectRecordId: string, attachmentId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(objectName, objectRecordId, attachmentId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download All Object Record Attachment Files
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsFileGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Record Attachments
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Object Record Attachment
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName: string, objectRecordId: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAttachmentsPost(objectName, objectRecordId, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Complete Audit History for a Single Object Record
     * @param {string} objectName The object name__v field value.
     * @param {string} objectRecordId The object record id field value from which to retrieve user actions.
     * @param {string} [startDate] Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
     * @param {string} [endDate] Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
     * @param {string} [formatResult] To request a CSV file of your audit history, use csv. 
     * @param {string} [limit] Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
     * @param {string} [offset] Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
     * @param {string} [events] Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdAudittrailGet(objectName: string, objectRecordId: string, startDate?: string, endDate?: string, formatResult?: string, limit?: string, offset?: string, events?: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdAudittrailGet(objectName, objectRecordId, startDate, endDate, formatResult, limit, offset, events, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Object Record
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} objectRecordId The object record id field value.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameObjectRecordIdGet(objectName: string, objectRecordId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameObjectRecordIdGet(objectName, objectRecordId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create & Upsert Object Records
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} [idParam] To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
     * @param {string} [authorization] 
     * @param {string} [contentType] Can be text/csv or application/json
     * @param {string} [accept] Can be text/csv or application/json
     * @param {boolean} [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param {boolean} [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNamePost(objectName: string, idParam?: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNamePost(objectName, idParam, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Object Records
     * @param {string} objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
     * @param {string} [authorization] 
     * @param {string} [contentType] Can be text/csv or application/json
     * @param {string} [accept] Can be text/csv or application/json
     * @param {boolean} [xVaultAPIMigrationMode] If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
     * @param {boolean} [xVaultAPINoTriggers] If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNamePut(objectName: string, authorization?: string, contentType?: string, accept?: string, xVaultAPIMigrationMode?: boolean, xVaultAPINoTriggers?: boolean, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNamePut(objectName, authorization, contentType, accept, xVaultAPIMigrationMode, xVaultAPINoTriggers, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Users & Groups from Roles on Object Records
     * @param {string} objectName The name of the object where you want to remove roles.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameRolesDelete(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameRolesDelete(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign Users & Groups to Roles on Object Records
     * @param {string} objectName The name of the object where you want to remove roles.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [contentType] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsObjectNameRolesPost(objectName: string, authorization?: string, accept?: string, contentType?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsObjectNameRolesPost(objectName, authorization, accept, contentType, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Outbound Package Dependencies
     * @param {string} packageId The ID of the outbound_package__v record from which to retrieve dependencies.
     * @param {string} [authorization] 
     * @param {string} [accept] 
     * @param {string} [xVaultAPIClientID] Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vobjectsOutboundPackageVPackageIdDependenciesGet(packageId: string, authorization?: string, accept?: string, xVaultAPIClientID?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).vobjectsOutboundPackageVPackageIdDependenciesGet(packageId, authorization, accept, xVaultAPIClientID, options).then((request) => request(this.axios, this.basePath));
    }
}



