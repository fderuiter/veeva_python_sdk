/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_vobjects__object_name__actions_merge_post_request_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void apiGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  component_type_and_record_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void apiMdlComponentsComponentTypeAndRecordNameFilesGet(const QString &component_type_and_record_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  component_type_and_record_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void apiMdlComponentsComponentTypeAndRecordNameGet(const QString &component_type_and_record_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void apiMdlExecuteAsyncJobIdResultsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void apiMdlExecuteAsyncPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void apiMdlExecutePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void apiMdlFilesPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  audit_trail_type QString [required]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  all_dates QString [optional]
    * @param[in]  format_result QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  objects QString [optional]
    * @param[in]  events QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void audittrailAuditTrailTypeGet(const QString &audit_trail_type, const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &all_dates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format_result = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &objects = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &events = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void authDiscoveryPost(const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oath_oidc_profile_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void authOauthSessionOathOidcProfileIdPost(const QString &oath_oidc_profile_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void authPost(const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  class_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeClassNameDelete(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  class_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeClassNameDisablePut(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  class_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeClassNameEnablePut(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  class_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeClassNameGet(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeProfilerGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeProfilerPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeProfilerSessionNameActionsEndPost(const QString &session_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeProfilerSessionNameDelete(const QString &session_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeProfilerSessionNameGet(const QString &session_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  session_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codeProfilerSessionNameResultsGet(const QString &session_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void codePut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  edl_hierarchy_or_template QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(const QString &edl_hierarchy_or_template, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  edl_hierarchy_or_template QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void compositesTreesEdlHierarchyOrTemplateGet(const QString &edl_hierarchy_or_template, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent_node_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void compositesTreesEdlHierarchyVParentNodeIdChildrenGet(const QString &parent_node_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent_node_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void compositesTreesEdlHierarchyVParentNodeIdChildrenPut(const QString &parent_node_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  component_type_and_record_name QString [required]
    * @param[in]  loc QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void configurationComponentTypeAndRecordNameGet(const QString &component_type_and_record_name, const ::OpenAPI::OptionalParam<QString> &loc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  component_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void configurationComponentTypeGet(const QString &component_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name_and_object_type QString [required]
    * @param[in]  loc QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void configurationObjectNameAndObjectTypeGet(const QString &object_name_and_object_type, const ::OpenAPI::OptionalParam<QString> &loc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void configurationObjecttypeGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void configurationRoleAssignmentRuleDelete(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lifecycle__v QString [optional]
    * @param[in]  role__v QString [optional]
    * @param[in]  product__v QString [optional]
    * @param[in]  country__v QString [optional]
    * @param[in]  study__v QString [optional]
    * @param[in]  study_country__v QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void configurationRoleAssignmentRuleGet(const ::OpenAPI::OptionalParam<QString> &lifecycle__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &study__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &study_country__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void configurationRoleAssignmentRulePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void configurationRoleAssignmentRulePut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void delegationLoginPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void delegationVaultsGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void keepAlivePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void limitsGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  date QString [optional]
    * @param[in]  log_format QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void logsApiUsageGet(const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &log_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [optional]
    * @param[in]  include_inactive bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void logsCodeDebugGet(const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_inactive = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void logsCodeDebugIdActionsResetDelete(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void logsCodeDebugIdActionsResetPost(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void logsCodeDebugIdFilesGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void logsCodeDebugIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void logsCodeDebugPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  date QString [optional]
    * @param[in]  log_format QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void logsCodeRuntimeGet(const ::OpenAPI::OptionalParam<QString> &date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &log_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  message_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void messagesMessageTypeActionsImportPost(const QString &message_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  message_type QString [required]
    * @param[in]  lang QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void messagesMessageTypeLanguageLangActionsExportPost(const QString &message_type, const QString &lang, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  audit_trail_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataAudittrailAuditTrailTypeGet(const QString &audit_trail_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataAudittrailGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  component_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataComponentsComponentTypeGet(const QString &component_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataComponentsGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsBindersTemplatesBindernodesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsBindersTemplatesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  placemark_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(const QString &placemark_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reference_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(const QString &reference_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  annotation_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(const QString &annotation_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  event_type QString [required]
    * @param[in]  event_subtype QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(const QString &event_type, const QString &event_subtype, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsEventsGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsLockGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsPropertiesFindCommonPost(const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsPropertiesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsTemplatesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsTypesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsTypesTypeGet(const QString &type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsTypesTypeRelationshipsGet(const QString &type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  subtype QString [required]
    * @param[in]  classification QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(const QString &type, const QString &subtype, const QString &classification, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  subtype QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(const QString &type, const QString &subtype, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsGroupsGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsSecuritypoliciesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataObjectsUsersGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  loc bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataVobjectsGet(const ::OpenAPI::OptionalParam<bool> &loc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataVobjectsObjectNameActionsCanceldeploymentPost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_field_name QString [required]
    * @param[in]  loc bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataVobjectsObjectNameFieldsObjectFieldNameGet(const QString &object_name, const QString &object_field_name, const ::OpenAPI::OptionalParam<bool> &loc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  loc bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataVobjectsObjectNameGet(const QString &object_name, const ::OpenAPI::OptionalParam<bool> &loc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataVobjectsObjectNamePageLayoutsGet(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  layout_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void metadataVobjectsObjectNamePageLayoutsLayoutNameGet(const QString &object_name, const QString &layout_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  all_dates bool [optional]
    * @param[in]  format_result QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void notificationsHistoriesGet(const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &all_dates = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &format_result = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectWorkflowActionsActionGet(const QString &action, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectWorkflowActionsActionPost(const QString &action, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectWorkflowActionsCanceltasksPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectWorkflowActionsCancelworkflowsPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectWorkflowActionsGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectWorkflowActionsReassigntasksPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectWorkflowActionsReplaceworkflowownerPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersActionsExportJobIdResultsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  source bool [optional]
    * @param[in]  renditiontype QString [optional]
    * @param[in]  docversion QString [optional]
    * @param[in]  attachments QString [optional]
    * @param[in]  r_export QString [optional]
    * @param[in]  docfield bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdActionsExportPost(const QString &binder_id, const ::OpenAPI::OptionalParam<bool> &source = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &renditiontype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &docversion = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attachments = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_export = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &docfield = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdActionsPost(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdBindingRulePut(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdDelete(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdDocumentsNodeIdBindingRulePut(const QString &binder_id, const QString &node_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdDocumentsPost(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  section_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdDocumentsSectionIdDelete(const QString &binder_id, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  section_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdDocumentsSectionIdPut(const QString &binder_id, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  depth QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdGet(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &depth = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdPost(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdPut(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  role_name_and_user_or_group QString [required]
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(const QString &binder_id, const QString &role_name_and_user_or_group, const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdSectionsNodeIdBindingRulePut(const QString &binder_id, const QString &node_id, const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  node_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdSectionsNodeIdPut(const QString &binder_id, const QString &node_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdSectionsPost(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  section_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdSectionsSectionIdDelete(const QString &binder_id, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  section_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdSectionsSectionIdGet(const QString &binder_id, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdVersionsGet(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  source bool [optional]
    * @param[in]  renditiontype QString [optional]
    * @param[in]  docversion QString [optional]
    * @param[in]  attachments QString [optional]
    * @param[in]  r_export QString [optional]
    * @param[in]  docfield bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<bool> &source = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &renditiontype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &docversion = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attachments = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &r_export = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &docfield = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  relationship_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(const QString &binder_id, const QString &major_version, const QString &minor_version, const QString &relationship_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  relationship_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(const QString &binder_id, const QString &major_version, const QString &minor_version, const QString &relationship_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  binder_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  section_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(const QString &binder_id, const QString &major_version, const QString &minor_version, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersIdRolesGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersIdRolesPost(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersIdRolesRoleNameGet(const QString &id, const QString &role_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(const QString &id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  name__v QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(const QString &id, const QString &major_version, const QString &minor_version, const QString &name__v, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  name__v QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(const QString &id, const QString &major_version, const QString &minor_version, const QString &name__v, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersLifecycleActionsPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_action_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersLifecycleActionsUserActionNamePut(const QString &user_action_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  async bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersPost(const ::OpenAPI::OptionalParam<bool> &async = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersTemplatesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersTemplatesPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersTemplatesPut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersTemplatesTemplateNameBindernodesGet(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersTemplatesTemplateNameBindernodesPost(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersTemplatesTemplateNameBindernodesPut(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersTemplatesTemplateNameDelete(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsBindersTemplatesTemplateNameGet(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDeletionsDocumentsGet(const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDeletionsVobjectsObjectNameGet(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  loc bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsActionsGet(const ::OpenAPI::OptionalParam<bool> &loc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  lifecycle_and_state_and_action QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(const QString &lifecycle_and_state_and_action, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_name QString [required]
    * @param[in]  loc bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsActionsWorkflowNameGet(const QString &workflow_name, const ::OpenAPI::OptionalParam<bool> &loc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsActionsWorkflowNamePost(const QString &workflow_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsAnnotationsBatchDelete(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  accept QString [required]
    * @param[in]  x_vault_api_client_id QString [required]
    */
    virtual void objectsDocumentsAnnotationsBatchPost(const QString &authorization, const QString &content_type, const QString &accept, const QString &x_vault_api_client_id);

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsAnnotationsBatchPut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsAnnotationsRepliesBatchPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsAttachmentsBatchDelete(const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsAttachmentsBatchPost(const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsAttachmentsBatchPut(const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsBatchActionsFileextractJobIdResultsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source bool [optional]
    * @param[in]  renditions bool [optional]
    * @param[in]  allversions bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsBatchActionsFileextractPost(const ::OpenAPI::OptionalParam<bool> &source = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &renditions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &allversions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_migration_mode bool [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsBatchActionsReclassifyPut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsBatchActionsRerenderPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_param QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsBatchDelete(const ::OpenAPI::OptionalParam<QString> &id_param = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsBatchLockDelete(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_migration_mode bool [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsBatchPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_migration_mode bool [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsBatchPut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAnchorsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAnnotationsFileGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAnnotationsFilePost(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsAttachmentIdDelete(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsAttachmentIdGet(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsAttachmentIdPut(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(const QString &doc_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(const QString &doc_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(const QString &doc_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  restore bool [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(const QString &doc_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<bool> &restore = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsFileGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAttachmentsPost(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  format_result QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  events QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdAudittrailGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format_result = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &events = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdDelete(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdEventsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  lock_document bool [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdFileGet(const QString &doc_id, const ::OpenAPI::OptionalParam<bool> &lock_document = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdLockDelete(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdLockGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdLockPost(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  suppress_rendition QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdPost(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &suppress_rendition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_migration_mode bool [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdPut(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdRenditionsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  rendition_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdRenditionsRenditionTypeDelete(const QString &doc_id, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  rendition_type QString [required]
    * @param[in]  steady_state QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdRenditionsRenditionTypeGet(const QString &doc_id, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &steady_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  rendition_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdRenditionsRenditionTypePost(const QString &doc_id, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  rendition_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdRenditionsRenditionTypePut(const QString &doc_id, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  role_name_and_user_or_group QString [required]
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(const QString &doc_id, const QString &role_name_and_user_or_group, const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  annotation_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &annotation_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  annotation_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &annotation_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  annotation_types QString [optional]
    * @param[in]  pagination_id QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &annotation_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &pagination_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_migration_mode bool [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  relationship_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &relationship_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  relationship_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &relationship_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  rendition_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  rendition_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  rendition_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  rendition_type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  doc_id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  named_filter QString [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  versionscope QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  start QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsGet(const ::OpenAPI::OptionalParam<QString> &named_filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &versionscope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsIdRolesGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsIdRolesPost(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsIdRolesRoleNameGet(const QString &id, const QString &role_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(const QString &id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  name__v QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(const QString &id, const QString &major_version, const QString &minor_version, const QString &name__v, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  major_version QString [required]
    * @param[in]  minor_version QString [required]
    * @param[in]  name__v QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(const QString &id, const QString &major_version, const QString &minor_version, const QString &name__v, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsLifecycleActionsPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_action_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsLifecycleActionsUserActionNamePut(const QString &user_action_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_migration_mode bool [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsRelationshipsBatchDelete(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsRelationshipsBatchPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsRenditionsBatchDelete(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_param QString [optional]
    * @param[in]  large_size_asset QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_migration_mode bool [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsRenditionsBatchPost(const ::OpenAPI::OptionalParam<QString> &id_param = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &large_size_asset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsRolesBatchDelete(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsRolesBatchPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsTemplatesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsTemplatesPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsTemplatesPut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsTemplatesTemplateNameDelete(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsTemplatesTemplateNameFileGet(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsTemplatesTemplateNameGet(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsTemplatesTemplateNamePut(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsTokensPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source bool [optional]
    * @param[in]  renditions bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsVersionsBatchActionsFileextractPost(const ::OpenAPI::OptionalParam<bool> &source = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &renditions = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_param QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsVersionsBatchDelete(const ::OpenAPI::OptionalParam<QString> &id_param = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id_param QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_migration_mode QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDocumentsVersionsBatchPost(const ::OpenAPI::OptionalParam<QString> &id_param = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  include_application bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDomainGet(const ::OpenAPI::OptionalParam<bool> &include_application = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsDomainsGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsEdlMatchedDocumentsBatchActionsAddPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsEdlMatchedDocumentsBatchActionsRemovePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsGroupsAutoGet(const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  include_implied QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsGroupsGet(const ::OpenAPI::OptionalParam<QString> &include_implied = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsGroupsGroupIdDelete(const QString &group_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  include_implied bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsGroupsGroupIdGet(const QString &group_id, const ::OpenAPI::OptionalParam<bool> &include_implied = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsGroupsGroupIdPut(const QString &group_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsGroupsPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsLicensesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsActionsGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsActionsWorkflowNameGet(const QString &workflow_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsActionsWorkflowNamePost(const QString &workflow_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object__v QString [optional]
    * @param[in]  record_id__v QString [optional]
    * @param[in]  participant QString [optional]
    * @param[in]  status__v QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  loc QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsGet(const ::OpenAPI::OptionalParam<QString> &object__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &record_id__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &participant = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &loc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object__v QString [optional]
    * @param[in]  record_id__v QString [optional]
    * @param[in]  assignee__v QString [optional]
    * @param[in]  status__v QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  page_size QString [optional]
    * @param[in]  loc QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksGet(const ::OpenAPI::OptionalParam<QString> &object__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &record_id__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &assignee__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status__v = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &loc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsAcceptPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsCancelPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsCompletePost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsGet(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsReassignPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  task_action QString [required]
    * @param[in]  loc QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(const QString &task_id, const QString &task_action, const ::OpenAPI::OptionalParam<QString> &loc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  task_id QString [required]
    * @param[in]  loc bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsTasksTaskIdGet(const QString &task_id, const ::OpenAPI::OptionalParam<bool> &loc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_id QString [required]
    * @param[in]  loc QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsWorkflowIdActionsGet(const QString &workflow_id, const ::OpenAPI::OptionalParam<QString> &loc = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_id QString [required]
    * @param[in]  workflow_action QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(const QString &workflow_id, const QString &workflow_action, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_id QString [required]
    * @param[in]  workflow_action QString [required]
    * @param[in]  documents__sys QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(const QString &workflow_id, const QString &workflow_action, const ::OpenAPI::OptionalParam<QString> &documents__sys = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workflow_id QString [required]
    * @param[in]  loc bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsObjectworkflowsWorkflowIdGet(const QString &workflow_id, const ::OpenAPI::OptionalParam<bool> &loc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsPicklistsGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  picklist_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsPicklistsPicklistNameGet(const QString &picklist_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  picklist_name QString [required]
    * @param[in]  picklist_value_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsPicklistsPicklistNamePicklistValueNameDelete(const QString &picklist_name, const QString &picklist_value_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  picklist_name QString [required]
    * @param[in]  picklist_value_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsPicklistsPicklistNamePicklistValueNamePut(const QString &picklist_name, const QString &picklist_value_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  picklist_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsPicklistsPicklistNamePost(const QString &picklist_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  picklist_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsPicklistsPicklistNamePut(const QString &picklist_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxActionsBuildproductionPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxActionsPromoteproductionPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxActionsRecheckusagePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxBatchChangesizePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxEntitlementsSetPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxNameDelete(const QString &name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxSnapshotApiNameActionsUpdatePost(const QString &api_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxSnapshotApiNameActionsUpgradePost(const QString &api_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxSnapshotApiNameDelete(const QString &api_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxSnapshotGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxSnapshotPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vault_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxVaultIdActionsRefreshPost(const QString &vault_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vault_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSandboxVaultIdGet(const QString &vault_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSecuritypoliciesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  security_policy_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsSecuritypoliciesSecurityPolicyNameGet(const QString &security_policy_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  vaults QString [optional]
    * @param[in]  exclude_vault_membership QString [optional]
    * @param[in]  exclude_app_licensing QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersGet(const ::OpenAPI::OptionalParam<QString> &vaults = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_vault_membership = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_app_licensing = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  exclude_vault_membership QString [optional]
    * @param[in]  exclude_app_licensing QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &exclude_vault_membership = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_app_licensing = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersIdPermissionsGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersIdPut(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  exclude_vault_membership QString [optional]
    * @param[in]  exclude_app_licensing QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersMeGet(const ::OpenAPI::OptionalParam<QString> &exclude_vault_membership = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_app_licensing = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersMePasswordPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersMePermissionsGet(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersMePut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersPut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  domain bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersUserIdDelete(const QString &user_id, const ::OpenAPI::OptionalParam<bool> &domain = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  vault_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsUsersUserIdVaultMembershipVaultIdPut(const QString &user_id, const QString &vault_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsVaultActionsComparePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void objectsVaultActionsConfigreportPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void queryComponentsPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  next_page QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_describe_query bool [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void queryNextPagePost(const QString &next_page, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_describe_query = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_describe_query bool [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void queryPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_describe_query = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  previous_page QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_describe_query bool [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void queryPreviousPagePost(const QString &previous_page, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_describe_query = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  attributes QString [optional]
    * @param[in]  excluded_attributes QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2MeGet(const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  attributes QString [optional]
    * @param[in]  excluded_attributes QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2MePut(const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2ResourceTypesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2ResourceTypesTypeGet(const QString &type, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2SchemasGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2SchemasIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2ServiceProviderConfigGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  excluded_attributes QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  start_index QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2TypeGet(const QString &type, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  attributes QString [optional]
    * @param[in]  excluded_attributes QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2TypeIdGet(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  excluded_attributes QString [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  count QString [optional]
    * @param[in]  start_index QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2UsersGet(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  attributes QString [optional]
    * @param[in]  excluded_attributes QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2UsersIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &excluded_attributes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2UsersIdPut(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void scimV2UsersPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  cert_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesCertificateCertIdGet(const QString &cert_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesConfigurationModeActionsDisablePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesConfigurationModeActionsEnablePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  extract_type QString [optional]
    * @param[in]  start_time qint32 [optional]
    * @param[in]  stop_time qint32 [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesDirectdataFilesGet(const ::OpenAPI::OptionalParam<QString> &extract_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &stop_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesDirectdataFilesNameGet(const QString &name, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  range QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingItemsContentItemGet(const QString &item, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item QString [required]
    * @param[in]  recursive QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingItemsItemDelete(const QString &item, const ::OpenAPI::OptionalParam<QString> &recursive = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item QString [required]
    * @param[in]  recursive QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  format_result QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingItemsItemGet(const QString &item, const ::OpenAPI::OptionalParam<QString> &recursive = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format_result = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  item QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingItemsItemPut(const QString &item, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_md5 QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingItemsPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_md5 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingUploadGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingUploadPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_session_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingUploadUploadSessionIdDelete(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_session_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingUploadUploadSessionIdGet(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_session_id QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingUploadUploadSessionIdPartsGet(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_session_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingUploadUploadSessionIdPost(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_session_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_file_part_number QString [optional]
    * @param[in]  content_md5 QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesFileStagingUploadUploadSessionIdPut(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_file_part_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_md5 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesJobsHistoriesGet(const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesJobsJobIdErrorsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesJobsJobIdGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesJobsJobIdSummaryGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesJobsJobIdTasksGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesJobsMonitorsGet(const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesJobsStartNowJobIdPost(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesLoaderExtractPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesLoaderJobIdTasksTaskIdFailurelogGet(const QString &job_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesLoaderJobIdTasksTaskIdResultsGet(const QString &job_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(const QString &job_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  task_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesLoaderJobIdTasksTaskIdSuccesslogGet(const QString &job_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesLoaderLoadPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesPackageActionsValidatePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesPackagePost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesPackagePut(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesQueuesGet(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  queue_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesQueuesQueueNameActionsDisableDeliveryPut(const QString &queue_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  queue_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesQueuesQueueNameActionsEnableDeliveryPut(const QString &queue_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  queue_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesQueuesQueueNameActionsResetPut(const QString &queue_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  queue_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesQueuesQueueNameGet(const QString &queue_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void servicesVobjectVaultPackageVPackageIdActionsValidatePost(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void sessionDelete(const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_name QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void uicodeDistributionsDistributionNameCodeGet(const QString &distribution_name, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_name QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void uicodeDistributionsDistributionNameDelete(const QString &distribution_name, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  distribution_name QString [required]
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void uicodeDistributionsDistributionNameGet(const QString &distribution_name, const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void uicodeDistributionsGet(const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  accept QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void uicodeDistributionsPost(const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectVaultPackageVPackageIdActionsDeployPost(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectVaultPackageVPackageIdActionsDeployResultsGet(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  job_status QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(const QString &object_name, const QString &job_status, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  job_status QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(const QString &object_name, const QString &job_status, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsEdlItemVActionsCreateplaceholderPost(const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsMergesJobIdLogGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsMergesJobIdResultsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  job_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsMergesJobIdStatusGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameActionsActionNamePost(const QString &object_name, const QString &action_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameActionsChangetypePost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    * @param[in]  oai_vobjects__object_name__actions_merge_post_request_inner QList<OAI_vobjects__object_name__actions_merge_post_request_inner> [optional]
    */
    virtual void vobjectsObjectNameActionsMergePost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAI_vobjects__object_name__actions_merge_post_request_inner>> &oai_vobjects__object_name__actions_merge_post_request_inner = ::OpenAPI::OptionalParam<QList<OAI_vobjects__object_name__actions_merge_post_request_inner>>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameActionsRecalculaterollupsGet(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameActionsRecalculaterollupsPost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameActionsUpdatecorporatecurrencyPut(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  id_param QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameAttachmentsBatchDelete(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &id_param = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameAttachmentsBatchPost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameAttachmentsBatchPut(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameDelete(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  role_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameIdRolesRoleNameGet(const QString &object_name, const QString &id, const QString &role_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdActionsActionNameGet(const QString &object_name, const QString &object_record_id, const QString &action_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdActionsActionNamePost(const QString &object_name, const QString &object_record_id, const QString &action_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  loc bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdActionsGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<bool> &loc = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_field_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(const QString &object_name, const QString &object_record_id, const QString &attachment_field_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_field_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(const QString &object_name, const QString &object_record_id, const QString &attachment_field_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  attachment_version QString [required]
    * @param[in]  restore bool [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<bool> &restore = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  attachment_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsFileGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAttachmentsPost(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    * @param[in]  format_result QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    * @param[in]  events QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdAudittrailGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format_result = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &events = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  object_record_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameObjectRecordIdGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  id_param QString [optional]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_migration_mode bool [optional]
    * @param[in]  x_vault_api_no_triggers bool [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNamePost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &id_param = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_no_triggers = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_migration_mode bool [optional]
    * @param[in]  x_vault_api_no_triggers bool [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNamePut(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &x_vault_api_no_triggers = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameRolesDelete(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  object_name QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  content_type QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsObjectNameRolesPost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &content_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_id QString [required]
    * @param[in]  authorization QString [optional]
    * @param[in]  accept QString [optional]
    * @param[in]  x_vault_api_client_id QString [optional]
    */
    virtual void vobjectsOutboundPackageVPackageIdDependenciesGet(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &authorization = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accept = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiGetCallback(OAIHttpRequestWorker *worker);
    void apiMdlComponentsComponentTypeAndRecordNameFilesGetCallback(OAIHttpRequestWorker *worker);
    void apiMdlComponentsComponentTypeAndRecordNameGetCallback(OAIHttpRequestWorker *worker);
    void apiMdlExecuteAsyncJobIdResultsGetCallback(OAIHttpRequestWorker *worker);
    void apiMdlExecuteAsyncPostCallback(OAIHttpRequestWorker *worker);
    void apiMdlExecutePostCallback(OAIHttpRequestWorker *worker);
    void apiMdlFilesPostCallback(OAIHttpRequestWorker *worker);
    void audittrailAuditTrailTypeGetCallback(OAIHttpRequestWorker *worker);
    void authDiscoveryPostCallback(OAIHttpRequestWorker *worker);
    void authOauthSessionOathOidcProfileIdPostCallback(OAIHttpRequestWorker *worker);
    void authPostCallback(OAIHttpRequestWorker *worker);
    void codeClassNameDeleteCallback(OAIHttpRequestWorker *worker);
    void codeClassNameDisablePutCallback(OAIHttpRequestWorker *worker);
    void codeClassNameEnablePutCallback(OAIHttpRequestWorker *worker);
    void codeClassNameGetCallback(OAIHttpRequestWorker *worker);
    void codeProfilerGetCallback(OAIHttpRequestWorker *worker);
    void codeProfilerPostCallback(OAIHttpRequestWorker *worker);
    void codeProfilerSessionNameActionsEndPostCallback(OAIHttpRequestWorker *worker);
    void codeProfilerSessionNameDeleteCallback(OAIHttpRequestWorker *worker);
    void codeProfilerSessionNameGetCallback(OAIHttpRequestWorker *worker);
    void codeProfilerSessionNameResultsGetCallback(OAIHttpRequestWorker *worker);
    void codePutCallback(OAIHttpRequestWorker *worker);
    void compositesTreesEdlHierarchyOrTemplateActionsListnodesPostCallback(OAIHttpRequestWorker *worker);
    void compositesTreesEdlHierarchyOrTemplateGetCallback(OAIHttpRequestWorker *worker);
    void compositesTreesEdlHierarchyVParentNodeIdChildrenGetCallback(OAIHttpRequestWorker *worker);
    void compositesTreesEdlHierarchyVParentNodeIdChildrenPutCallback(OAIHttpRequestWorker *worker);
    void configurationComponentTypeAndRecordNameGetCallback(OAIHttpRequestWorker *worker);
    void configurationComponentTypeGetCallback(OAIHttpRequestWorker *worker);
    void configurationObjectNameAndObjectTypeGetCallback(OAIHttpRequestWorker *worker);
    void configurationObjecttypeGetCallback(OAIHttpRequestWorker *worker);
    void configurationRoleAssignmentRuleDeleteCallback(OAIHttpRequestWorker *worker);
    void configurationRoleAssignmentRuleGetCallback(OAIHttpRequestWorker *worker);
    void configurationRoleAssignmentRulePostCallback(OAIHttpRequestWorker *worker);
    void configurationRoleAssignmentRulePutCallback(OAIHttpRequestWorker *worker);
    void delegationLoginPostCallback(OAIHttpRequestWorker *worker);
    void delegationVaultsGetCallback(OAIHttpRequestWorker *worker);
    void keepAlivePostCallback(OAIHttpRequestWorker *worker);
    void limitsGetCallback(OAIHttpRequestWorker *worker);
    void logsApiUsageGetCallback(OAIHttpRequestWorker *worker);
    void logsCodeDebugGetCallback(OAIHttpRequestWorker *worker);
    void logsCodeDebugIdActionsResetDeleteCallback(OAIHttpRequestWorker *worker);
    void logsCodeDebugIdActionsResetPostCallback(OAIHttpRequestWorker *worker);
    void logsCodeDebugIdFilesGetCallback(OAIHttpRequestWorker *worker);
    void logsCodeDebugIdGetCallback(OAIHttpRequestWorker *worker);
    void logsCodeDebugPostCallback(OAIHttpRequestWorker *worker);
    void logsCodeRuntimeGetCallback(OAIHttpRequestWorker *worker);
    void messagesMessageTypeActionsImportPostCallback(OAIHttpRequestWorker *worker);
    void messagesMessageTypeLanguageLangActionsExportPostCallback(OAIHttpRequestWorker *worker);
    void metadataAudittrailAuditTrailTypeGetCallback(OAIHttpRequestWorker *worker);
    void metadataAudittrailGetCallback(OAIHttpRequestWorker *worker);
    void metadataComponentsComponentTypeGetCallback(OAIHttpRequestWorker *worker);
    void metadataComponentsGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsBindersTemplatesBindernodesGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsBindersTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsEventsGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsLockGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsPropertiesFindCommonPostCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsPropertiesGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesTypeGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesTypeRelationshipsGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsGroupsGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsSecuritypoliciesGetCallback(OAIHttpRequestWorker *worker);
    void metadataObjectsUsersGetCallback(OAIHttpRequestWorker *worker);
    void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetCallback(OAIHttpRequestWorker *worker);
    void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetCallback(OAIHttpRequestWorker *worker);
    void metadataVobjectsGetCallback(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNameActionsCanceldeploymentPostCallback(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNameFieldsObjectFieldNameGetCallback(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNameGetCallback(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNamePageLayoutsGetCallback(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNamePageLayoutsLayoutNameGetCallback(OAIHttpRequestWorker *worker);
    void notificationsHistoriesGetCallback(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsActionGetCallback(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsActionPostCallback(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsCanceltasksPostCallback(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsCancelworkflowsPostCallback(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsGetCallback(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsReassigntasksPostCallback(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsReplaceworkflowownerPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersActionsExportJobIdResultsGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdActionsExportPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdActionsPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdBindingRulePutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDocumentsNodeIdBindingRulePutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDocumentsPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDocumentsSectionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDocumentsSectionIdPutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdPutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsNodeIdBindingRulePutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsNodeIdPutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsSectionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsSectionIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionPutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersIdRolesGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersIdRolesPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersIdRolesRoleNameGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersLifecycleActionsPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersLifecycleActionsUserActionNamePutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesPutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameBindernodesGetCallback(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameBindernodesPostCallback(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameBindernodesPutCallback(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameGetCallback(OAIHttpRequestWorker *worker);
    void objectsDeletionsDocumentsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDeletionsVobjectsObjectNameGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsActionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsActionsWorkflowNameGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsActionsWorkflowNamePostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsAnnotationsBatchDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsAnnotationsBatchPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsAnnotationsBatchPutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsAnnotationsRepliesBatchPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsAttachmentsBatchDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsAttachmentsBatchPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsAttachmentsBatchPutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchActionsFileextractJobIdResultsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchActionsFileextractPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchActionsReclassifyPutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchActionsRerenderPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchLockDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchPutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAnchorsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAnnotationsFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAnnotationsFilePostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdPutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAudittrailGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdEventsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdLockDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdLockGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdLockPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdPutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsRenditionTypeDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsRenditionTypeGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsRenditionTypePostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsRenditionTypePutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdRolesGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdRolesPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdRolesRoleNameGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsLifecycleActionsPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsLifecycleActionsUserActionNamePutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsRelationshipsBatchDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsRelationshipsBatchPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsRenditionsBatchDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsRenditionsBatchPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsRolesBatchDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsRolesBatchPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesPutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesTemplateNameDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesTemplateNameFileGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesTemplateNameGetCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesTemplateNamePutCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsTokensPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsVersionsBatchActionsFileextractPostCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsVersionsBatchDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsDocumentsVersionsBatchPostCallback(OAIHttpRequestWorker *worker);
    void objectsDomainGetCallback(OAIHttpRequestWorker *worker);
    void objectsDomainsGetCallback(OAIHttpRequestWorker *worker);
    void objectsEdlMatchedDocumentsBatchActionsAddPostCallback(OAIHttpRequestWorker *worker);
    void objectsEdlMatchedDocumentsBatchActionsRemovePostCallback(OAIHttpRequestWorker *worker);
    void objectsGroupsAutoGetCallback(OAIHttpRequestWorker *worker);
    void objectsGroupsGetCallback(OAIHttpRequestWorker *worker);
    void objectsGroupsGroupIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsGroupsGroupIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsGroupsGroupIdPutCallback(OAIHttpRequestWorker *worker);
    void objectsGroupsPostCallback(OAIHttpRequestWorker *worker);
    void objectsLicensesGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsActionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsActionsWorkflowNameGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsActionsWorkflowNamePostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsAcceptPostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsCancelPostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsCompletePostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsReassignPostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsTaskActionGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsWorkflowIdActionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostCallback(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsWorkflowIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsPicklistsGetCallback(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNameGetCallback(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNamePicklistValueNameDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNamePicklistValueNamePutCallback(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNamePostCallback(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNamePutCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxActionsBuildproductionPostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxActionsPromoteproductionPostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxActionsRecheckusagePostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxBatchChangesizePostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxEntitlementsSetPostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxGetCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxNameDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxPostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotApiNameActionsUpdatePostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotApiNameActionsUpgradePostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotApiNameDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotGetCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotPostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxVaultIdActionsRefreshPostCallback(OAIHttpRequestWorker *worker);
    void objectsSandboxVaultIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsSecuritypoliciesGetCallback(OAIHttpRequestWorker *worker);
    void objectsSecuritypoliciesSecurityPolicyNameGetCallback(OAIHttpRequestWorker *worker);
    void objectsUsersGetCallback(OAIHttpRequestWorker *worker);
    void objectsUsersIdGetCallback(OAIHttpRequestWorker *worker);
    void objectsUsersIdPermissionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsUsersIdPutCallback(OAIHttpRequestWorker *worker);
    void objectsUsersMeGetCallback(OAIHttpRequestWorker *worker);
    void objectsUsersMePasswordPostCallback(OAIHttpRequestWorker *worker);
    void objectsUsersMePermissionsGetCallback(OAIHttpRequestWorker *worker);
    void objectsUsersMePutCallback(OAIHttpRequestWorker *worker);
    void objectsUsersPostCallback(OAIHttpRequestWorker *worker);
    void objectsUsersPutCallback(OAIHttpRequestWorker *worker);
    void objectsUsersUserIdDeleteCallback(OAIHttpRequestWorker *worker);
    void objectsUsersUserIdVaultMembershipVaultIdPutCallback(OAIHttpRequestWorker *worker);
    void objectsVaultActionsComparePostCallback(OAIHttpRequestWorker *worker);
    void objectsVaultActionsConfigreportPostCallback(OAIHttpRequestWorker *worker);
    void queryComponentsPostCallback(OAIHttpRequestWorker *worker);
    void queryNextPagePostCallback(OAIHttpRequestWorker *worker);
    void queryPostCallback(OAIHttpRequestWorker *worker);
    void queryPreviousPagePostCallback(OAIHttpRequestWorker *worker);
    void scimV2MeGetCallback(OAIHttpRequestWorker *worker);
    void scimV2MePutCallback(OAIHttpRequestWorker *worker);
    void scimV2ResourceTypesGetCallback(OAIHttpRequestWorker *worker);
    void scimV2ResourceTypesTypeGetCallback(OAIHttpRequestWorker *worker);
    void scimV2SchemasGetCallback(OAIHttpRequestWorker *worker);
    void scimV2SchemasIdGetCallback(OAIHttpRequestWorker *worker);
    void scimV2ServiceProviderConfigGetCallback(OAIHttpRequestWorker *worker);
    void scimV2TypeGetCallback(OAIHttpRequestWorker *worker);
    void scimV2TypeIdGetCallback(OAIHttpRequestWorker *worker);
    void scimV2UsersGetCallback(OAIHttpRequestWorker *worker);
    void scimV2UsersIdGetCallback(OAIHttpRequestWorker *worker);
    void scimV2UsersIdPutCallback(OAIHttpRequestWorker *worker);
    void scimV2UsersPostCallback(OAIHttpRequestWorker *worker);
    void servicesCertificateCertIdGetCallback(OAIHttpRequestWorker *worker);
    void servicesConfigurationModeActionsDisablePostCallback(OAIHttpRequestWorker *worker);
    void servicesConfigurationModeActionsEnablePostCallback(OAIHttpRequestWorker *worker);
    void servicesDirectdataFilesGetCallback(OAIHttpRequestWorker *worker);
    void servicesDirectdataFilesNameGetCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsContentItemGetCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsItemDeleteCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsItemGetCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsItemPutCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsPostCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadGetCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadPostCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdDeleteCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdGetCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdPartsGetCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdPostCallback(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdPutCallback(OAIHttpRequestWorker *worker);
    void servicesJobsHistoriesGetCallback(OAIHttpRequestWorker *worker);
    void servicesJobsJobIdErrorsGetCallback(OAIHttpRequestWorker *worker);
    void servicesJobsJobIdGetCallback(OAIHttpRequestWorker *worker);
    void servicesJobsJobIdSummaryGetCallback(OAIHttpRequestWorker *worker);
    void servicesJobsJobIdTasksGetCallback(OAIHttpRequestWorker *worker);
    void servicesJobsMonitorsGetCallback(OAIHttpRequestWorker *worker);
    void servicesJobsStartNowJobIdPostCallback(OAIHttpRequestWorker *worker);
    void servicesLoaderExtractPostCallback(OAIHttpRequestWorker *worker);
    void servicesLoaderJobIdTasksTaskIdFailurelogGetCallback(OAIHttpRequestWorker *worker);
    void servicesLoaderJobIdTasksTaskIdResultsGetCallback(OAIHttpRequestWorker *worker);
    void servicesLoaderJobIdTasksTaskIdResultsRenditionsGetCallback(OAIHttpRequestWorker *worker);
    void servicesLoaderJobIdTasksTaskIdSuccesslogGetCallback(OAIHttpRequestWorker *worker);
    void servicesLoaderLoadPostCallback(OAIHttpRequestWorker *worker);
    void servicesPackageActionsValidatePostCallback(OAIHttpRequestWorker *worker);
    void servicesPackagePostCallback(OAIHttpRequestWorker *worker);
    void servicesPackagePutCallback(OAIHttpRequestWorker *worker);
    void servicesQueuesGetCallback(OAIHttpRequestWorker *worker);
    void servicesQueuesQueueNameActionsDisableDeliveryPutCallback(OAIHttpRequestWorker *worker);
    void servicesQueuesQueueNameActionsEnableDeliveryPutCallback(OAIHttpRequestWorker *worker);
    void servicesQueuesQueueNameActionsResetPutCallback(OAIHttpRequestWorker *worker);
    void servicesQueuesQueueNameGetCallback(OAIHttpRequestWorker *worker);
    void servicesVobjectVaultPackageVPackageIdActionsValidatePostCallback(OAIHttpRequestWorker *worker);
    void sessionDeleteCallback(OAIHttpRequestWorker *worker);
    void uicodeDistributionsDistributionNameCodeGetCallback(OAIHttpRequestWorker *worker);
    void uicodeDistributionsDistributionNameDeleteCallback(OAIHttpRequestWorker *worker);
    void uicodeDistributionsDistributionNameGetCallback(OAIHttpRequestWorker *worker);
    void uicodeDistributionsGetCallback(OAIHttpRequestWorker *worker);
    void uicodeDistributionsPostCallback(OAIHttpRequestWorker *worker);
    void vobjectVaultPackageVPackageIdActionsDeployPostCallback(OAIHttpRequestWorker *worker);
    void vobjectVaultPackageVPackageIdActionsDeployResultsGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsEdlItemVActionsCreateplaceholderPostCallback(OAIHttpRequestWorker *worker);
    void vobjectsMergesJobIdLogGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsMergesJobIdResultsGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsMergesJobIdStatusGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsActionNamePostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsChangetypePostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsMergePostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsRecalculaterollupsGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsRecalculaterollupsPostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsUpdatecorporatecurrencyPutCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameAttachmentsBatchDeleteCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameAttachmentsBatchPostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameAttachmentsBatchPutCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameDeleteCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameIdRolesRoleNameGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsActionNameGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsActionNamePostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsCascadedeletePostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsDeepcopyPostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsFileGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsPostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAudittrailGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdGetCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNamePostCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNamePutCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameRolesDeleteCallback(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameRolesPostCallback(OAIHttpRequestWorker *worker);
    void vobjectsOutboundPackageVPackageIdDependenciesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiGetSignal();
    void apiMdlComponentsComponentTypeAndRecordNameFilesGetSignal();
    void apiMdlComponentsComponentTypeAndRecordNameGetSignal();
    void apiMdlExecuteAsyncJobIdResultsGetSignal();
    void apiMdlExecuteAsyncPostSignal();
    void apiMdlExecutePostSignal();
    void apiMdlFilesPostSignal();
    void audittrailAuditTrailTypeGetSignal();
    void authDiscoveryPostSignal();
    void authOauthSessionOathOidcProfileIdPostSignal();
    void authPostSignal();
    void codeClassNameDeleteSignal();
    void codeClassNameDisablePutSignal();
    void codeClassNameEnablePutSignal();
    void codeClassNameGetSignal();
    void codeProfilerGetSignal();
    void codeProfilerPostSignal();
    void codeProfilerSessionNameActionsEndPostSignal();
    void codeProfilerSessionNameDeleteSignal();
    void codeProfilerSessionNameGetSignal();
    void codeProfilerSessionNameResultsGetSignal();
    void codePutSignal();
    void compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignal();
    void compositesTreesEdlHierarchyOrTemplateGetSignal();
    void compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignal();
    void compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignal();
    void configurationComponentTypeAndRecordNameGetSignal();
    void configurationComponentTypeGetSignal();
    void configurationObjectNameAndObjectTypeGetSignal();
    void configurationObjecttypeGetSignal();
    void configurationRoleAssignmentRuleDeleteSignal();
    void configurationRoleAssignmentRuleGetSignal();
    void configurationRoleAssignmentRulePostSignal();
    void configurationRoleAssignmentRulePutSignal();
    void delegationLoginPostSignal();
    void delegationVaultsGetSignal();
    void keepAlivePostSignal();
    void limitsGetSignal();
    void logsApiUsageGetSignal();
    void logsCodeDebugGetSignal();
    void logsCodeDebugIdActionsResetDeleteSignal();
    void logsCodeDebugIdActionsResetPostSignal();
    void logsCodeDebugIdFilesGetSignal();
    void logsCodeDebugIdGetSignal();
    void logsCodeDebugPostSignal();
    void logsCodeRuntimeGetSignal();
    void messagesMessageTypeActionsImportPostSignal();
    void messagesMessageTypeLanguageLangActionsExportPostSignal();
    void metadataAudittrailAuditTrailTypeGetSignal();
    void metadataAudittrailGetSignal();
    void metadataComponentsComponentTypeGetSignal();
    void metadataComponentsGetSignal();
    void metadataObjectsBindersTemplatesBindernodesGetSignal();
    void metadataObjectsBindersTemplatesGetSignal();
    void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignal();
    void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignal();
    void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignal();
    void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignal();
    void metadataObjectsDocumentsEventsGetSignal();
    void metadataObjectsDocumentsLockGetSignal();
    void metadataObjectsDocumentsPropertiesFindCommonPostSignal();
    void metadataObjectsDocumentsPropertiesGetSignal();
    void metadataObjectsDocumentsTemplatesGetSignal();
    void metadataObjectsDocumentsTypesGetSignal();
    void metadataObjectsDocumentsTypesTypeGetSignal();
    void metadataObjectsDocumentsTypesTypeRelationshipsGetSignal();
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignal();
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignal();
    void metadataObjectsGroupsGetSignal();
    void metadataObjectsSecuritypoliciesGetSignal();
    void metadataObjectsUsersGetSignal();
    void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignal();
    void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignal();
    void metadataVobjectsGetSignal();
    void metadataVobjectsObjectNameActionsCanceldeploymentPostSignal();
    void metadataVobjectsObjectNameFieldsObjectFieldNameGetSignal();
    void metadataVobjectsObjectNameGetSignal();
    void metadataVobjectsObjectNamePageLayoutsGetSignal();
    void metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignal();
    void notificationsHistoriesGetSignal();
    void objectWorkflowActionsActionGetSignal();
    void objectWorkflowActionsActionPostSignal();
    void objectWorkflowActionsCanceltasksPostSignal();
    void objectWorkflowActionsCancelworkflowsPostSignal();
    void objectWorkflowActionsGetSignal();
    void objectWorkflowActionsReassigntasksPostSignal();
    void objectWorkflowActionsReplaceworkflowownerPostSignal();
    void objectsBindersActionsExportJobIdResultsGetSignal();
    void objectsBindersBinderIdActionsExportPostSignal();
    void objectsBindersBinderIdActionsPostSignal();
    void objectsBindersBinderIdBindingRulePutSignal();
    void objectsBindersBinderIdDeleteSignal();
    void objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignal();
    void objectsBindersBinderIdDocumentsPostSignal();
    void objectsBindersBinderIdDocumentsSectionIdDeleteSignal();
    void objectsBindersBinderIdDocumentsSectionIdPutSignal();
    void objectsBindersBinderIdGetSignal();
    void objectsBindersBinderIdPostSignal();
    void objectsBindersBinderIdPutSignal();
    void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignal();
    void objectsBindersBinderIdSectionsNodeIdBindingRulePutSignal();
    void objectsBindersBinderIdSectionsNodeIdPutSignal();
    void objectsBindersBinderIdSectionsPostSignal();
    void objectsBindersBinderIdSectionsSectionIdDeleteSignal();
    void objectsBindersBinderIdSectionsSectionIdGetSignal();
    void objectsBindersBinderIdVersionsGetSignal();
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignal();
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignal();
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignal();
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignal();
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignal();
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignal();
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignal();
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignal();
    void objectsBindersIdRolesGetSignal();
    void objectsBindersIdRolesPostSignal();
    void objectsBindersIdRolesRoleNameGetSignal();
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignal();
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignal();
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignal();
    void objectsBindersLifecycleActionsPostSignal();
    void objectsBindersLifecycleActionsUserActionNamePutSignal();
    void objectsBindersPostSignal();
    void objectsBindersTemplatesGetSignal();
    void objectsBindersTemplatesPostSignal();
    void objectsBindersTemplatesPutSignal();
    void objectsBindersTemplatesTemplateNameBindernodesGetSignal();
    void objectsBindersTemplatesTemplateNameBindernodesPostSignal();
    void objectsBindersTemplatesTemplateNameBindernodesPutSignal();
    void objectsBindersTemplatesTemplateNameDeleteSignal();
    void objectsBindersTemplatesTemplateNameGetSignal();
    void objectsDeletionsDocumentsGetSignal();
    void objectsDeletionsVobjectsObjectNameGetSignal();
    void objectsDocumentsActionsGetSignal();
    void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignal();
    void objectsDocumentsActionsWorkflowNameGetSignal();
    void objectsDocumentsActionsWorkflowNamePostSignal();
    void objectsDocumentsAnnotationsBatchDeleteSignal();
    void objectsDocumentsAnnotationsBatchPostSignal();
    void objectsDocumentsAnnotationsBatchPutSignal();
    void objectsDocumentsAnnotationsRepliesBatchPostSignal();
    void objectsDocumentsAttachmentsBatchDeleteSignal();
    void objectsDocumentsAttachmentsBatchPostSignal();
    void objectsDocumentsAttachmentsBatchPutSignal();
    void objectsDocumentsBatchActionsFileextractJobIdResultsGetSignal();
    void objectsDocumentsBatchActionsFileextractPostSignal();
    void objectsDocumentsBatchActionsReclassifyPutSignal();
    void objectsDocumentsBatchActionsRerenderPostSignal();
    void objectsDocumentsBatchDeleteSignal();
    void objectsDocumentsBatchLockDeleteSignal();
    void objectsDocumentsBatchPostSignal();
    void objectsDocumentsBatchPutSignal();
    void objectsDocumentsDocIdAnchorsGetSignal();
    void objectsDocumentsDocIdAnnotationsFileGetSignal();
    void objectsDocumentsDocIdAnnotationsFilePostSignal();
    void objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignal();
    void objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignal();
    void objectsDocumentsDocIdAttachmentsAttachmentIdGetSignal();
    void objectsDocumentsDocIdAttachmentsAttachmentIdPutSignal();
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignal();
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignal();
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignal();
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignal();
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignal();
    void objectsDocumentsDocIdAttachmentsFileGetSignal();
    void objectsDocumentsDocIdAttachmentsGetSignal();
    void objectsDocumentsDocIdAttachmentsPostSignal();
    void objectsDocumentsDocIdAudittrailGetSignal();
    void objectsDocumentsDocIdDeleteSignal();
    void objectsDocumentsDocIdEventsGetSignal();
    void objectsDocumentsDocIdFileGetSignal();
    void objectsDocumentsDocIdGetSignal();
    void objectsDocumentsDocIdLockDeleteSignal();
    void objectsDocumentsDocIdLockGetSignal();
    void objectsDocumentsDocIdLockPostSignal();
    void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignal();
    void objectsDocumentsDocIdPostSignal();
    void objectsDocumentsDocIdPutSignal();
    void objectsDocumentsDocIdRenditionsGetSignal();
    void objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignal();
    void objectsDocumentsDocIdRenditionsRenditionTypeGetSignal();
    void objectsDocumentsDocIdRenditionsRenditionTypePostSignal();
    void objectsDocumentsDocIdRenditionsRenditionTypePutSignal();
    void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignal();
    void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignal();
    void objectsDocumentsDocIdVersionsGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignal();
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignal();
    void objectsDocumentsGetSignal();
    void objectsDocumentsIdRolesGetSignal();
    void objectsDocumentsIdRolesPostSignal();
    void objectsDocumentsIdRolesRoleNameGetSignal();
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignal();
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignal();
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignal();
    void objectsDocumentsLifecycleActionsPostSignal();
    void objectsDocumentsLifecycleActionsUserActionNamePutSignal();
    void objectsDocumentsPostSignal();
    void objectsDocumentsRelationshipsBatchDeleteSignal();
    void objectsDocumentsRelationshipsBatchPostSignal();
    void objectsDocumentsRenditionsBatchDeleteSignal();
    void objectsDocumentsRenditionsBatchPostSignal();
    void objectsDocumentsRolesBatchDeleteSignal();
    void objectsDocumentsRolesBatchPostSignal();
    void objectsDocumentsTemplatesGetSignal();
    void objectsDocumentsTemplatesPostSignal();
    void objectsDocumentsTemplatesPutSignal();
    void objectsDocumentsTemplatesTemplateNameDeleteSignal();
    void objectsDocumentsTemplatesTemplateNameFileGetSignal();
    void objectsDocumentsTemplatesTemplateNameGetSignal();
    void objectsDocumentsTemplatesTemplateNamePutSignal();
    void objectsDocumentsTokensPostSignal();
    void objectsDocumentsVersionsBatchActionsFileextractPostSignal();
    void objectsDocumentsVersionsBatchDeleteSignal();
    void objectsDocumentsVersionsBatchPostSignal();
    void objectsDomainGetSignal();
    void objectsDomainsGetSignal();
    void objectsEdlMatchedDocumentsBatchActionsAddPostSignal();
    void objectsEdlMatchedDocumentsBatchActionsRemovePostSignal();
    void objectsGroupsAutoGetSignal();
    void objectsGroupsGetSignal();
    void objectsGroupsGroupIdDeleteSignal();
    void objectsGroupsGroupIdGetSignal();
    void objectsGroupsGroupIdPutSignal();
    void objectsGroupsPostSignal();
    void objectsLicensesGetSignal();
    void objectsObjectworkflowsActionsGetSignal();
    void objectsObjectworkflowsActionsWorkflowNameGetSignal();
    void objectsObjectworkflowsActionsWorkflowNamePostSignal();
    void objectsObjectworkflowsGetSignal();
    void objectsObjectworkflowsTasksGetSignal();
    void objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignal();
    void objectsObjectworkflowsTasksTaskIdActionsCancelPostSignal();
    void objectsObjectworkflowsTasksTaskIdActionsCompletePostSignal();
    void objectsObjectworkflowsTasksTaskIdActionsGetSignal();
    void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignal();
    void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignal();
    void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignal();
    void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignal();
    void objectsObjectworkflowsTasksTaskIdActionsReassignPostSignal();
    void objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignal();
    void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignal();
    void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignal();
    void objectsObjectworkflowsTasksTaskIdGetSignal();
    void objectsObjectworkflowsWorkflowIdActionsGetSignal();
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignal();
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignal();
    void objectsObjectworkflowsWorkflowIdGetSignal();
    void objectsPicklistsGetSignal();
    void objectsPicklistsPicklistNameGetSignal();
    void objectsPicklistsPicklistNamePicklistValueNameDeleteSignal();
    void objectsPicklistsPicklistNamePicklistValueNamePutSignal();
    void objectsPicklistsPicklistNamePostSignal();
    void objectsPicklistsPicklistNamePutSignal();
    void objectsSandboxActionsBuildproductionPostSignal();
    void objectsSandboxActionsPromoteproductionPostSignal();
    void objectsSandboxActionsRecheckusagePostSignal();
    void objectsSandboxBatchChangesizePostSignal();
    void objectsSandboxEntitlementsSetPostSignal();
    void objectsSandboxGetSignal();
    void objectsSandboxNameDeleteSignal();
    void objectsSandboxPostSignal();
    void objectsSandboxSnapshotApiNameActionsUpdatePostSignal();
    void objectsSandboxSnapshotApiNameActionsUpgradePostSignal();
    void objectsSandboxSnapshotApiNameDeleteSignal();
    void objectsSandboxSnapshotGetSignal();
    void objectsSandboxSnapshotPostSignal();
    void objectsSandboxVaultIdActionsRefreshPostSignal();
    void objectsSandboxVaultIdGetSignal();
    void objectsSecuritypoliciesGetSignal();
    void objectsSecuritypoliciesSecurityPolicyNameGetSignal();
    void objectsUsersGetSignal();
    void objectsUsersIdGetSignal();
    void objectsUsersIdPermissionsGetSignal();
    void objectsUsersIdPutSignal();
    void objectsUsersMeGetSignal();
    void objectsUsersMePasswordPostSignal();
    void objectsUsersMePermissionsGetSignal();
    void objectsUsersMePutSignal();
    void objectsUsersPostSignal();
    void objectsUsersPutSignal();
    void objectsUsersUserIdDeleteSignal();
    void objectsUsersUserIdVaultMembershipVaultIdPutSignal();
    void objectsVaultActionsComparePostSignal();
    void objectsVaultActionsConfigreportPostSignal();
    void queryComponentsPostSignal();
    void queryNextPagePostSignal();
    void queryPostSignal();
    void queryPreviousPagePostSignal();
    void scimV2MeGetSignal();
    void scimV2MePutSignal();
    void scimV2ResourceTypesGetSignal();
    void scimV2ResourceTypesTypeGetSignal();
    void scimV2SchemasGetSignal();
    void scimV2SchemasIdGetSignal();
    void scimV2ServiceProviderConfigGetSignal();
    void scimV2TypeGetSignal();
    void scimV2TypeIdGetSignal();
    void scimV2UsersGetSignal();
    void scimV2UsersIdGetSignal();
    void scimV2UsersIdPutSignal();
    void scimV2UsersPostSignal();
    void servicesCertificateCertIdGetSignal();
    void servicesConfigurationModeActionsDisablePostSignal();
    void servicesConfigurationModeActionsEnablePostSignal();
    void servicesDirectdataFilesGetSignal();
    void servicesDirectdataFilesNameGetSignal();
    void servicesFileStagingItemsContentItemGetSignal();
    void servicesFileStagingItemsItemDeleteSignal();
    void servicesFileStagingItemsItemGetSignal();
    void servicesFileStagingItemsItemPutSignal();
    void servicesFileStagingItemsPostSignal();
    void servicesFileStagingUploadGetSignal();
    void servicesFileStagingUploadPostSignal();
    void servicesFileStagingUploadUploadSessionIdDeleteSignal();
    void servicesFileStagingUploadUploadSessionIdGetSignal();
    void servicesFileStagingUploadUploadSessionIdPartsGetSignal();
    void servicesFileStagingUploadUploadSessionIdPostSignal();
    void servicesFileStagingUploadUploadSessionIdPutSignal();
    void servicesJobsHistoriesGetSignal();
    void servicesJobsJobIdErrorsGetSignal();
    void servicesJobsJobIdGetSignal();
    void servicesJobsJobIdSummaryGetSignal();
    void servicesJobsJobIdTasksGetSignal();
    void servicesJobsMonitorsGetSignal();
    void servicesJobsStartNowJobIdPostSignal();
    void servicesLoaderExtractPostSignal();
    void servicesLoaderJobIdTasksTaskIdFailurelogGetSignal();
    void servicesLoaderJobIdTasksTaskIdResultsGetSignal();
    void servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignal();
    void servicesLoaderJobIdTasksTaskIdSuccesslogGetSignal();
    void servicesLoaderLoadPostSignal();
    void servicesPackageActionsValidatePostSignal();
    void servicesPackagePostSignal();
    void servicesPackagePutSignal();
    void servicesQueuesGetSignal();
    void servicesQueuesQueueNameActionsDisableDeliveryPutSignal();
    void servicesQueuesQueueNameActionsEnableDeliveryPutSignal();
    void servicesQueuesQueueNameActionsResetPutSignal();
    void servicesQueuesQueueNameGetSignal();
    void servicesVobjectVaultPackageVPackageIdActionsValidatePostSignal();
    void sessionDeleteSignal();
    void uicodeDistributionsDistributionNameCodeGetSignal();
    void uicodeDistributionsDistributionNameDeleteSignal();
    void uicodeDistributionsDistributionNameGetSignal();
    void uicodeDistributionsGetSignal();
    void uicodeDistributionsPostSignal();
    void vobjectVaultPackageVPackageIdActionsDeployPostSignal();
    void vobjectVaultPackageVPackageIdActionsDeployResultsGetSignal();
    void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignal();
    void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignal();
    void vobjectsEdlItemVActionsCreateplaceholderPostSignal();
    void vobjectsMergesJobIdLogGetSignal();
    void vobjectsMergesJobIdResultsGetSignal();
    void vobjectsMergesJobIdStatusGetSignal();
    void vobjectsObjectNameActionsActionNamePostSignal();
    void vobjectsObjectNameActionsChangetypePostSignal();
    void vobjectsObjectNameActionsMergePostSignal();
    void vobjectsObjectNameActionsRecalculaterollupsGetSignal();
    void vobjectsObjectNameActionsRecalculaterollupsPostSignal();
    void vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignal();
    void vobjectsObjectNameAttachmentsBatchDeleteSignal();
    void vobjectsObjectNameAttachmentsBatchPostSignal();
    void vobjectsObjectNameAttachmentsBatchPutSignal();
    void vobjectsObjectNameDeleteSignal();
    void vobjectsObjectNameIdRolesRoleNameGetSignal();
    void vobjectsObjectNameObjectRecordIdActionsActionNameGetSignal();
    void vobjectsObjectNameObjectRecordIdActionsActionNamePostSignal();
    void vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignal();
    void vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignal();
    void vobjectsObjectNameObjectRecordIdActionsGetSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsGetSignal();
    void vobjectsObjectNameObjectRecordIdAttachmentsPostSignal();
    void vobjectsObjectNameObjectRecordIdAudittrailGetSignal();
    void vobjectsObjectNameObjectRecordIdGetSignal();
    void vobjectsObjectNamePostSignal();
    void vobjectsObjectNamePutSignal();
    void vobjectsObjectNameRolesDeleteSignal();
    void vobjectsObjectNameRolesPostSignal();
    void vobjectsOutboundPackageVPackageIdDependenciesGetSignal();


    void apiGetSignalFull(OAIHttpRequestWorker *worker);
    void apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalFull(OAIHttpRequestWorker *worker);
    void apiMdlComponentsComponentTypeAndRecordNameGetSignalFull(OAIHttpRequestWorker *worker);
    void apiMdlExecuteAsyncJobIdResultsGetSignalFull(OAIHttpRequestWorker *worker);
    void apiMdlExecuteAsyncPostSignalFull(OAIHttpRequestWorker *worker);
    void apiMdlExecutePostSignalFull(OAIHttpRequestWorker *worker);
    void apiMdlFilesPostSignalFull(OAIHttpRequestWorker *worker);
    void audittrailAuditTrailTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void authDiscoveryPostSignalFull(OAIHttpRequestWorker *worker);
    void authOauthSessionOathOidcProfileIdPostSignalFull(OAIHttpRequestWorker *worker);
    void authPostSignalFull(OAIHttpRequestWorker *worker);
    void codeClassNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void codeClassNameDisablePutSignalFull(OAIHttpRequestWorker *worker);
    void codeClassNameEnablePutSignalFull(OAIHttpRequestWorker *worker);
    void codeClassNameGetSignalFull(OAIHttpRequestWorker *worker);
    void codeProfilerGetSignalFull(OAIHttpRequestWorker *worker);
    void codeProfilerPostSignalFull(OAIHttpRequestWorker *worker);
    void codeProfilerSessionNameActionsEndPostSignalFull(OAIHttpRequestWorker *worker);
    void codeProfilerSessionNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void codeProfilerSessionNameGetSignalFull(OAIHttpRequestWorker *worker);
    void codeProfilerSessionNameResultsGetSignalFull(OAIHttpRequestWorker *worker);
    void codePutSignalFull(OAIHttpRequestWorker *worker);
    void compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalFull(OAIHttpRequestWorker *worker);
    void compositesTreesEdlHierarchyOrTemplateGetSignalFull(OAIHttpRequestWorker *worker);
    void compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalFull(OAIHttpRequestWorker *worker);
    void compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalFull(OAIHttpRequestWorker *worker);
    void configurationComponentTypeAndRecordNameGetSignalFull(OAIHttpRequestWorker *worker);
    void configurationComponentTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void configurationObjectNameAndObjectTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void configurationObjecttypeGetSignalFull(OAIHttpRequestWorker *worker);
    void configurationRoleAssignmentRuleDeleteSignalFull(OAIHttpRequestWorker *worker);
    void configurationRoleAssignmentRuleGetSignalFull(OAIHttpRequestWorker *worker);
    void configurationRoleAssignmentRulePostSignalFull(OAIHttpRequestWorker *worker);
    void configurationRoleAssignmentRulePutSignalFull(OAIHttpRequestWorker *worker);
    void delegationLoginPostSignalFull(OAIHttpRequestWorker *worker);
    void delegationVaultsGetSignalFull(OAIHttpRequestWorker *worker);
    void keepAlivePostSignalFull(OAIHttpRequestWorker *worker);
    void limitsGetSignalFull(OAIHttpRequestWorker *worker);
    void logsApiUsageGetSignalFull(OAIHttpRequestWorker *worker);
    void logsCodeDebugGetSignalFull(OAIHttpRequestWorker *worker);
    void logsCodeDebugIdActionsResetDeleteSignalFull(OAIHttpRequestWorker *worker);
    void logsCodeDebugIdActionsResetPostSignalFull(OAIHttpRequestWorker *worker);
    void logsCodeDebugIdFilesGetSignalFull(OAIHttpRequestWorker *worker);
    void logsCodeDebugIdGetSignalFull(OAIHttpRequestWorker *worker);
    void logsCodeDebugPostSignalFull(OAIHttpRequestWorker *worker);
    void logsCodeRuntimeGetSignalFull(OAIHttpRequestWorker *worker);
    void messagesMessageTypeActionsImportPostSignalFull(OAIHttpRequestWorker *worker);
    void messagesMessageTypeLanguageLangActionsExportPostSignalFull(OAIHttpRequestWorker *worker);
    void metadataAudittrailAuditTrailTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataAudittrailGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataComponentsComponentTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataComponentsGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsBindersTemplatesBindernodesGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsBindersTemplatesGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsEventsGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsLockGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsPropertiesFindCommonPostSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsPropertiesGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTemplatesGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesTypeRelationshipsGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsGroupsGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsSecuritypoliciesGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataObjectsUsersGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataVobjectsGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNameActionsCanceldeploymentPostSignalFull(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNameGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNamePageLayoutsGetSignalFull(OAIHttpRequestWorker *worker);
    void metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalFull(OAIHttpRequestWorker *worker);
    void notificationsHistoriesGetSignalFull(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsActionGetSignalFull(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsActionPostSignalFull(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsCanceltasksPostSignalFull(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsCancelworkflowsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsReassigntasksPostSignalFull(OAIHttpRequestWorker *worker);
    void objectWorkflowActionsReplaceworkflowownerPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersActionsExportJobIdResultsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdActionsExportPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdActionsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdBindingRulePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDocumentsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDocumentsSectionIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdDocumentsSectionIdPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsNodeIdPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsSectionIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdSectionsSectionIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersIdRolesGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersIdRolesPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersIdRolesRoleNameGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersLifecycleActionsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersLifecycleActionsUserActionNamePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameBindernodesGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameBindernodesPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameBindernodesPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsBindersTemplatesTemplateNameGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDeletionsDocumentsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDeletionsVobjectsObjectNameGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsActionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsActionsWorkflowNameGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsActionsWorkflowNamePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsAnnotationsBatchDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsAnnotationsBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsAnnotationsBatchPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsAnnotationsRepliesBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsAttachmentsBatchDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsAttachmentsBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsAttachmentsBatchPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchActionsFileextractPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchActionsReclassifyPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchActionsRerenderPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchLockDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsBatchPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAnchorsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAnnotationsFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAnnotationsFilePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAttachmentsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdAudittrailGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdEventsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdLockDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdLockGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdLockPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsRenditionTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsRenditionTypePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRenditionsRenditionTypePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdRolesGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdRolesPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdRolesRoleNameGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsLifecycleActionsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsLifecycleActionsUserActionNamePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsRelationshipsBatchDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsRelationshipsBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsRenditionsBatchDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsRenditionsBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsRolesBatchDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsRolesBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesTemplateNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesTemplateNameFileGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesTemplateNameGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsTemplatesTemplateNamePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsTokensPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsVersionsBatchActionsFileextractPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsVersionsBatchDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsDocumentsVersionsBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsDomainGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsDomainsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsEdlMatchedDocumentsBatchActionsAddPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsEdlMatchedDocumentsBatchActionsRemovePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsGroupsAutoGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsGroupsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsGroupsGroupIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsGroupsGroupIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsGroupsGroupIdPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsGroupsPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsLicensesGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsActionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsActionsWorkflowNameGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsActionsWorkflowNamePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsTasksTaskIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsWorkflowIdActionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsObjectworkflowsWorkflowIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsPicklistsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNameGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNamePicklistValueNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNamePicklistValueNamePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNamePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsPicklistsPicklistNamePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxActionsBuildproductionPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxActionsPromoteproductionPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxActionsRecheckusagePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxBatchChangesizePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxEntitlementsSetPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotApiNameActionsUpdatePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotApiNameActionsUpgradePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotApiNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxSnapshotPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxVaultIdActionsRefreshPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsSandboxVaultIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsSecuritypoliciesGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsSecuritypoliciesSecurityPolicyNameGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersIdGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersIdPermissionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersIdPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersMeGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersMePasswordPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersMePermissionsGetSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersMePutSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersPostSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersUserIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void objectsUsersUserIdVaultMembershipVaultIdPutSignalFull(OAIHttpRequestWorker *worker);
    void objectsVaultActionsComparePostSignalFull(OAIHttpRequestWorker *worker);
    void objectsVaultActionsConfigreportPostSignalFull(OAIHttpRequestWorker *worker);
    void queryComponentsPostSignalFull(OAIHttpRequestWorker *worker);
    void queryNextPagePostSignalFull(OAIHttpRequestWorker *worker);
    void queryPostSignalFull(OAIHttpRequestWorker *worker);
    void queryPreviousPagePostSignalFull(OAIHttpRequestWorker *worker);
    void scimV2MeGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2MePutSignalFull(OAIHttpRequestWorker *worker);
    void scimV2ResourceTypesGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2ResourceTypesTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2SchemasGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2SchemasIdGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2ServiceProviderConfigGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2TypeGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2TypeIdGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2UsersGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2UsersIdGetSignalFull(OAIHttpRequestWorker *worker);
    void scimV2UsersIdPutSignalFull(OAIHttpRequestWorker *worker);
    void scimV2UsersPostSignalFull(OAIHttpRequestWorker *worker);
    void servicesCertificateCertIdGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesConfigurationModeActionsDisablePostSignalFull(OAIHttpRequestWorker *worker);
    void servicesConfigurationModeActionsEnablePostSignalFull(OAIHttpRequestWorker *worker);
    void servicesDirectdataFilesGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesDirectdataFilesNameGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsContentItemGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsItemDeleteSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsItemGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsItemPutSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingItemsPostSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadPostSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdPartsGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdPostSignalFull(OAIHttpRequestWorker *worker);
    void servicesFileStagingUploadUploadSessionIdPutSignalFull(OAIHttpRequestWorker *worker);
    void servicesJobsHistoriesGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesJobsJobIdErrorsGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesJobsJobIdGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesJobsJobIdSummaryGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesJobsJobIdTasksGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesJobsMonitorsGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesJobsStartNowJobIdPostSignalFull(OAIHttpRequestWorker *worker);
    void servicesLoaderExtractPostSignalFull(OAIHttpRequestWorker *worker);
    void servicesLoaderJobIdTasksTaskIdFailurelogGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesLoaderJobIdTasksTaskIdResultsGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesLoaderLoadPostSignalFull(OAIHttpRequestWorker *worker);
    void servicesPackageActionsValidatePostSignalFull(OAIHttpRequestWorker *worker);
    void servicesPackagePostSignalFull(OAIHttpRequestWorker *worker);
    void servicesPackagePutSignalFull(OAIHttpRequestWorker *worker);
    void servicesQueuesGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesQueuesQueueNameActionsDisableDeliveryPutSignalFull(OAIHttpRequestWorker *worker);
    void servicesQueuesQueueNameActionsEnableDeliveryPutSignalFull(OAIHttpRequestWorker *worker);
    void servicesQueuesQueueNameActionsResetPutSignalFull(OAIHttpRequestWorker *worker);
    void servicesQueuesQueueNameGetSignalFull(OAIHttpRequestWorker *worker);
    void servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalFull(OAIHttpRequestWorker *worker);
    void sessionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void uicodeDistributionsDistributionNameCodeGetSignalFull(OAIHttpRequestWorker *worker);
    void uicodeDistributionsDistributionNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void uicodeDistributionsDistributionNameGetSignalFull(OAIHttpRequestWorker *worker);
    void uicodeDistributionsGetSignalFull(OAIHttpRequestWorker *worker);
    void uicodeDistributionsPostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectVaultPackageVPackageIdActionsDeployPostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsEdlItemVActionsCreateplaceholderPostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsMergesJobIdLogGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsMergesJobIdResultsGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsMergesJobIdStatusGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsActionNamePostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsChangetypePostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsMergePostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsRecalculaterollupsGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsRecalculaterollupsPostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameAttachmentsBatchDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameAttachmentsBatchPostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameAttachmentsBatchPutSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameIdRolesRoleNameGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdActionsGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAttachmentsPostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdAudittrailGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameObjectRecordIdGetSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNamePostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNamePutSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameRolesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsObjectNameRolesPostSignalFull(OAIHttpRequestWorker *worker);
    void vobjectsOutboundPackageVPackageIdDependenciesGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiGetSignalError() instead")
    void apiGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalError() instead")
    void apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlComponentsComponentTypeAndRecordNameGetSignalError() instead")
    void apiMdlComponentsComponentTypeAndRecordNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlComponentsComponentTypeAndRecordNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlExecuteAsyncJobIdResultsGetSignalError() instead")
    void apiMdlExecuteAsyncJobIdResultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlExecuteAsyncJobIdResultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlExecuteAsyncPostSignalError() instead")
    void apiMdlExecuteAsyncPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlExecuteAsyncPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlExecutePostSignalError() instead")
    void apiMdlExecutePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlExecutePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlFilesPostSignalError() instead")
    void apiMdlFilesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlFilesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audittrailAuditTrailTypeGetSignalError() instead")
    void audittrailAuditTrailTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void audittrailAuditTrailTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authDiscoveryPostSignalError() instead")
    void authDiscoveryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authDiscoveryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authOauthSessionOathOidcProfileIdPostSignalError() instead")
    void authOauthSessionOathOidcProfileIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authOauthSessionOathOidcProfileIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authPostSignalError() instead")
    void authPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeClassNameDeleteSignalError() instead")
    void codeClassNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeClassNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeClassNameDisablePutSignalError() instead")
    void codeClassNameDisablePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeClassNameDisablePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeClassNameEnablePutSignalError() instead")
    void codeClassNameEnablePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeClassNameEnablePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeClassNameGetSignalError() instead")
    void codeClassNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeClassNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerGetSignalError() instead")
    void codeProfilerGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerPostSignalError() instead")
    void codeProfilerPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerSessionNameActionsEndPostSignalError() instead")
    void codeProfilerSessionNameActionsEndPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerSessionNameActionsEndPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerSessionNameDeleteSignalError() instead")
    void codeProfilerSessionNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerSessionNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerSessionNameGetSignalError() instead")
    void codeProfilerSessionNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerSessionNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerSessionNameResultsGetSignalError() instead")
    void codeProfilerSessionNameResultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerSessionNameResultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePutSignalError() instead")
    void codePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void codePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalError() instead")
    void compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compositesTreesEdlHierarchyOrTemplateGetSignalError() instead")
    void compositesTreesEdlHierarchyOrTemplateGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void compositesTreesEdlHierarchyOrTemplateGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalError() instead")
    void compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalError() instead")
    void compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationComponentTypeAndRecordNameGetSignalError() instead")
    void configurationComponentTypeAndRecordNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configurationComponentTypeAndRecordNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationComponentTypeGetSignalError() instead")
    void configurationComponentTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configurationComponentTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationObjectNameAndObjectTypeGetSignalError() instead")
    void configurationObjectNameAndObjectTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configurationObjectNameAndObjectTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationObjecttypeGetSignalError() instead")
    void configurationObjecttypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configurationObjecttypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationRoleAssignmentRuleDeleteSignalError() instead")
    void configurationRoleAssignmentRuleDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configurationRoleAssignmentRuleDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationRoleAssignmentRuleGetSignalError() instead")
    void configurationRoleAssignmentRuleGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configurationRoleAssignmentRuleGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationRoleAssignmentRulePostSignalError() instead")
    void configurationRoleAssignmentRulePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configurationRoleAssignmentRulePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationRoleAssignmentRulePutSignalError() instead")
    void configurationRoleAssignmentRulePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configurationRoleAssignmentRulePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delegationLoginPostSignalError() instead")
    void delegationLoginPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delegationLoginPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delegationVaultsGetSignalError() instead")
    void delegationVaultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void delegationVaultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keepAlivePostSignalError() instead")
    void keepAlivePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void keepAlivePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use limitsGetSignalError() instead")
    void limitsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void limitsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsApiUsageGetSignalError() instead")
    void logsApiUsageGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsApiUsageGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugGetSignalError() instead")
    void logsCodeDebugGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugIdActionsResetDeleteSignalError() instead")
    void logsCodeDebugIdActionsResetDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugIdActionsResetDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugIdActionsResetPostSignalError() instead")
    void logsCodeDebugIdActionsResetPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugIdActionsResetPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugIdFilesGetSignalError() instead")
    void logsCodeDebugIdFilesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugIdFilesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugIdGetSignalError() instead")
    void logsCodeDebugIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugPostSignalError() instead")
    void logsCodeDebugPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeRuntimeGetSignalError() instead")
    void logsCodeRuntimeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeRuntimeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesMessageTypeActionsImportPostSignalError() instead")
    void messagesMessageTypeActionsImportPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void messagesMessageTypeActionsImportPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesMessageTypeLanguageLangActionsExportPostSignalError() instead")
    void messagesMessageTypeLanguageLangActionsExportPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void messagesMessageTypeLanguageLangActionsExportPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataAudittrailAuditTrailTypeGetSignalError() instead")
    void metadataAudittrailAuditTrailTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataAudittrailAuditTrailTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataAudittrailGetSignalError() instead")
    void metadataAudittrailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataAudittrailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataComponentsComponentTypeGetSignalError() instead")
    void metadataComponentsComponentTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataComponentsComponentTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataComponentsGetSignalError() instead")
    void metadataComponentsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataComponentsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsBindersTemplatesBindernodesGetSignalError() instead")
    void metadataObjectsBindersTemplatesBindernodesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsBindersTemplatesBindernodesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsBindersTemplatesGetSignalError() instead")
    void metadataObjectsBindersTemplatesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsBindersTemplatesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalError() instead")
    void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalError() instead")
    void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalError() instead")
    void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalError() instead")
    void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsEventsGetSignalError() instead")
    void metadataObjectsDocumentsEventsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsEventsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsLockGetSignalError() instead")
    void metadataObjectsDocumentsLockGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsLockGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsPropertiesFindCommonPostSignalError() instead")
    void metadataObjectsDocumentsPropertiesFindCommonPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsPropertiesFindCommonPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsPropertiesGetSignalError() instead")
    void metadataObjectsDocumentsPropertiesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsPropertiesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTemplatesGetSignalError() instead")
    void metadataObjectsDocumentsTemplatesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTemplatesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesGetSignalError() instead")
    void metadataObjectsDocumentsTypesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesTypeGetSignalError() instead")
    void metadataObjectsDocumentsTypesTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesTypeRelationshipsGetSignalError() instead")
    void metadataObjectsDocumentsTypesTypeRelationshipsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesTypeRelationshipsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalError() instead")
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalError() instead")
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsGroupsGetSignalError() instead")
    void metadataObjectsGroupsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsGroupsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsSecuritypoliciesGetSignalError() instead")
    void metadataObjectsSecuritypoliciesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsSecuritypoliciesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsUsersGetSignalError() instead")
    void metadataObjectsUsersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsUsersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalError() instead")
    void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalError() instead")
    void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsGetSignalError() instead")
    void metadataVobjectsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNameActionsCanceldeploymentPostSignalError() instead")
    void metadataVobjectsObjectNameActionsCanceldeploymentPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNameActionsCanceldeploymentPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalError() instead")
    void metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNameGetSignalError() instead")
    void metadataVobjectsObjectNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNamePageLayoutsGetSignalError() instead")
    void metadataVobjectsObjectNamePageLayoutsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNamePageLayoutsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalError() instead")
    void metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsHistoriesGetSignalError() instead")
    void notificationsHistoriesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsHistoriesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsActionGetSignalError() instead")
    void objectWorkflowActionsActionGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsActionGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsActionPostSignalError() instead")
    void objectWorkflowActionsActionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsActionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsCanceltasksPostSignalError() instead")
    void objectWorkflowActionsCanceltasksPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsCanceltasksPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsCancelworkflowsPostSignalError() instead")
    void objectWorkflowActionsCancelworkflowsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsCancelworkflowsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsGetSignalError() instead")
    void objectWorkflowActionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsReassigntasksPostSignalError() instead")
    void objectWorkflowActionsReassigntasksPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsReassigntasksPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsReplaceworkflowownerPostSignalError() instead")
    void objectWorkflowActionsReplaceworkflowownerPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsReplaceworkflowownerPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersActionsExportJobIdResultsGetSignalError() instead")
    void objectsBindersActionsExportJobIdResultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersActionsExportJobIdResultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdActionsExportPostSignalError() instead")
    void objectsBindersBinderIdActionsExportPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdActionsExportPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdActionsPostSignalError() instead")
    void objectsBindersBinderIdActionsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdActionsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdBindingRulePutSignalError() instead")
    void objectsBindersBinderIdBindingRulePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdBindingRulePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDeleteSignalError() instead")
    void objectsBindersBinderIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalError() instead")
    void objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDocumentsPostSignalError() instead")
    void objectsBindersBinderIdDocumentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDocumentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDocumentsSectionIdDeleteSignalError() instead")
    void objectsBindersBinderIdDocumentsSectionIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDocumentsSectionIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDocumentsSectionIdPutSignalError() instead")
    void objectsBindersBinderIdDocumentsSectionIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDocumentsSectionIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdGetSignalError() instead")
    void objectsBindersBinderIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdPostSignalError() instead")
    void objectsBindersBinderIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdPutSignalError() instead")
    void objectsBindersBinderIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalError() instead")
    void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalError() instead")
    void objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsNodeIdPutSignalError() instead")
    void objectsBindersBinderIdSectionsNodeIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsNodeIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsPostSignalError() instead")
    void objectsBindersBinderIdSectionsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsSectionIdDeleteSignalError() instead")
    void objectsBindersBinderIdSectionsSectionIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsSectionIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsSectionIdGetSignalError() instead")
    void objectsBindersBinderIdSectionsSectionIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsSectionIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsGetSignalError() instead")
    void objectsBindersBinderIdVersionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalError() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalError() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalError() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalError() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalError() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalError() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalError() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalError() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdRolesGetSignalError() instead")
    void objectsBindersIdRolesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdRolesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdRolesPostSignalError() instead")
    void objectsBindersIdRolesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdRolesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdRolesRoleNameGetSignalError() instead")
    void objectsBindersIdRolesRoleNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdRolesRoleNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalError() instead")
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalError() instead")
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalError() instead")
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersLifecycleActionsPostSignalError() instead")
    void objectsBindersLifecycleActionsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersLifecycleActionsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersLifecycleActionsUserActionNamePutSignalError() instead")
    void objectsBindersLifecycleActionsUserActionNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersLifecycleActionsUserActionNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersPostSignalError() instead")
    void objectsBindersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesGetSignalError() instead")
    void objectsBindersTemplatesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesPostSignalError() instead")
    void objectsBindersTemplatesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesPutSignalError() instead")
    void objectsBindersTemplatesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameBindernodesGetSignalError() instead")
    void objectsBindersTemplatesTemplateNameBindernodesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameBindernodesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameBindernodesPostSignalError() instead")
    void objectsBindersTemplatesTemplateNameBindernodesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameBindernodesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameBindernodesPutSignalError() instead")
    void objectsBindersTemplatesTemplateNameBindernodesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameBindernodesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameDeleteSignalError() instead")
    void objectsBindersTemplatesTemplateNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameGetSignalError() instead")
    void objectsBindersTemplatesTemplateNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDeletionsDocumentsGetSignalError() instead")
    void objectsDeletionsDocumentsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDeletionsDocumentsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDeletionsVobjectsObjectNameGetSignalError() instead")
    void objectsDeletionsVobjectsObjectNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDeletionsVobjectsObjectNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsActionsGetSignalError() instead")
    void objectsDocumentsActionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsActionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalError() instead")
    void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsActionsWorkflowNameGetSignalError() instead")
    void objectsDocumentsActionsWorkflowNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsActionsWorkflowNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsActionsWorkflowNamePostSignalError() instead")
    void objectsDocumentsActionsWorkflowNamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsActionsWorkflowNamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAnnotationsBatchDeleteSignalError() instead")
    void objectsDocumentsAnnotationsBatchDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAnnotationsBatchDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAnnotationsBatchPostSignalError() instead")
    void objectsDocumentsAnnotationsBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAnnotationsBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAnnotationsBatchPutSignalError() instead")
    void objectsDocumentsAnnotationsBatchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAnnotationsBatchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAnnotationsRepliesBatchPostSignalError() instead")
    void objectsDocumentsAnnotationsRepliesBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAnnotationsRepliesBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAttachmentsBatchDeleteSignalError() instead")
    void objectsDocumentsAttachmentsBatchDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAttachmentsBatchDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAttachmentsBatchPostSignalError() instead")
    void objectsDocumentsAttachmentsBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAttachmentsBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAttachmentsBatchPutSignalError() instead")
    void objectsDocumentsAttachmentsBatchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAttachmentsBatchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalError() instead")
    void objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchActionsFileextractPostSignalError() instead")
    void objectsDocumentsBatchActionsFileextractPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchActionsFileextractPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchActionsReclassifyPutSignalError() instead")
    void objectsDocumentsBatchActionsReclassifyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchActionsReclassifyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchActionsRerenderPostSignalError() instead")
    void objectsDocumentsBatchActionsRerenderPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchActionsRerenderPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchDeleteSignalError() instead")
    void objectsDocumentsBatchDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchLockDeleteSignalError() instead")
    void objectsDocumentsBatchLockDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchLockDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchPostSignalError() instead")
    void objectsDocumentsBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchPutSignalError() instead")
    void objectsDocumentsBatchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAnchorsGetSignalError() instead")
    void objectsDocumentsDocIdAnchorsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAnchorsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAnnotationsFileGetSignalError() instead")
    void objectsDocumentsDocIdAnnotationsFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAnnotationsFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAnnotationsFilePostSignalError() instead")
    void objectsDocumentsDocIdAnnotationsFilePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAnnotationsFilePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalError() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalError() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalError() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalError() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalError() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalError() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalError() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalError() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalError() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsFileGetSignalError() instead")
    void objectsDocumentsDocIdAttachmentsFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsGetSignalError() instead")
    void objectsDocumentsDocIdAttachmentsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsPostSignalError() instead")
    void objectsDocumentsDocIdAttachmentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAudittrailGetSignalError() instead")
    void objectsDocumentsDocIdAudittrailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAudittrailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdDeleteSignalError() instead")
    void objectsDocumentsDocIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdEventsGetSignalError() instead")
    void objectsDocumentsDocIdEventsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdEventsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdFileGetSignalError() instead")
    void objectsDocumentsDocIdFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdGetSignalError() instead")
    void objectsDocumentsDocIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdLockDeleteSignalError() instead")
    void objectsDocumentsDocIdLockDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdLockDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdLockGetSignalError() instead")
    void objectsDocumentsDocIdLockGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdLockGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdLockPostSignalError() instead")
    void objectsDocumentsDocIdLockPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdLockPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalError() instead")
    void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdPostSignalError() instead")
    void objectsDocumentsDocIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdPutSignalError() instead")
    void objectsDocumentsDocIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsGetSignalError() instead")
    void objectsDocumentsDocIdRenditionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalError() instead")
    void objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsRenditionTypeGetSignalError() instead")
    void objectsDocumentsDocIdRenditionsRenditionTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsRenditionTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsRenditionTypePostSignalError() instead")
    void objectsDocumentsDocIdRenditionsRenditionTypePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsRenditionTypePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsRenditionTypePutSignalError() instead")
    void objectsDocumentsDocIdRenditionsRenditionTypePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsRenditionTypePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalError() instead")
    void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalError() instead")
    void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsGetSignalError() instead")
    void objectsDocumentsDocIdVersionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalError() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsGetSignalError() instead")
    void objectsDocumentsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdRolesGetSignalError() instead")
    void objectsDocumentsIdRolesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdRolesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdRolesPostSignalError() instead")
    void objectsDocumentsIdRolesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdRolesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdRolesRoleNameGetSignalError() instead")
    void objectsDocumentsIdRolesRoleNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdRolesRoleNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalError() instead")
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalError() instead")
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalError() instead")
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsLifecycleActionsPostSignalError() instead")
    void objectsDocumentsLifecycleActionsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsLifecycleActionsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsLifecycleActionsUserActionNamePutSignalError() instead")
    void objectsDocumentsLifecycleActionsUserActionNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsLifecycleActionsUserActionNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsPostSignalError() instead")
    void objectsDocumentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRelationshipsBatchDeleteSignalError() instead")
    void objectsDocumentsRelationshipsBatchDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRelationshipsBatchDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRelationshipsBatchPostSignalError() instead")
    void objectsDocumentsRelationshipsBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRelationshipsBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRenditionsBatchDeleteSignalError() instead")
    void objectsDocumentsRenditionsBatchDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRenditionsBatchDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRenditionsBatchPostSignalError() instead")
    void objectsDocumentsRenditionsBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRenditionsBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRolesBatchDeleteSignalError() instead")
    void objectsDocumentsRolesBatchDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRolesBatchDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRolesBatchPostSignalError() instead")
    void objectsDocumentsRolesBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRolesBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesGetSignalError() instead")
    void objectsDocumentsTemplatesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesPostSignalError() instead")
    void objectsDocumentsTemplatesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesPutSignalError() instead")
    void objectsDocumentsTemplatesPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesTemplateNameDeleteSignalError() instead")
    void objectsDocumentsTemplatesTemplateNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesTemplateNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesTemplateNameFileGetSignalError() instead")
    void objectsDocumentsTemplatesTemplateNameFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesTemplateNameFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesTemplateNameGetSignalError() instead")
    void objectsDocumentsTemplatesTemplateNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesTemplateNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesTemplateNamePutSignalError() instead")
    void objectsDocumentsTemplatesTemplateNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesTemplateNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTokensPostSignalError() instead")
    void objectsDocumentsTokensPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTokensPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsVersionsBatchActionsFileextractPostSignalError() instead")
    void objectsDocumentsVersionsBatchActionsFileextractPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsVersionsBatchActionsFileextractPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsVersionsBatchDeleteSignalError() instead")
    void objectsDocumentsVersionsBatchDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsVersionsBatchDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsVersionsBatchPostSignalError() instead")
    void objectsDocumentsVersionsBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsVersionsBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDomainGetSignalError() instead")
    void objectsDomainGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDomainGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDomainsGetSignalError() instead")
    void objectsDomainsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDomainsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsEdlMatchedDocumentsBatchActionsAddPostSignalError() instead")
    void objectsEdlMatchedDocumentsBatchActionsAddPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsEdlMatchedDocumentsBatchActionsAddPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsEdlMatchedDocumentsBatchActionsRemovePostSignalError() instead")
    void objectsEdlMatchedDocumentsBatchActionsRemovePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsEdlMatchedDocumentsBatchActionsRemovePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsAutoGetSignalError() instead")
    void objectsGroupsAutoGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsAutoGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsGetSignalError() instead")
    void objectsGroupsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsGroupIdDeleteSignalError() instead")
    void objectsGroupsGroupIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsGroupIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsGroupIdGetSignalError() instead")
    void objectsGroupsGroupIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsGroupIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsGroupIdPutSignalError() instead")
    void objectsGroupsGroupIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsGroupIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsPostSignalError() instead")
    void objectsGroupsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsLicensesGetSignalError() instead")
    void objectsLicensesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsLicensesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsActionsGetSignalError() instead")
    void objectsObjectworkflowsActionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsActionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsActionsWorkflowNameGetSignalError() instead")
    void objectsObjectworkflowsActionsWorkflowNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsActionsWorkflowNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsActionsWorkflowNamePostSignalError() instead")
    void objectsObjectworkflowsActionsWorkflowNamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsActionsWorkflowNamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsGetSignalError() instead")
    void objectsObjectworkflowsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksGetSignalError() instead")
    void objectsObjectworkflowsTasksGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsGetSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdGetSignalError() instead")
    void objectsObjectworkflowsTasksTaskIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsWorkflowIdActionsGetSignalError() instead")
    void objectsObjectworkflowsWorkflowIdActionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsWorkflowIdActionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalError() instead")
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalError() instead")
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsWorkflowIdGetSignalError() instead")
    void objectsObjectworkflowsWorkflowIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsWorkflowIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsGetSignalError() instead")
    void objectsPicklistsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNameGetSignalError() instead")
    void objectsPicklistsPicklistNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNamePicklistValueNameDeleteSignalError() instead")
    void objectsPicklistsPicklistNamePicklistValueNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNamePicklistValueNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNamePicklistValueNamePutSignalError() instead")
    void objectsPicklistsPicklistNamePicklistValueNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNamePicklistValueNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNamePostSignalError() instead")
    void objectsPicklistsPicklistNamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNamePutSignalError() instead")
    void objectsPicklistsPicklistNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxActionsBuildproductionPostSignalError() instead")
    void objectsSandboxActionsBuildproductionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxActionsBuildproductionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxActionsPromoteproductionPostSignalError() instead")
    void objectsSandboxActionsPromoteproductionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxActionsPromoteproductionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxActionsRecheckusagePostSignalError() instead")
    void objectsSandboxActionsRecheckusagePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxActionsRecheckusagePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxBatchChangesizePostSignalError() instead")
    void objectsSandboxBatchChangesizePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxBatchChangesizePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxEntitlementsSetPostSignalError() instead")
    void objectsSandboxEntitlementsSetPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxEntitlementsSetPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxGetSignalError() instead")
    void objectsSandboxGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxNameDeleteSignalError() instead")
    void objectsSandboxNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxPostSignalError() instead")
    void objectsSandboxPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotApiNameActionsUpdatePostSignalError() instead")
    void objectsSandboxSnapshotApiNameActionsUpdatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotApiNameActionsUpdatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotApiNameActionsUpgradePostSignalError() instead")
    void objectsSandboxSnapshotApiNameActionsUpgradePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotApiNameActionsUpgradePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotApiNameDeleteSignalError() instead")
    void objectsSandboxSnapshotApiNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotApiNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotGetSignalError() instead")
    void objectsSandboxSnapshotGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotPostSignalError() instead")
    void objectsSandboxSnapshotPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxVaultIdActionsRefreshPostSignalError() instead")
    void objectsSandboxVaultIdActionsRefreshPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxVaultIdActionsRefreshPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxVaultIdGetSignalError() instead")
    void objectsSandboxVaultIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxVaultIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSecuritypoliciesGetSignalError() instead")
    void objectsSecuritypoliciesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSecuritypoliciesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSecuritypoliciesSecurityPolicyNameGetSignalError() instead")
    void objectsSecuritypoliciesSecurityPolicyNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSecuritypoliciesSecurityPolicyNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersGetSignalError() instead")
    void objectsUsersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersIdGetSignalError() instead")
    void objectsUsersIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersIdPermissionsGetSignalError() instead")
    void objectsUsersIdPermissionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersIdPermissionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersIdPutSignalError() instead")
    void objectsUsersIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersMeGetSignalError() instead")
    void objectsUsersMeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersMeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersMePasswordPostSignalError() instead")
    void objectsUsersMePasswordPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersMePasswordPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersMePermissionsGetSignalError() instead")
    void objectsUsersMePermissionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersMePermissionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersMePutSignalError() instead")
    void objectsUsersMePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersMePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersPostSignalError() instead")
    void objectsUsersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersPutSignalError() instead")
    void objectsUsersPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersUserIdDeleteSignalError() instead")
    void objectsUsersUserIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersUserIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersUserIdVaultMembershipVaultIdPutSignalError() instead")
    void objectsUsersUserIdVaultMembershipVaultIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersUserIdVaultMembershipVaultIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsVaultActionsComparePostSignalError() instead")
    void objectsVaultActionsComparePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsVaultActionsComparePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsVaultActionsConfigreportPostSignalError() instead")
    void objectsVaultActionsConfigreportPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void objectsVaultActionsConfigreportPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryComponentsPostSignalError() instead")
    void queryComponentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void queryComponentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryNextPagePostSignalError() instead")
    void queryNextPagePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void queryNextPagePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPostSignalError() instead")
    void queryPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void queryPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPreviousPagePostSignalError() instead")
    void queryPreviousPagePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void queryPreviousPagePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2MeGetSignalError() instead")
    void scimV2MeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2MeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2MePutSignalError() instead")
    void scimV2MePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2MePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2ResourceTypesGetSignalError() instead")
    void scimV2ResourceTypesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2ResourceTypesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2ResourceTypesTypeGetSignalError() instead")
    void scimV2ResourceTypesTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2ResourceTypesTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2SchemasGetSignalError() instead")
    void scimV2SchemasGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2SchemasGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2SchemasIdGetSignalError() instead")
    void scimV2SchemasIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2SchemasIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2ServiceProviderConfigGetSignalError() instead")
    void scimV2ServiceProviderConfigGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2ServiceProviderConfigGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2TypeGetSignalError() instead")
    void scimV2TypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2TypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2TypeIdGetSignalError() instead")
    void scimV2TypeIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2TypeIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2UsersGetSignalError() instead")
    void scimV2UsersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2UsersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2UsersIdGetSignalError() instead")
    void scimV2UsersIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2UsersIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2UsersIdPutSignalError() instead")
    void scimV2UsersIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2UsersIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2UsersPostSignalError() instead")
    void scimV2UsersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2UsersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCertificateCertIdGetSignalError() instead")
    void servicesCertificateCertIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCertificateCertIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesConfigurationModeActionsDisablePostSignalError() instead")
    void servicesConfigurationModeActionsDisablePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesConfigurationModeActionsDisablePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesConfigurationModeActionsEnablePostSignalError() instead")
    void servicesConfigurationModeActionsEnablePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesConfigurationModeActionsEnablePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDirectdataFilesGetSignalError() instead")
    void servicesDirectdataFilesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDirectdataFilesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDirectdataFilesNameGetSignalError() instead")
    void servicesDirectdataFilesNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDirectdataFilesNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsContentItemGetSignalError() instead")
    void servicesFileStagingItemsContentItemGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsContentItemGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsItemDeleteSignalError() instead")
    void servicesFileStagingItemsItemDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsItemDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsItemGetSignalError() instead")
    void servicesFileStagingItemsItemGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsItemGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsItemPutSignalError() instead")
    void servicesFileStagingItemsItemPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsItemPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsPostSignalError() instead")
    void servicesFileStagingItemsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadGetSignalError() instead")
    void servicesFileStagingUploadGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadPostSignalError() instead")
    void servicesFileStagingUploadPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdDeleteSignalError() instead")
    void servicesFileStagingUploadUploadSessionIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdGetSignalError() instead")
    void servicesFileStagingUploadUploadSessionIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdPartsGetSignalError() instead")
    void servicesFileStagingUploadUploadSessionIdPartsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdPartsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdPostSignalError() instead")
    void servicesFileStagingUploadUploadSessionIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdPutSignalError() instead")
    void servicesFileStagingUploadUploadSessionIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsHistoriesGetSignalError() instead")
    void servicesJobsHistoriesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsHistoriesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsJobIdErrorsGetSignalError() instead")
    void servicesJobsJobIdErrorsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsJobIdErrorsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsJobIdGetSignalError() instead")
    void servicesJobsJobIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsJobIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsJobIdSummaryGetSignalError() instead")
    void servicesJobsJobIdSummaryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsJobIdSummaryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsJobIdTasksGetSignalError() instead")
    void servicesJobsJobIdTasksGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsJobIdTasksGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsMonitorsGetSignalError() instead")
    void servicesJobsMonitorsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsMonitorsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsStartNowJobIdPostSignalError() instead")
    void servicesJobsStartNowJobIdPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsStartNowJobIdPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderExtractPostSignalError() instead")
    void servicesLoaderExtractPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderExtractPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderJobIdTasksTaskIdFailurelogGetSignalError() instead")
    void servicesLoaderJobIdTasksTaskIdFailurelogGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderJobIdTasksTaskIdFailurelogGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderJobIdTasksTaskIdResultsGetSignalError() instead")
    void servicesLoaderJobIdTasksTaskIdResultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderJobIdTasksTaskIdResultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalError() instead")
    void servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalError() instead")
    void servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderLoadPostSignalError() instead")
    void servicesLoaderLoadPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderLoadPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesPackageActionsValidatePostSignalError() instead")
    void servicesPackageActionsValidatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesPackageActionsValidatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesPackagePostSignalError() instead")
    void servicesPackagePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesPackagePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesPackagePutSignalError() instead")
    void servicesPackagePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesPackagePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesGetSignalError() instead")
    void servicesQueuesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesQueueNameActionsDisableDeliveryPutSignalError() instead")
    void servicesQueuesQueueNameActionsDisableDeliveryPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesQueueNameActionsDisableDeliveryPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesQueueNameActionsEnableDeliveryPutSignalError() instead")
    void servicesQueuesQueueNameActionsEnableDeliveryPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesQueueNameActionsEnableDeliveryPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesQueueNameActionsResetPutSignalError() instead")
    void servicesQueuesQueueNameActionsResetPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesQueueNameActionsResetPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesQueueNameGetSignalError() instead")
    void servicesQueuesQueueNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesQueueNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalError() instead")
    void servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionDeleteSignalError() instead")
    void sessionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sessionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsDistributionNameCodeGetSignalError() instead")
    void uicodeDistributionsDistributionNameCodeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsDistributionNameCodeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsDistributionNameDeleteSignalError() instead")
    void uicodeDistributionsDistributionNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsDistributionNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsDistributionNameGetSignalError() instead")
    void uicodeDistributionsDistributionNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsDistributionNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsGetSignalError() instead")
    void uicodeDistributionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsPostSignalError() instead")
    void uicodeDistributionsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectVaultPackageVPackageIdActionsDeployPostSignalError() instead")
    void vobjectVaultPackageVPackageIdActionsDeployPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectVaultPackageVPackageIdActionsDeployPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalError() instead")
    void vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalError() instead")
    void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalError() instead")
    void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsEdlItemVActionsCreateplaceholderPostSignalError() instead")
    void vobjectsEdlItemVActionsCreateplaceholderPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsEdlItemVActionsCreateplaceholderPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsMergesJobIdLogGetSignalError() instead")
    void vobjectsMergesJobIdLogGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsMergesJobIdLogGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsMergesJobIdResultsGetSignalError() instead")
    void vobjectsMergesJobIdResultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsMergesJobIdResultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsMergesJobIdStatusGetSignalError() instead")
    void vobjectsMergesJobIdStatusGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsMergesJobIdStatusGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsActionNamePostSignalError() instead")
    void vobjectsObjectNameActionsActionNamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsActionNamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsChangetypePostSignalError() instead")
    void vobjectsObjectNameActionsChangetypePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsChangetypePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsMergePostSignalError() instead")
    void vobjectsObjectNameActionsMergePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsMergePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsRecalculaterollupsGetSignalError() instead")
    void vobjectsObjectNameActionsRecalculaterollupsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsRecalculaterollupsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsRecalculaterollupsPostSignalError() instead")
    void vobjectsObjectNameActionsRecalculaterollupsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsRecalculaterollupsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalError() instead")
    void vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameAttachmentsBatchDeleteSignalError() instead")
    void vobjectsObjectNameAttachmentsBatchDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameAttachmentsBatchDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameAttachmentsBatchPostSignalError() instead")
    void vobjectsObjectNameAttachmentsBatchPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameAttachmentsBatchPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameAttachmentsBatchPutSignalError() instead")
    void vobjectsObjectNameAttachmentsBatchPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameAttachmentsBatchPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameDeleteSignalError() instead")
    void vobjectsObjectNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameIdRolesRoleNameGetSignalError() instead")
    void vobjectsObjectNameIdRolesRoleNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameIdRolesRoleNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalError() instead")
    void vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalError() instead")
    void vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalError() instead")
    void vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdActionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsPostSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAudittrailGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdAudittrailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAudittrailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdGetSignalError() instead")
    void vobjectsObjectNameObjectRecordIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNamePostSignalError() instead")
    void vobjectsObjectNamePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNamePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNamePutSignalError() instead")
    void vobjectsObjectNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameRolesDeleteSignalError() instead")
    void vobjectsObjectNameRolesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameRolesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameRolesPostSignalError() instead")
    void vobjectsObjectNameRolesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameRolesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsOutboundPackageVPackageIdDependenciesGetSignalError() instead")
    void vobjectsOutboundPackageVPackageIdDependenciesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsOutboundPackageVPackageIdDependenciesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiGetSignalErrorFull() instead")
    void apiGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalErrorFull() instead")
    void apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlComponentsComponentTypeAndRecordNameGetSignalErrorFull() instead")
    void apiMdlComponentsComponentTypeAndRecordNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlComponentsComponentTypeAndRecordNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlExecuteAsyncJobIdResultsGetSignalErrorFull() instead")
    void apiMdlExecuteAsyncJobIdResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlExecuteAsyncJobIdResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlExecuteAsyncPostSignalErrorFull() instead")
    void apiMdlExecuteAsyncPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlExecuteAsyncPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlExecutePostSignalErrorFull() instead")
    void apiMdlExecutePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlExecutePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiMdlFilesPostSignalErrorFull() instead")
    void apiMdlFilesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiMdlFilesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use audittrailAuditTrailTypeGetSignalErrorFull() instead")
    void audittrailAuditTrailTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void audittrailAuditTrailTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authDiscoveryPostSignalErrorFull() instead")
    void authDiscoveryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authDiscoveryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authOauthSessionOathOidcProfileIdPostSignalErrorFull() instead")
    void authOauthSessionOathOidcProfileIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authOauthSessionOathOidcProfileIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authPostSignalErrorFull() instead")
    void authPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeClassNameDeleteSignalErrorFull() instead")
    void codeClassNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeClassNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeClassNameDisablePutSignalErrorFull() instead")
    void codeClassNameDisablePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeClassNameDisablePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeClassNameEnablePutSignalErrorFull() instead")
    void codeClassNameEnablePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeClassNameEnablePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeClassNameGetSignalErrorFull() instead")
    void codeClassNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeClassNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerGetSignalErrorFull() instead")
    void codeProfilerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerPostSignalErrorFull() instead")
    void codeProfilerPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerSessionNameActionsEndPostSignalErrorFull() instead")
    void codeProfilerSessionNameActionsEndPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerSessionNameActionsEndPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerSessionNameDeleteSignalErrorFull() instead")
    void codeProfilerSessionNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerSessionNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerSessionNameGetSignalErrorFull() instead")
    void codeProfilerSessionNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerSessionNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codeProfilerSessionNameResultsGetSignalErrorFull() instead")
    void codeProfilerSessionNameResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codeProfilerSessionNameResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use codePutSignalErrorFull() instead")
    void codePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void codePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalErrorFull() instead")
    void compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compositesTreesEdlHierarchyOrTemplateGetSignalErrorFull() instead")
    void compositesTreesEdlHierarchyOrTemplateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compositesTreesEdlHierarchyOrTemplateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalErrorFull() instead")
    void compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalErrorFull() instead")
    void compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationComponentTypeAndRecordNameGetSignalErrorFull() instead")
    void configurationComponentTypeAndRecordNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationComponentTypeAndRecordNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationComponentTypeGetSignalErrorFull() instead")
    void configurationComponentTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationComponentTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationObjectNameAndObjectTypeGetSignalErrorFull() instead")
    void configurationObjectNameAndObjectTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationObjectNameAndObjectTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationObjecttypeGetSignalErrorFull() instead")
    void configurationObjecttypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationObjecttypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationRoleAssignmentRuleDeleteSignalErrorFull() instead")
    void configurationRoleAssignmentRuleDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationRoleAssignmentRuleDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationRoleAssignmentRuleGetSignalErrorFull() instead")
    void configurationRoleAssignmentRuleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationRoleAssignmentRuleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationRoleAssignmentRulePostSignalErrorFull() instead")
    void configurationRoleAssignmentRulePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationRoleAssignmentRulePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationRoleAssignmentRulePutSignalErrorFull() instead")
    void configurationRoleAssignmentRulePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationRoleAssignmentRulePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delegationLoginPostSignalErrorFull() instead")
    void delegationLoginPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delegationLoginPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use delegationVaultsGetSignalErrorFull() instead")
    void delegationVaultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void delegationVaultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use keepAlivePostSignalErrorFull() instead")
    void keepAlivePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void keepAlivePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use limitsGetSignalErrorFull() instead")
    void limitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void limitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsApiUsageGetSignalErrorFull() instead")
    void logsApiUsageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsApiUsageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugGetSignalErrorFull() instead")
    void logsCodeDebugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugIdActionsResetDeleteSignalErrorFull() instead")
    void logsCodeDebugIdActionsResetDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugIdActionsResetDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugIdActionsResetPostSignalErrorFull() instead")
    void logsCodeDebugIdActionsResetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugIdActionsResetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugIdFilesGetSignalErrorFull() instead")
    void logsCodeDebugIdFilesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugIdFilesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugIdGetSignalErrorFull() instead")
    void logsCodeDebugIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeDebugPostSignalErrorFull() instead")
    void logsCodeDebugPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeDebugPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logsCodeRuntimeGetSignalErrorFull() instead")
    void logsCodeRuntimeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logsCodeRuntimeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesMessageTypeActionsImportPostSignalErrorFull() instead")
    void messagesMessageTypeActionsImportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesMessageTypeActionsImportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use messagesMessageTypeLanguageLangActionsExportPostSignalErrorFull() instead")
    void messagesMessageTypeLanguageLangActionsExportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void messagesMessageTypeLanguageLangActionsExportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataAudittrailAuditTrailTypeGetSignalErrorFull() instead")
    void metadataAudittrailAuditTrailTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataAudittrailAuditTrailTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataAudittrailGetSignalErrorFull() instead")
    void metadataAudittrailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataAudittrailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataComponentsComponentTypeGetSignalErrorFull() instead")
    void metadataComponentsComponentTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataComponentsComponentTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataComponentsGetSignalErrorFull() instead")
    void metadataComponentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataComponentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsBindersTemplatesBindernodesGetSignalErrorFull() instead")
    void metadataObjectsBindersTemplatesBindernodesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsBindersTemplatesBindernodesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsBindersTemplatesGetSignalErrorFull() instead")
    void metadataObjectsBindersTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsBindersTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalErrorFull() instead")
    void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalErrorFull() instead")
    void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalErrorFull() instead")
    void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalErrorFull() instead")
    void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsEventsGetSignalErrorFull() instead")
    void metadataObjectsDocumentsEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsLockGetSignalErrorFull() instead")
    void metadataObjectsDocumentsLockGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsLockGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsPropertiesFindCommonPostSignalErrorFull() instead")
    void metadataObjectsDocumentsPropertiesFindCommonPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsPropertiesFindCommonPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsPropertiesGetSignalErrorFull() instead")
    void metadataObjectsDocumentsPropertiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsPropertiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTemplatesGetSignalErrorFull() instead")
    void metadataObjectsDocumentsTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesGetSignalErrorFull() instead")
    void metadataObjectsDocumentsTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesTypeGetSignalErrorFull() instead")
    void metadataObjectsDocumentsTypesTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesTypeRelationshipsGetSignalErrorFull() instead")
    void metadataObjectsDocumentsTypesTypeRelationshipsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesTypeRelationshipsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalErrorFull() instead")
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalErrorFull() instead")
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsGroupsGetSignalErrorFull() instead")
    void metadataObjectsGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsSecuritypoliciesGetSignalErrorFull() instead")
    void metadataObjectsSecuritypoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsSecuritypoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataObjectsUsersGetSignalErrorFull() instead")
    void metadataObjectsUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataObjectsUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalErrorFull() instead")
    void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalErrorFull() instead")
    void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsGetSignalErrorFull() instead")
    void metadataVobjectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNameActionsCanceldeploymentPostSignalErrorFull() instead")
    void metadataVobjectsObjectNameActionsCanceldeploymentPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNameActionsCanceldeploymentPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalErrorFull() instead")
    void metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNameGetSignalErrorFull() instead")
    void metadataVobjectsObjectNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNamePageLayoutsGetSignalErrorFull() instead")
    void metadataVobjectsObjectNamePageLayoutsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNamePageLayoutsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalErrorFull() instead")
    void metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsHistoriesGetSignalErrorFull() instead")
    void notificationsHistoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsHistoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsActionGetSignalErrorFull() instead")
    void objectWorkflowActionsActionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsActionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsActionPostSignalErrorFull() instead")
    void objectWorkflowActionsActionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsActionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsCanceltasksPostSignalErrorFull() instead")
    void objectWorkflowActionsCanceltasksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsCanceltasksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsCancelworkflowsPostSignalErrorFull() instead")
    void objectWorkflowActionsCancelworkflowsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsCancelworkflowsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsGetSignalErrorFull() instead")
    void objectWorkflowActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsReassigntasksPostSignalErrorFull() instead")
    void objectWorkflowActionsReassigntasksPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsReassigntasksPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectWorkflowActionsReplaceworkflowownerPostSignalErrorFull() instead")
    void objectWorkflowActionsReplaceworkflowownerPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectWorkflowActionsReplaceworkflowownerPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersActionsExportJobIdResultsGetSignalErrorFull() instead")
    void objectsBindersActionsExportJobIdResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersActionsExportJobIdResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdActionsExportPostSignalErrorFull() instead")
    void objectsBindersBinderIdActionsExportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdActionsExportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdActionsPostSignalErrorFull() instead")
    void objectsBindersBinderIdActionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdActionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdBindingRulePutSignalErrorFull() instead")
    void objectsBindersBinderIdBindingRulePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdBindingRulePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDeleteSignalErrorFull() instead")
    void objectsBindersBinderIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalErrorFull() instead")
    void objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDocumentsPostSignalErrorFull() instead")
    void objectsBindersBinderIdDocumentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDocumentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDocumentsSectionIdDeleteSignalErrorFull() instead")
    void objectsBindersBinderIdDocumentsSectionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDocumentsSectionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdDocumentsSectionIdPutSignalErrorFull() instead")
    void objectsBindersBinderIdDocumentsSectionIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdDocumentsSectionIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdGetSignalErrorFull() instead")
    void objectsBindersBinderIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdPostSignalErrorFull() instead")
    void objectsBindersBinderIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdPutSignalErrorFull() instead")
    void objectsBindersBinderIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalErrorFull() instead")
    void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalErrorFull() instead")
    void objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsNodeIdPutSignalErrorFull() instead")
    void objectsBindersBinderIdSectionsNodeIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsNodeIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsPostSignalErrorFull() instead")
    void objectsBindersBinderIdSectionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsSectionIdDeleteSignalErrorFull() instead")
    void objectsBindersBinderIdSectionsSectionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsSectionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdSectionsSectionIdGetSignalErrorFull() instead")
    void objectsBindersBinderIdSectionsSectionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdSectionsSectionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsGetSignalErrorFull() instead")
    void objectsBindersBinderIdVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalErrorFull() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalErrorFull() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalErrorFull() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalErrorFull() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalErrorFull() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalErrorFull() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalErrorFull() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalErrorFull() instead")
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdRolesGetSignalErrorFull() instead")
    void objectsBindersIdRolesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdRolesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdRolesPostSignalErrorFull() instead")
    void objectsBindersIdRolesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdRolesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdRolesRoleNameGetSignalErrorFull() instead")
    void objectsBindersIdRolesRoleNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdRolesRoleNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalErrorFull() instead")
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalErrorFull() instead")
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalErrorFull() instead")
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersLifecycleActionsPostSignalErrorFull() instead")
    void objectsBindersLifecycleActionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersLifecycleActionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersLifecycleActionsUserActionNamePutSignalErrorFull() instead")
    void objectsBindersLifecycleActionsUserActionNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersLifecycleActionsUserActionNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersPostSignalErrorFull() instead")
    void objectsBindersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesGetSignalErrorFull() instead")
    void objectsBindersTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesPostSignalErrorFull() instead")
    void objectsBindersTemplatesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesPutSignalErrorFull() instead")
    void objectsBindersTemplatesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameBindernodesGetSignalErrorFull() instead")
    void objectsBindersTemplatesTemplateNameBindernodesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameBindernodesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameBindernodesPostSignalErrorFull() instead")
    void objectsBindersTemplatesTemplateNameBindernodesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameBindernodesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameBindernodesPutSignalErrorFull() instead")
    void objectsBindersTemplatesTemplateNameBindernodesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameBindernodesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameDeleteSignalErrorFull() instead")
    void objectsBindersTemplatesTemplateNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsBindersTemplatesTemplateNameGetSignalErrorFull() instead")
    void objectsBindersTemplatesTemplateNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsBindersTemplatesTemplateNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDeletionsDocumentsGetSignalErrorFull() instead")
    void objectsDeletionsDocumentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDeletionsDocumentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDeletionsVobjectsObjectNameGetSignalErrorFull() instead")
    void objectsDeletionsVobjectsObjectNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDeletionsVobjectsObjectNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsActionsGetSignalErrorFull() instead")
    void objectsDocumentsActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalErrorFull() instead")
    void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsActionsWorkflowNameGetSignalErrorFull() instead")
    void objectsDocumentsActionsWorkflowNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsActionsWorkflowNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsActionsWorkflowNamePostSignalErrorFull() instead")
    void objectsDocumentsActionsWorkflowNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsActionsWorkflowNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAnnotationsBatchDeleteSignalErrorFull() instead")
    void objectsDocumentsAnnotationsBatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAnnotationsBatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAnnotationsBatchPostSignalErrorFull() instead")
    void objectsDocumentsAnnotationsBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAnnotationsBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAnnotationsBatchPutSignalErrorFull() instead")
    void objectsDocumentsAnnotationsBatchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAnnotationsBatchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAnnotationsRepliesBatchPostSignalErrorFull() instead")
    void objectsDocumentsAnnotationsRepliesBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAnnotationsRepliesBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAttachmentsBatchDeleteSignalErrorFull() instead")
    void objectsDocumentsAttachmentsBatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAttachmentsBatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAttachmentsBatchPostSignalErrorFull() instead")
    void objectsDocumentsAttachmentsBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAttachmentsBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsAttachmentsBatchPutSignalErrorFull() instead")
    void objectsDocumentsAttachmentsBatchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsAttachmentsBatchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalErrorFull() instead")
    void objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchActionsFileextractPostSignalErrorFull() instead")
    void objectsDocumentsBatchActionsFileextractPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchActionsFileextractPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchActionsReclassifyPutSignalErrorFull() instead")
    void objectsDocumentsBatchActionsReclassifyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchActionsReclassifyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchActionsRerenderPostSignalErrorFull() instead")
    void objectsDocumentsBatchActionsRerenderPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchActionsRerenderPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchDeleteSignalErrorFull() instead")
    void objectsDocumentsBatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchLockDeleteSignalErrorFull() instead")
    void objectsDocumentsBatchLockDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchLockDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchPostSignalErrorFull() instead")
    void objectsDocumentsBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsBatchPutSignalErrorFull() instead")
    void objectsDocumentsBatchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsBatchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAnchorsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAnchorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAnchorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAnnotationsFileGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAnnotationsFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAnnotationsFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAnnotationsFilePostSignalErrorFull() instead")
    void objectsDocumentsDocIdAnnotationsFilePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAnnotationsFilePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsFileGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAttachmentsPostSignalErrorFull() instead")
    void objectsDocumentsDocIdAttachmentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAttachmentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdAudittrailGetSignalErrorFull() instead")
    void objectsDocumentsDocIdAudittrailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdAudittrailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdDeleteSignalErrorFull() instead")
    void objectsDocumentsDocIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdEventsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdEventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdEventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdFileGetSignalErrorFull() instead")
    void objectsDocumentsDocIdFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdGetSignalErrorFull() instead")
    void objectsDocumentsDocIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdLockDeleteSignalErrorFull() instead")
    void objectsDocumentsDocIdLockDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdLockDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdLockGetSignalErrorFull() instead")
    void objectsDocumentsDocIdLockGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdLockGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdLockPostSignalErrorFull() instead")
    void objectsDocumentsDocIdLockPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdLockPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalErrorFull() instead")
    void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdPostSignalErrorFull() instead")
    void objectsDocumentsDocIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdPutSignalErrorFull() instead")
    void objectsDocumentsDocIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdRenditionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalErrorFull() instead")
    void objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsRenditionTypeGetSignalErrorFull() instead")
    void objectsDocumentsDocIdRenditionsRenditionTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsRenditionTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsRenditionTypePostSignalErrorFull() instead")
    void objectsDocumentsDocIdRenditionsRenditionTypePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsRenditionTypePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRenditionsRenditionTypePutSignalErrorFull() instead")
    void objectsDocumentsDocIdRenditionsRenditionTypePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRenditionsRenditionTypePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalErrorFull() instead")
    void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalErrorFull() instead")
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsGetSignalErrorFull() instead")
    void objectsDocumentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdRolesGetSignalErrorFull() instead")
    void objectsDocumentsIdRolesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdRolesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdRolesPostSignalErrorFull() instead")
    void objectsDocumentsIdRolesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdRolesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdRolesRoleNameGetSignalErrorFull() instead")
    void objectsDocumentsIdRolesRoleNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdRolesRoleNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalErrorFull() instead")
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalErrorFull() instead")
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalErrorFull() instead")
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsLifecycleActionsPostSignalErrorFull() instead")
    void objectsDocumentsLifecycleActionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsLifecycleActionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsLifecycleActionsUserActionNamePutSignalErrorFull() instead")
    void objectsDocumentsLifecycleActionsUserActionNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsLifecycleActionsUserActionNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsPostSignalErrorFull() instead")
    void objectsDocumentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRelationshipsBatchDeleteSignalErrorFull() instead")
    void objectsDocumentsRelationshipsBatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRelationshipsBatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRelationshipsBatchPostSignalErrorFull() instead")
    void objectsDocumentsRelationshipsBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRelationshipsBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRenditionsBatchDeleteSignalErrorFull() instead")
    void objectsDocumentsRenditionsBatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRenditionsBatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRenditionsBatchPostSignalErrorFull() instead")
    void objectsDocumentsRenditionsBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRenditionsBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRolesBatchDeleteSignalErrorFull() instead")
    void objectsDocumentsRolesBatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRolesBatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsRolesBatchPostSignalErrorFull() instead")
    void objectsDocumentsRolesBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsRolesBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesGetSignalErrorFull() instead")
    void objectsDocumentsTemplatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesPostSignalErrorFull() instead")
    void objectsDocumentsTemplatesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesPutSignalErrorFull() instead")
    void objectsDocumentsTemplatesPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesTemplateNameDeleteSignalErrorFull() instead")
    void objectsDocumentsTemplatesTemplateNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesTemplateNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesTemplateNameFileGetSignalErrorFull() instead")
    void objectsDocumentsTemplatesTemplateNameFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesTemplateNameFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesTemplateNameGetSignalErrorFull() instead")
    void objectsDocumentsTemplatesTemplateNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesTemplateNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTemplatesTemplateNamePutSignalErrorFull() instead")
    void objectsDocumentsTemplatesTemplateNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTemplatesTemplateNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsTokensPostSignalErrorFull() instead")
    void objectsDocumentsTokensPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsTokensPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsVersionsBatchActionsFileextractPostSignalErrorFull() instead")
    void objectsDocumentsVersionsBatchActionsFileextractPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsVersionsBatchActionsFileextractPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsVersionsBatchDeleteSignalErrorFull() instead")
    void objectsDocumentsVersionsBatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsVersionsBatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDocumentsVersionsBatchPostSignalErrorFull() instead")
    void objectsDocumentsVersionsBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDocumentsVersionsBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDomainGetSignalErrorFull() instead")
    void objectsDomainGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDomainGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsDomainsGetSignalErrorFull() instead")
    void objectsDomainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsDomainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsEdlMatchedDocumentsBatchActionsAddPostSignalErrorFull() instead")
    void objectsEdlMatchedDocumentsBatchActionsAddPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsEdlMatchedDocumentsBatchActionsAddPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsEdlMatchedDocumentsBatchActionsRemovePostSignalErrorFull() instead")
    void objectsEdlMatchedDocumentsBatchActionsRemovePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsEdlMatchedDocumentsBatchActionsRemovePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsAutoGetSignalErrorFull() instead")
    void objectsGroupsAutoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsAutoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsGetSignalErrorFull() instead")
    void objectsGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsGroupIdDeleteSignalErrorFull() instead")
    void objectsGroupsGroupIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsGroupIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsGroupIdGetSignalErrorFull() instead")
    void objectsGroupsGroupIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsGroupIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsGroupIdPutSignalErrorFull() instead")
    void objectsGroupsGroupIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsGroupIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsGroupsPostSignalErrorFull() instead")
    void objectsGroupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsGroupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsLicensesGetSignalErrorFull() instead")
    void objectsLicensesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsLicensesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsActionsGetSignalErrorFull() instead")
    void objectsObjectworkflowsActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsActionsWorkflowNameGetSignalErrorFull() instead")
    void objectsObjectworkflowsActionsWorkflowNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsActionsWorkflowNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsActionsWorkflowNamePostSignalErrorFull() instead")
    void objectsObjectworkflowsActionsWorkflowNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsActionsWorkflowNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsGetSignalErrorFull() instead")
    void objectsObjectworkflowsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksGetSignalErrorFull() instead")
    void objectsObjectworkflowsTasksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsGetSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsTasksTaskIdGetSignalErrorFull() instead")
    void objectsObjectworkflowsTasksTaskIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsTasksTaskIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsWorkflowIdActionsGetSignalErrorFull() instead")
    void objectsObjectworkflowsWorkflowIdActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsWorkflowIdActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalErrorFull() instead")
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalErrorFull() instead")
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsObjectworkflowsWorkflowIdGetSignalErrorFull() instead")
    void objectsObjectworkflowsWorkflowIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsObjectworkflowsWorkflowIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsGetSignalErrorFull() instead")
    void objectsPicklistsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNameGetSignalErrorFull() instead")
    void objectsPicklistsPicklistNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNamePicklistValueNameDeleteSignalErrorFull() instead")
    void objectsPicklistsPicklistNamePicklistValueNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNamePicklistValueNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNamePicklistValueNamePutSignalErrorFull() instead")
    void objectsPicklistsPicklistNamePicklistValueNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNamePicklistValueNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNamePostSignalErrorFull() instead")
    void objectsPicklistsPicklistNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsPicklistsPicklistNamePutSignalErrorFull() instead")
    void objectsPicklistsPicklistNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsPicklistsPicklistNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxActionsBuildproductionPostSignalErrorFull() instead")
    void objectsSandboxActionsBuildproductionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxActionsBuildproductionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxActionsPromoteproductionPostSignalErrorFull() instead")
    void objectsSandboxActionsPromoteproductionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxActionsPromoteproductionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxActionsRecheckusagePostSignalErrorFull() instead")
    void objectsSandboxActionsRecheckusagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxActionsRecheckusagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxBatchChangesizePostSignalErrorFull() instead")
    void objectsSandboxBatchChangesizePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxBatchChangesizePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxEntitlementsSetPostSignalErrorFull() instead")
    void objectsSandboxEntitlementsSetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxEntitlementsSetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxGetSignalErrorFull() instead")
    void objectsSandboxGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxNameDeleteSignalErrorFull() instead")
    void objectsSandboxNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxPostSignalErrorFull() instead")
    void objectsSandboxPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotApiNameActionsUpdatePostSignalErrorFull() instead")
    void objectsSandboxSnapshotApiNameActionsUpdatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotApiNameActionsUpdatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotApiNameActionsUpgradePostSignalErrorFull() instead")
    void objectsSandboxSnapshotApiNameActionsUpgradePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotApiNameActionsUpgradePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotApiNameDeleteSignalErrorFull() instead")
    void objectsSandboxSnapshotApiNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotApiNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotGetSignalErrorFull() instead")
    void objectsSandboxSnapshotGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxSnapshotPostSignalErrorFull() instead")
    void objectsSandboxSnapshotPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxSnapshotPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxVaultIdActionsRefreshPostSignalErrorFull() instead")
    void objectsSandboxVaultIdActionsRefreshPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxVaultIdActionsRefreshPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSandboxVaultIdGetSignalErrorFull() instead")
    void objectsSandboxVaultIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSandboxVaultIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSecuritypoliciesGetSignalErrorFull() instead")
    void objectsSecuritypoliciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSecuritypoliciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsSecuritypoliciesSecurityPolicyNameGetSignalErrorFull() instead")
    void objectsSecuritypoliciesSecurityPolicyNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsSecuritypoliciesSecurityPolicyNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersGetSignalErrorFull() instead")
    void objectsUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersIdGetSignalErrorFull() instead")
    void objectsUsersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersIdPermissionsGetSignalErrorFull() instead")
    void objectsUsersIdPermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersIdPermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersIdPutSignalErrorFull() instead")
    void objectsUsersIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersMeGetSignalErrorFull() instead")
    void objectsUsersMeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersMeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersMePasswordPostSignalErrorFull() instead")
    void objectsUsersMePasswordPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersMePasswordPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersMePermissionsGetSignalErrorFull() instead")
    void objectsUsersMePermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersMePermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersMePutSignalErrorFull() instead")
    void objectsUsersMePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersMePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersPostSignalErrorFull() instead")
    void objectsUsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersPutSignalErrorFull() instead")
    void objectsUsersPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersUserIdDeleteSignalErrorFull() instead")
    void objectsUsersUserIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersUserIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsUsersUserIdVaultMembershipVaultIdPutSignalErrorFull() instead")
    void objectsUsersUserIdVaultMembershipVaultIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsUsersUserIdVaultMembershipVaultIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsVaultActionsComparePostSignalErrorFull() instead")
    void objectsVaultActionsComparePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsVaultActionsComparePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use objectsVaultActionsConfigreportPostSignalErrorFull() instead")
    void objectsVaultActionsConfigreportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void objectsVaultActionsConfigreportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryComponentsPostSignalErrorFull() instead")
    void queryComponentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryComponentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryNextPagePostSignalErrorFull() instead")
    void queryNextPagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryNextPagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPostSignalErrorFull() instead")
    void queryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryPreviousPagePostSignalErrorFull() instead")
    void queryPreviousPagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryPreviousPagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2MeGetSignalErrorFull() instead")
    void scimV2MeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2MeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2MePutSignalErrorFull() instead")
    void scimV2MePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2MePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2ResourceTypesGetSignalErrorFull() instead")
    void scimV2ResourceTypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2ResourceTypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2ResourceTypesTypeGetSignalErrorFull() instead")
    void scimV2ResourceTypesTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2ResourceTypesTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2SchemasGetSignalErrorFull() instead")
    void scimV2SchemasGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2SchemasGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2SchemasIdGetSignalErrorFull() instead")
    void scimV2SchemasIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2SchemasIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2ServiceProviderConfigGetSignalErrorFull() instead")
    void scimV2ServiceProviderConfigGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2ServiceProviderConfigGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2TypeGetSignalErrorFull() instead")
    void scimV2TypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2TypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2TypeIdGetSignalErrorFull() instead")
    void scimV2TypeIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2TypeIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2UsersGetSignalErrorFull() instead")
    void scimV2UsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2UsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2UsersIdGetSignalErrorFull() instead")
    void scimV2UsersIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2UsersIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2UsersIdPutSignalErrorFull() instead")
    void scimV2UsersIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2UsersIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scimV2UsersPostSignalErrorFull() instead")
    void scimV2UsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scimV2UsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCertificateCertIdGetSignalErrorFull() instead")
    void servicesCertificateCertIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCertificateCertIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesConfigurationModeActionsDisablePostSignalErrorFull() instead")
    void servicesConfigurationModeActionsDisablePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesConfigurationModeActionsDisablePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesConfigurationModeActionsEnablePostSignalErrorFull() instead")
    void servicesConfigurationModeActionsEnablePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesConfigurationModeActionsEnablePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDirectdataFilesGetSignalErrorFull() instead")
    void servicesDirectdataFilesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDirectdataFilesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDirectdataFilesNameGetSignalErrorFull() instead")
    void servicesDirectdataFilesNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDirectdataFilesNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsContentItemGetSignalErrorFull() instead")
    void servicesFileStagingItemsContentItemGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsContentItemGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsItemDeleteSignalErrorFull() instead")
    void servicesFileStagingItemsItemDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsItemDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsItemGetSignalErrorFull() instead")
    void servicesFileStagingItemsItemGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsItemGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsItemPutSignalErrorFull() instead")
    void servicesFileStagingItemsItemPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsItemPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingItemsPostSignalErrorFull() instead")
    void servicesFileStagingItemsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingItemsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadGetSignalErrorFull() instead")
    void servicesFileStagingUploadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadPostSignalErrorFull() instead")
    void servicesFileStagingUploadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdDeleteSignalErrorFull() instead")
    void servicesFileStagingUploadUploadSessionIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdGetSignalErrorFull() instead")
    void servicesFileStagingUploadUploadSessionIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdPartsGetSignalErrorFull() instead")
    void servicesFileStagingUploadUploadSessionIdPartsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdPartsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdPostSignalErrorFull() instead")
    void servicesFileStagingUploadUploadSessionIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesFileStagingUploadUploadSessionIdPutSignalErrorFull() instead")
    void servicesFileStagingUploadUploadSessionIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesFileStagingUploadUploadSessionIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsHistoriesGetSignalErrorFull() instead")
    void servicesJobsHistoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsHistoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsJobIdErrorsGetSignalErrorFull() instead")
    void servicesJobsJobIdErrorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsJobIdErrorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsJobIdGetSignalErrorFull() instead")
    void servicesJobsJobIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsJobIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsJobIdSummaryGetSignalErrorFull() instead")
    void servicesJobsJobIdSummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsJobIdSummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsJobIdTasksGetSignalErrorFull() instead")
    void servicesJobsJobIdTasksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsJobIdTasksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsMonitorsGetSignalErrorFull() instead")
    void servicesJobsMonitorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsMonitorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesJobsStartNowJobIdPostSignalErrorFull() instead")
    void servicesJobsStartNowJobIdPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesJobsStartNowJobIdPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderExtractPostSignalErrorFull() instead")
    void servicesLoaderExtractPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderExtractPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderJobIdTasksTaskIdFailurelogGetSignalErrorFull() instead")
    void servicesLoaderJobIdTasksTaskIdFailurelogGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderJobIdTasksTaskIdFailurelogGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderJobIdTasksTaskIdResultsGetSignalErrorFull() instead")
    void servicesLoaderJobIdTasksTaskIdResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderJobIdTasksTaskIdResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalErrorFull() instead")
    void servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalErrorFull() instead")
    void servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesLoaderLoadPostSignalErrorFull() instead")
    void servicesLoaderLoadPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesLoaderLoadPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesPackageActionsValidatePostSignalErrorFull() instead")
    void servicesPackageActionsValidatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesPackageActionsValidatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesPackagePostSignalErrorFull() instead")
    void servicesPackagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesPackagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesPackagePutSignalErrorFull() instead")
    void servicesPackagePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesPackagePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesGetSignalErrorFull() instead")
    void servicesQueuesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesQueueNameActionsDisableDeliveryPutSignalErrorFull() instead")
    void servicesQueuesQueueNameActionsDisableDeliveryPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesQueueNameActionsDisableDeliveryPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesQueueNameActionsEnableDeliveryPutSignalErrorFull() instead")
    void servicesQueuesQueueNameActionsEnableDeliveryPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesQueueNameActionsEnableDeliveryPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesQueueNameActionsResetPutSignalErrorFull() instead")
    void servicesQueuesQueueNameActionsResetPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesQueueNameActionsResetPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesQueuesQueueNameGetSignalErrorFull() instead")
    void servicesQueuesQueueNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesQueuesQueueNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalErrorFull() instead")
    void servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sessionDeleteSignalErrorFull() instead")
    void sessionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sessionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsDistributionNameCodeGetSignalErrorFull() instead")
    void uicodeDistributionsDistributionNameCodeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsDistributionNameCodeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsDistributionNameDeleteSignalErrorFull() instead")
    void uicodeDistributionsDistributionNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsDistributionNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsDistributionNameGetSignalErrorFull() instead")
    void uicodeDistributionsDistributionNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsDistributionNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsGetSignalErrorFull() instead")
    void uicodeDistributionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uicodeDistributionsPostSignalErrorFull() instead")
    void uicodeDistributionsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uicodeDistributionsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectVaultPackageVPackageIdActionsDeployPostSignalErrorFull() instead")
    void vobjectVaultPackageVPackageIdActionsDeployPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectVaultPackageVPackageIdActionsDeployPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalErrorFull() instead")
    void vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalErrorFull() instead")
    void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalErrorFull() instead")
    void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsEdlItemVActionsCreateplaceholderPostSignalErrorFull() instead")
    void vobjectsEdlItemVActionsCreateplaceholderPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsEdlItemVActionsCreateplaceholderPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsMergesJobIdLogGetSignalErrorFull() instead")
    void vobjectsMergesJobIdLogGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsMergesJobIdLogGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsMergesJobIdResultsGetSignalErrorFull() instead")
    void vobjectsMergesJobIdResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsMergesJobIdResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsMergesJobIdStatusGetSignalErrorFull() instead")
    void vobjectsMergesJobIdStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsMergesJobIdStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsActionNamePostSignalErrorFull() instead")
    void vobjectsObjectNameActionsActionNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsActionNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsChangetypePostSignalErrorFull() instead")
    void vobjectsObjectNameActionsChangetypePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsChangetypePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsMergePostSignalErrorFull() instead")
    void vobjectsObjectNameActionsMergePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsMergePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsRecalculaterollupsGetSignalErrorFull() instead")
    void vobjectsObjectNameActionsRecalculaterollupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsRecalculaterollupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsRecalculaterollupsPostSignalErrorFull() instead")
    void vobjectsObjectNameActionsRecalculaterollupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsRecalculaterollupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalErrorFull() instead")
    void vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameAttachmentsBatchDeleteSignalErrorFull() instead")
    void vobjectsObjectNameAttachmentsBatchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameAttachmentsBatchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameAttachmentsBatchPostSignalErrorFull() instead")
    void vobjectsObjectNameAttachmentsBatchPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameAttachmentsBatchPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameAttachmentsBatchPutSignalErrorFull() instead")
    void vobjectsObjectNameAttachmentsBatchPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameAttachmentsBatchPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameDeleteSignalErrorFull() instead")
    void vobjectsObjectNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameIdRolesRoleNameGetSignalErrorFull() instead")
    void vobjectsObjectNameIdRolesRoleNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameIdRolesRoleNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdActionsGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAttachmentsPostSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAttachmentsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAttachmentsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdAudittrailGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdAudittrailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdAudittrailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameObjectRecordIdGetSignalErrorFull() instead")
    void vobjectsObjectNameObjectRecordIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameObjectRecordIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNamePostSignalErrorFull() instead")
    void vobjectsObjectNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNamePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNamePutSignalErrorFull() instead")
    void vobjectsObjectNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameRolesDeleteSignalErrorFull() instead")
    void vobjectsObjectNameRolesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameRolesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsObjectNameRolesPostSignalErrorFull() instead")
    void vobjectsObjectNameRolesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsObjectNameRolesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vobjectsOutboundPackageVPackageIdDependenciesGetSignalErrorFull() instead")
    void vobjectsOutboundPackageVPackageIdDependenciesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vobjectsOutboundPackageVPackageIdDependenciesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
