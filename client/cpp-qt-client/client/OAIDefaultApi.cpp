/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDefaultApi::OAIDefaultApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIDefaultApi::~OAIDefaultApi() {
}

void OAIDefaultApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("{{vaultDNS}}/api/{version}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"version", OAIServerVariable("No description provided","v25.1",
    QSet<QString>{ {"v25.1"} })}, }));
    
    defaultConf.append(OAIServerConfiguration(
    QUrl("login.veevavault.com/api/{version}"),
    "No description provided",
    QMap<QString, OAIServerVariable>{ 
    {"version", OAIServerVariable("No description provided","v25.1",
    QSet<QString>{ {"v25.1"} })}, }));
    
    {
        QList<OAIServerConfiguration> serverConf = QList<OAIServerConfiguration>();
        serverConf.append(OAIServerConfiguration(
        QUrl("{{vaultDNS}}/api"),
        "No description provided",
        QMap<QString, OAIServerVariable>()));
        
    }
    {
        QList<OAIServerConfiguration> serverConf = QList<OAIServerConfiguration>();
        serverConf.append(OAIServerConfiguration(
        QUrl("login.veevavault.com/api"),
        "No description provided",
        QMap<QString, OAIServerVariable>()));
        _serverConfigs.insert("apiGet", serverConf);
        _serverIndices.insert("apiGet", 0);
    }
    _serverConfigs.insert("apiMdlComponentsComponentTypeAndRecordNameFilesGet", defaultConf);
    _serverIndices.insert("apiMdlComponentsComponentTypeAndRecordNameFilesGet", 0);
    _serverConfigs.insert("apiMdlComponentsComponentTypeAndRecordNameGet", defaultConf);
    _serverIndices.insert("apiMdlComponentsComponentTypeAndRecordNameGet", 0);
    _serverConfigs.insert("apiMdlExecuteAsyncJobIdResultsGet", defaultConf);
    _serverIndices.insert("apiMdlExecuteAsyncJobIdResultsGet", 0);
    _serverConfigs.insert("apiMdlExecuteAsyncPost", defaultConf);
    _serverIndices.insert("apiMdlExecuteAsyncPost", 0);
    _serverConfigs.insert("apiMdlExecutePost", defaultConf);
    _serverIndices.insert("apiMdlExecutePost", 0);
    _serverConfigs.insert("apiMdlFilesPost", defaultConf);
    _serverIndices.insert("apiMdlFilesPost", 0);
    _serverConfigs.insert("audittrailAuditTrailTypeGet", defaultConf);
    _serverIndices.insert("audittrailAuditTrailTypeGet", 0);
    _serverConfigs.insert("authDiscoveryPost", defaultConf);
    _serverIndices.insert("authDiscoveryPost", 0);
    _serverConfigs.insert("authOauthSessionOathOidcProfileIdPost", defaultConf);
    _serverIndices.insert("authOauthSessionOathOidcProfileIdPost", 0);
    _serverConfigs.insert("authPost", defaultConf);
    _serverIndices.insert("authPost", 0);
    _serverConfigs.insert("codeClassNameDelete", defaultConf);
    _serverIndices.insert("codeClassNameDelete", 0);
    _serverConfigs.insert("codeClassNameDisablePut", defaultConf);
    _serverIndices.insert("codeClassNameDisablePut", 0);
    _serverConfigs.insert("codeClassNameEnablePut", defaultConf);
    _serverIndices.insert("codeClassNameEnablePut", 0);
    _serverConfigs.insert("codeClassNameGet", defaultConf);
    _serverIndices.insert("codeClassNameGet", 0);
    _serverConfigs.insert("codeProfilerGet", defaultConf);
    _serverIndices.insert("codeProfilerGet", 0);
    _serverConfigs.insert("codeProfilerPost", defaultConf);
    _serverIndices.insert("codeProfilerPost", 0);
    _serverConfigs.insert("codeProfilerSessionNameActionsEndPost", defaultConf);
    _serverIndices.insert("codeProfilerSessionNameActionsEndPost", 0);
    _serverConfigs.insert("codeProfilerSessionNameDelete", defaultConf);
    _serverIndices.insert("codeProfilerSessionNameDelete", 0);
    _serverConfigs.insert("codeProfilerSessionNameGet", defaultConf);
    _serverIndices.insert("codeProfilerSessionNameGet", 0);
    _serverConfigs.insert("codeProfilerSessionNameResultsGet", defaultConf);
    _serverIndices.insert("codeProfilerSessionNameResultsGet", 0);
    _serverConfigs.insert("codePut", defaultConf);
    _serverIndices.insert("codePut", 0);
    _serverConfigs.insert("compositesTreesEdlHierarchyOrTemplateActionsListnodesPost", defaultConf);
    _serverIndices.insert("compositesTreesEdlHierarchyOrTemplateActionsListnodesPost", 0);
    _serverConfigs.insert("compositesTreesEdlHierarchyOrTemplateGet", defaultConf);
    _serverIndices.insert("compositesTreesEdlHierarchyOrTemplateGet", 0);
    _serverConfigs.insert("compositesTreesEdlHierarchyVParentNodeIdChildrenGet", defaultConf);
    _serverIndices.insert("compositesTreesEdlHierarchyVParentNodeIdChildrenGet", 0);
    _serverConfigs.insert("compositesTreesEdlHierarchyVParentNodeIdChildrenPut", defaultConf);
    _serverIndices.insert("compositesTreesEdlHierarchyVParentNodeIdChildrenPut", 0);
    _serverConfigs.insert("configurationComponentTypeAndRecordNameGet", defaultConf);
    _serverIndices.insert("configurationComponentTypeAndRecordNameGet", 0);
    _serverConfigs.insert("configurationComponentTypeGet", defaultConf);
    _serverIndices.insert("configurationComponentTypeGet", 0);
    _serverConfigs.insert("configurationObjectNameAndObjectTypeGet", defaultConf);
    _serverIndices.insert("configurationObjectNameAndObjectTypeGet", 0);
    _serverConfigs.insert("configurationObjecttypeGet", defaultConf);
    _serverIndices.insert("configurationObjecttypeGet", 0);
    _serverConfigs.insert("configurationRoleAssignmentRuleDelete", defaultConf);
    _serverIndices.insert("configurationRoleAssignmentRuleDelete", 0);
    _serverConfigs.insert("configurationRoleAssignmentRuleGet", defaultConf);
    _serverIndices.insert("configurationRoleAssignmentRuleGet", 0);
    _serverConfigs.insert("configurationRoleAssignmentRulePost", defaultConf);
    _serverIndices.insert("configurationRoleAssignmentRulePost", 0);
    _serverConfigs.insert("configurationRoleAssignmentRulePut", defaultConf);
    _serverIndices.insert("configurationRoleAssignmentRulePut", 0);
    _serverConfigs.insert("delegationLoginPost", defaultConf);
    _serverIndices.insert("delegationLoginPost", 0);
    _serverConfigs.insert("delegationVaultsGet", defaultConf);
    _serverIndices.insert("delegationVaultsGet", 0);
    _serverConfigs.insert("keepAlivePost", defaultConf);
    _serverIndices.insert("keepAlivePost", 0);
    _serverConfigs.insert("limitsGet", defaultConf);
    _serverIndices.insert("limitsGet", 0);
    _serverConfigs.insert("logsApiUsageGet", defaultConf);
    _serverIndices.insert("logsApiUsageGet", 0);
    _serverConfigs.insert("logsCodeDebugGet", defaultConf);
    _serverIndices.insert("logsCodeDebugGet", 0);
    _serverConfigs.insert("logsCodeDebugIdActionsResetDelete", defaultConf);
    _serverIndices.insert("logsCodeDebugIdActionsResetDelete", 0);
    _serverConfigs.insert("logsCodeDebugIdActionsResetPost", defaultConf);
    _serverIndices.insert("logsCodeDebugIdActionsResetPost", 0);
    _serverConfigs.insert("logsCodeDebugIdFilesGet", defaultConf);
    _serverIndices.insert("logsCodeDebugIdFilesGet", 0);
    _serverConfigs.insert("logsCodeDebugIdGet", defaultConf);
    _serverIndices.insert("logsCodeDebugIdGet", 0);
    _serverConfigs.insert("logsCodeDebugPost", defaultConf);
    _serverIndices.insert("logsCodeDebugPost", 0);
    _serverConfigs.insert("logsCodeRuntimeGet", defaultConf);
    _serverIndices.insert("logsCodeRuntimeGet", 0);
    _serverConfigs.insert("messagesMessageTypeActionsImportPost", defaultConf);
    _serverIndices.insert("messagesMessageTypeActionsImportPost", 0);
    _serverConfigs.insert("messagesMessageTypeLanguageLangActionsExportPost", defaultConf);
    _serverIndices.insert("messagesMessageTypeLanguageLangActionsExportPost", 0);
    _serverConfigs.insert("metadataAudittrailAuditTrailTypeGet", defaultConf);
    _serverIndices.insert("metadataAudittrailAuditTrailTypeGet", 0);
    _serverConfigs.insert("metadataAudittrailGet", defaultConf);
    _serverIndices.insert("metadataAudittrailGet", 0);
    _serverConfigs.insert("metadataComponentsComponentTypeGet", defaultConf);
    _serverIndices.insert("metadataComponentsComponentTypeGet", 0);
    _serverConfigs.insert("metadataComponentsGet", defaultConf);
    _serverIndices.insert("metadataComponentsGet", 0);
    _serverConfigs.insert("metadataObjectsBindersTemplatesBindernodesGet", defaultConf);
    _serverIndices.insert("metadataObjectsBindersTemplatesBindernodesGet", 0);
    _serverConfigs.insert("metadataObjectsBindersTemplatesGet", defaultConf);
    _serverIndices.insert("metadataObjectsBindersTemplatesGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsEventsGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsEventsGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsLockGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsLockGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsPropertiesFindCommonPost", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsPropertiesFindCommonPost", 0);
    _serverConfigs.insert("metadataObjectsDocumentsPropertiesGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsPropertiesGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsTemplatesGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsTemplatesGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsTypesGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsTypesGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsTypesTypeGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsTypesTypeGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsTypesTypeRelationshipsGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsTypesTypeRelationshipsGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet", 0);
    _serverConfigs.insert("metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet", defaultConf);
    _serverIndices.insert("metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet", 0);
    _serverConfigs.insert("metadataObjectsGroupsGet", defaultConf);
    _serverIndices.insert("metadataObjectsGroupsGet", 0);
    _serverConfigs.insert("metadataObjectsSecuritypoliciesGet", defaultConf);
    _serverIndices.insert("metadataObjectsSecuritypoliciesGet", 0);
    _serverConfigs.insert("metadataObjectsUsersGet", defaultConf);
    _serverIndices.insert("metadataObjectsUsersGet", 0);
    _serverConfigs.insert("metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet", defaultConf);
    _serverIndices.insert("metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet", 0);
    _serverConfigs.insert("metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet", defaultConf);
    _serverIndices.insert("metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet", 0);
    _serverConfigs.insert("metadataVobjectsGet", defaultConf);
    _serverIndices.insert("metadataVobjectsGet", 0);
    _serverConfigs.insert("metadataVobjectsObjectNameActionsCanceldeploymentPost", defaultConf);
    _serverIndices.insert("metadataVobjectsObjectNameActionsCanceldeploymentPost", 0);
    _serverConfigs.insert("metadataVobjectsObjectNameFieldsObjectFieldNameGet", defaultConf);
    _serverIndices.insert("metadataVobjectsObjectNameFieldsObjectFieldNameGet", 0);
    _serverConfigs.insert("metadataVobjectsObjectNameGet", defaultConf);
    _serverIndices.insert("metadataVobjectsObjectNameGet", 0);
    _serverConfigs.insert("metadataVobjectsObjectNamePageLayoutsGet", defaultConf);
    _serverIndices.insert("metadataVobjectsObjectNamePageLayoutsGet", 0);
    _serverConfigs.insert("metadataVobjectsObjectNamePageLayoutsLayoutNameGet", defaultConf);
    _serverIndices.insert("metadataVobjectsObjectNamePageLayoutsLayoutNameGet", 0);
    _serverConfigs.insert("notificationsHistoriesGet", defaultConf);
    _serverIndices.insert("notificationsHistoriesGet", 0);
    _serverConfigs.insert("objectWorkflowActionsActionGet", defaultConf);
    _serverIndices.insert("objectWorkflowActionsActionGet", 0);
    _serverConfigs.insert("objectWorkflowActionsActionPost", defaultConf);
    _serverIndices.insert("objectWorkflowActionsActionPost", 0);
    _serverConfigs.insert("objectWorkflowActionsCanceltasksPost", defaultConf);
    _serverIndices.insert("objectWorkflowActionsCanceltasksPost", 0);
    _serverConfigs.insert("objectWorkflowActionsCancelworkflowsPost", defaultConf);
    _serverIndices.insert("objectWorkflowActionsCancelworkflowsPost", 0);
    _serverConfigs.insert("objectWorkflowActionsGet", defaultConf);
    _serverIndices.insert("objectWorkflowActionsGet", 0);
    _serverConfigs.insert("objectWorkflowActionsReassigntasksPost", defaultConf);
    _serverIndices.insert("objectWorkflowActionsReassigntasksPost", 0);
    _serverConfigs.insert("objectWorkflowActionsReplaceworkflowownerPost", defaultConf);
    _serverIndices.insert("objectWorkflowActionsReplaceworkflowownerPost", 0);
    _serverConfigs.insert("objectsBindersActionsExportJobIdResultsGet", defaultConf);
    _serverIndices.insert("objectsBindersActionsExportJobIdResultsGet", 0);
    _serverConfigs.insert("objectsBindersBinderIdActionsExportPost", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdActionsExportPost", 0);
    _serverConfigs.insert("objectsBindersBinderIdActionsPost", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdActionsPost", 0);
    _serverConfigs.insert("objectsBindersBinderIdBindingRulePut", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdBindingRulePut", 0);
    _serverConfigs.insert("objectsBindersBinderIdDelete", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdDelete", 0);
    _serverConfigs.insert("objectsBindersBinderIdDocumentsNodeIdBindingRulePut", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdDocumentsNodeIdBindingRulePut", 0);
    _serverConfigs.insert("objectsBindersBinderIdDocumentsPost", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdDocumentsPost", 0);
    _serverConfigs.insert("objectsBindersBinderIdDocumentsSectionIdDelete", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdDocumentsSectionIdDelete", 0);
    _serverConfigs.insert("objectsBindersBinderIdDocumentsSectionIdPut", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdDocumentsSectionIdPut", 0);
    _serverConfigs.insert("objectsBindersBinderIdGet", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdGet", 0);
    _serverConfigs.insert("objectsBindersBinderIdPost", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdPost", 0);
    _serverConfigs.insert("objectsBindersBinderIdPut", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdPut", 0);
    _serverConfigs.insert("objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete", 0);
    _serverConfigs.insert("objectsBindersBinderIdSectionsNodeIdBindingRulePut", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdSectionsNodeIdBindingRulePut", 0);
    _serverConfigs.insert("objectsBindersBinderIdSectionsNodeIdPut", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdSectionsNodeIdPut", 0);
    _serverConfigs.insert("objectsBindersBinderIdSectionsPost", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdSectionsPost", 0);
    _serverConfigs.insert("objectsBindersBinderIdSectionsSectionIdDelete", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdSectionsSectionIdDelete", 0);
    _serverConfigs.insert("objectsBindersBinderIdSectionsSectionIdGet", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdSectionsSectionIdGet", 0);
    _serverConfigs.insert("objectsBindersBinderIdVersionsGet", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdVersionsGet", 0);
    _serverConfigs.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost", 0);
    _serverConfigs.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete", 0);
    _serverConfigs.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionGet", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionGet", 0);
    _serverConfigs.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionPut", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionPut", 0);
    _serverConfigs.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost", 0);
    _serverConfigs.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", 0);
    _serverConfigs.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", 0);
    _serverConfigs.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet", defaultConf);
    _serverIndices.insert("objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet", 0);
    _serverConfigs.insert("objectsBindersIdRolesGet", defaultConf);
    _serverIndices.insert("objectsBindersIdRolesGet", 0);
    _serverConfigs.insert("objectsBindersIdRolesPost", defaultConf);
    _serverIndices.insert("objectsBindersIdRolesPost", 0);
    _serverConfigs.insert("objectsBindersIdRolesRoleNameGet", defaultConf);
    _serverIndices.insert("objectsBindersIdRolesRoleNameGet", 0);
    _serverConfigs.insert("objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet", defaultConf);
    _serverIndices.insert("objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet", 0);
    _serverConfigs.insert("objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", defaultConf);
    _serverIndices.insert("objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", 0);
    _serverConfigs.insert("objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", defaultConf);
    _serverIndices.insert("objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", 0);
    _serverConfigs.insert("objectsBindersLifecycleActionsPost", defaultConf);
    _serverIndices.insert("objectsBindersLifecycleActionsPost", 0);
    _serverConfigs.insert("objectsBindersLifecycleActionsUserActionNamePut", defaultConf);
    _serverIndices.insert("objectsBindersLifecycleActionsUserActionNamePut", 0);
    _serverConfigs.insert("objectsBindersPost", defaultConf);
    _serverIndices.insert("objectsBindersPost", 0);
    _serverConfigs.insert("objectsBindersTemplatesGet", defaultConf);
    _serverIndices.insert("objectsBindersTemplatesGet", 0);
    _serverConfigs.insert("objectsBindersTemplatesPost", defaultConf);
    _serverIndices.insert("objectsBindersTemplatesPost", 0);
    _serverConfigs.insert("objectsBindersTemplatesPut", defaultConf);
    _serverIndices.insert("objectsBindersTemplatesPut", 0);
    _serverConfigs.insert("objectsBindersTemplatesTemplateNameBindernodesGet", defaultConf);
    _serverIndices.insert("objectsBindersTemplatesTemplateNameBindernodesGet", 0);
    _serverConfigs.insert("objectsBindersTemplatesTemplateNameBindernodesPost", defaultConf);
    _serverIndices.insert("objectsBindersTemplatesTemplateNameBindernodesPost", 0);
    _serverConfigs.insert("objectsBindersTemplatesTemplateNameBindernodesPut", defaultConf);
    _serverIndices.insert("objectsBindersTemplatesTemplateNameBindernodesPut", 0);
    _serverConfigs.insert("objectsBindersTemplatesTemplateNameDelete", defaultConf);
    _serverIndices.insert("objectsBindersTemplatesTemplateNameDelete", 0);
    _serverConfigs.insert("objectsBindersTemplatesTemplateNameGet", defaultConf);
    _serverIndices.insert("objectsBindersTemplatesTemplateNameGet", 0);
    _serverConfigs.insert("objectsDeletionsDocumentsGet", defaultConf);
    _serverIndices.insert("objectsDeletionsDocumentsGet", 0);
    _serverConfigs.insert("objectsDeletionsVobjectsObjectNameGet", defaultConf);
    _serverIndices.insert("objectsDeletionsVobjectsObjectNameGet", 0);
    _serverConfigs.insert("objectsDocumentsActionsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsActionsGet", 0);
    _serverConfigs.insert("objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet", 0);
    _serverConfigs.insert("objectsDocumentsActionsWorkflowNameGet", defaultConf);
    _serverIndices.insert("objectsDocumentsActionsWorkflowNameGet", 0);
    _serverConfigs.insert("objectsDocumentsActionsWorkflowNamePost", defaultConf);
    _serverIndices.insert("objectsDocumentsActionsWorkflowNamePost", 0);
    _serverConfigs.insert("objectsDocumentsAnnotationsBatchDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsAnnotationsBatchDelete", 0);
    _serverConfigs.insert("objectsDocumentsAnnotationsBatchPost", defaultConf);
    _serverIndices.insert("objectsDocumentsAnnotationsBatchPost", 0);
    _serverConfigs.insert("objectsDocumentsAnnotationsBatchPut", defaultConf);
    _serverIndices.insert("objectsDocumentsAnnotationsBatchPut", 0);
    _serverConfigs.insert("objectsDocumentsAnnotationsRepliesBatchPost", defaultConf);
    _serverIndices.insert("objectsDocumentsAnnotationsRepliesBatchPost", 0);
    _serverConfigs.insert("objectsDocumentsAttachmentsBatchDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsAttachmentsBatchDelete", 0);
    _serverConfigs.insert("objectsDocumentsAttachmentsBatchPost", defaultConf);
    _serverIndices.insert("objectsDocumentsAttachmentsBatchPost", 0);
    _serverConfigs.insert("objectsDocumentsAttachmentsBatchPut", defaultConf);
    _serverIndices.insert("objectsDocumentsAttachmentsBatchPut", 0);
    _serverConfigs.insert("objectsDocumentsBatchActionsFileextractJobIdResultsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsBatchActionsFileextractJobIdResultsGet", 0);
    _serverConfigs.insert("objectsDocumentsBatchActionsFileextractPost", defaultConf);
    _serverIndices.insert("objectsDocumentsBatchActionsFileextractPost", 0);
    _serverConfigs.insert("objectsDocumentsBatchActionsReclassifyPut", defaultConf);
    _serverIndices.insert("objectsDocumentsBatchActionsReclassifyPut", 0);
    _serverConfigs.insert("objectsDocumentsBatchActionsRerenderPost", defaultConf);
    _serverIndices.insert("objectsDocumentsBatchActionsRerenderPost", 0);
    _serverConfigs.insert("objectsDocumentsBatchDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsBatchDelete", 0);
    _serverConfigs.insert("objectsDocumentsBatchLockDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsBatchLockDelete", 0);
    _serverConfigs.insert("objectsDocumentsBatchPost", defaultConf);
    _serverIndices.insert("objectsDocumentsBatchPost", 0);
    _serverConfigs.insert("objectsDocumentsBatchPut", defaultConf);
    _serverIndices.insert("objectsDocumentsBatchPut", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAnchorsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAnchorsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAnnotationsFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAnnotationsFileGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAnnotationsFilePost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAnnotationsFilePost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsAttachmentIdDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsAttachmentIdDelete", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsAttachmentIdFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsAttachmentIdFileGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsAttachmentIdGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsAttachmentIdGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsAttachmentIdPut", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsAttachmentIdPut", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsFileGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAttachmentsPost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAttachmentsPost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdAudittrailGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdAudittrailGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdDelete", 0);
    _serverConfigs.insert("objectsDocumentsDocIdEventsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdEventsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdFileGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdLockDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdLockDelete", 0);
    _serverConfigs.insert("objectsDocumentsDocIdLockGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdLockGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdLockPost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdLockPost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdPost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdPost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdPut", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdPut", 0);
    _serverConfigs.insert("objectsDocumentsDocIdRenditionsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdRenditionsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdRenditionsRenditionTypeDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdRenditionsRenditionTypeDelete", 0);
    _serverConfigs.insert("objectsDocumentsDocIdRenditionsRenditionTypeGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdRenditionsRenditionTypeGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdRenditionsRenditionTypePost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdRenditionsRenditionTypePost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdRenditionsRenditionTypePut", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdRenditionsRenditionTypePut", 0);
    _serverConfigs.insert("objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut", 0);
    _serverConfigs.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet", defaultConf);
    _serverIndices.insert("objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet", 0);
    _serverConfigs.insert("objectsDocumentsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsGet", 0);
    _serverConfigs.insert("objectsDocumentsIdRolesGet", defaultConf);
    _serverIndices.insert("objectsDocumentsIdRolesGet", 0);
    _serverConfigs.insert("objectsDocumentsIdRolesPost", defaultConf);
    _serverIndices.insert("objectsDocumentsIdRolesPost", 0);
    _serverConfigs.insert("objectsDocumentsIdRolesRoleNameGet", defaultConf);
    _serverIndices.insert("objectsDocumentsIdRolesRoleNameGet", 0);
    _serverConfigs.insert("objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet", 0);
    _serverConfigs.insert("objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", defaultConf);
    _serverIndices.insert("objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet", 0);
    _serverConfigs.insert("objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", defaultConf);
    _serverIndices.insert("objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut", 0);
    _serverConfigs.insert("objectsDocumentsLifecycleActionsPost", defaultConf);
    _serverIndices.insert("objectsDocumentsLifecycleActionsPost", 0);
    _serverConfigs.insert("objectsDocumentsLifecycleActionsUserActionNamePut", defaultConf);
    _serverIndices.insert("objectsDocumentsLifecycleActionsUserActionNamePut", 0);
    _serverConfigs.insert("objectsDocumentsPost", defaultConf);
    _serverIndices.insert("objectsDocumentsPost", 0);
    _serverConfigs.insert("objectsDocumentsRelationshipsBatchDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsRelationshipsBatchDelete", 0);
    _serverConfigs.insert("objectsDocumentsRelationshipsBatchPost", defaultConf);
    _serverIndices.insert("objectsDocumentsRelationshipsBatchPost", 0);
    _serverConfigs.insert("objectsDocumentsRenditionsBatchDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsRenditionsBatchDelete", 0);
    _serverConfigs.insert("objectsDocumentsRenditionsBatchPost", defaultConf);
    _serverIndices.insert("objectsDocumentsRenditionsBatchPost", 0);
    _serverConfigs.insert("objectsDocumentsRolesBatchDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsRolesBatchDelete", 0);
    _serverConfigs.insert("objectsDocumentsRolesBatchPost", defaultConf);
    _serverIndices.insert("objectsDocumentsRolesBatchPost", 0);
    _serverConfigs.insert("objectsDocumentsTemplatesGet", defaultConf);
    _serverIndices.insert("objectsDocumentsTemplatesGet", 0);
    _serverConfigs.insert("objectsDocumentsTemplatesPost", defaultConf);
    _serverIndices.insert("objectsDocumentsTemplatesPost", 0);
    _serverConfigs.insert("objectsDocumentsTemplatesPut", defaultConf);
    _serverIndices.insert("objectsDocumentsTemplatesPut", 0);
    _serverConfigs.insert("objectsDocumentsTemplatesTemplateNameDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsTemplatesTemplateNameDelete", 0);
    _serverConfigs.insert("objectsDocumentsTemplatesTemplateNameFileGet", defaultConf);
    _serverIndices.insert("objectsDocumentsTemplatesTemplateNameFileGet", 0);
    _serverConfigs.insert("objectsDocumentsTemplatesTemplateNameGet", defaultConf);
    _serverIndices.insert("objectsDocumentsTemplatesTemplateNameGet", 0);
    _serverConfigs.insert("objectsDocumentsTemplatesTemplateNamePut", defaultConf);
    _serverIndices.insert("objectsDocumentsTemplatesTemplateNamePut", 0);
    _serverConfigs.insert("objectsDocumentsTokensPost", defaultConf);
    _serverIndices.insert("objectsDocumentsTokensPost", 0);
    _serverConfigs.insert("objectsDocumentsVersionsBatchActionsFileextractPost", defaultConf);
    _serverIndices.insert("objectsDocumentsVersionsBatchActionsFileextractPost", 0);
    _serverConfigs.insert("objectsDocumentsVersionsBatchDelete", defaultConf);
    _serverIndices.insert("objectsDocumentsVersionsBatchDelete", 0);
    _serverConfigs.insert("objectsDocumentsVersionsBatchPost", defaultConf);
    _serverIndices.insert("objectsDocumentsVersionsBatchPost", 0);
    _serverConfigs.insert("objectsDomainGet", defaultConf);
    _serverIndices.insert("objectsDomainGet", 0);
    _serverConfigs.insert("objectsDomainsGet", defaultConf);
    _serverIndices.insert("objectsDomainsGet", 0);
    _serverConfigs.insert("objectsEdlMatchedDocumentsBatchActionsAddPost", defaultConf);
    _serverIndices.insert("objectsEdlMatchedDocumentsBatchActionsAddPost", 0);
    _serverConfigs.insert("objectsEdlMatchedDocumentsBatchActionsRemovePost", defaultConf);
    _serverIndices.insert("objectsEdlMatchedDocumentsBatchActionsRemovePost", 0);
    _serverConfigs.insert("objectsGroupsAutoGet", defaultConf);
    _serverIndices.insert("objectsGroupsAutoGet", 0);
    _serverConfigs.insert("objectsGroupsGet", defaultConf);
    _serverIndices.insert("objectsGroupsGet", 0);
    _serverConfigs.insert("objectsGroupsGroupIdDelete", defaultConf);
    _serverIndices.insert("objectsGroupsGroupIdDelete", 0);
    _serverConfigs.insert("objectsGroupsGroupIdGet", defaultConf);
    _serverIndices.insert("objectsGroupsGroupIdGet", 0);
    _serverConfigs.insert("objectsGroupsGroupIdPut", defaultConf);
    _serverIndices.insert("objectsGroupsGroupIdPut", 0);
    _serverConfigs.insert("objectsGroupsPost", defaultConf);
    _serverIndices.insert("objectsGroupsPost", 0);
    _serverConfigs.insert("objectsLicensesGet", defaultConf);
    _serverIndices.insert("objectsLicensesGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsActionsGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsActionsGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsActionsWorkflowNameGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsActionsWorkflowNameGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsActionsWorkflowNamePost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsActionsWorkflowNamePost", 0);
    _serverConfigs.insert("objectsObjectworkflowsGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsAcceptPost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsAcceptPost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsCancelPost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsCancelPost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsCompletePost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsCompletePost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsReassignPost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsReassignPost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsTaskActionGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsTaskActionGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost", 0);
    _serverConfigs.insert("objectsObjectworkflowsTasksTaskIdGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsTasksTaskIdGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsWorkflowIdActionsGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsWorkflowIdActionsGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet", 0);
    _serverConfigs.insert("objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost", 0);
    _serverConfigs.insert("objectsObjectworkflowsWorkflowIdGet", defaultConf);
    _serverIndices.insert("objectsObjectworkflowsWorkflowIdGet", 0);
    _serverConfigs.insert("objectsPicklistsGet", defaultConf);
    _serverIndices.insert("objectsPicklistsGet", 0);
    _serverConfigs.insert("objectsPicklistsPicklistNameGet", defaultConf);
    _serverIndices.insert("objectsPicklistsPicklistNameGet", 0);
    _serverConfigs.insert("objectsPicklistsPicklistNamePicklistValueNameDelete", defaultConf);
    _serverIndices.insert("objectsPicklistsPicklistNamePicklistValueNameDelete", 0);
    _serverConfigs.insert("objectsPicklistsPicklistNamePicklistValueNamePut", defaultConf);
    _serverIndices.insert("objectsPicklistsPicklistNamePicklistValueNamePut", 0);
    _serverConfigs.insert("objectsPicklistsPicklistNamePost", defaultConf);
    _serverIndices.insert("objectsPicklistsPicklistNamePost", 0);
    _serverConfigs.insert("objectsPicklistsPicklistNamePut", defaultConf);
    _serverIndices.insert("objectsPicklistsPicklistNamePut", 0);
    _serverConfigs.insert("objectsSandboxActionsBuildproductionPost", defaultConf);
    _serverIndices.insert("objectsSandboxActionsBuildproductionPost", 0);
    _serverConfigs.insert("objectsSandboxActionsPromoteproductionPost", defaultConf);
    _serverIndices.insert("objectsSandboxActionsPromoteproductionPost", 0);
    _serverConfigs.insert("objectsSandboxActionsRecheckusagePost", defaultConf);
    _serverIndices.insert("objectsSandboxActionsRecheckusagePost", 0);
    _serverConfigs.insert("objectsSandboxBatchChangesizePost", defaultConf);
    _serverIndices.insert("objectsSandboxBatchChangesizePost", 0);
    _serverConfigs.insert("objectsSandboxEntitlementsSetPost", defaultConf);
    _serverIndices.insert("objectsSandboxEntitlementsSetPost", 0);
    _serverConfigs.insert("objectsSandboxGet", defaultConf);
    _serverIndices.insert("objectsSandboxGet", 0);
    _serverConfigs.insert("objectsSandboxNameDelete", defaultConf);
    _serverIndices.insert("objectsSandboxNameDelete", 0);
    _serverConfigs.insert("objectsSandboxPost", defaultConf);
    _serverIndices.insert("objectsSandboxPost", 0);
    _serverConfigs.insert("objectsSandboxSnapshotApiNameActionsUpdatePost", defaultConf);
    _serverIndices.insert("objectsSandboxSnapshotApiNameActionsUpdatePost", 0);
    _serverConfigs.insert("objectsSandboxSnapshotApiNameActionsUpgradePost", defaultConf);
    _serverIndices.insert("objectsSandboxSnapshotApiNameActionsUpgradePost", 0);
    _serverConfigs.insert("objectsSandboxSnapshotApiNameDelete", defaultConf);
    _serverIndices.insert("objectsSandboxSnapshotApiNameDelete", 0);
    _serverConfigs.insert("objectsSandboxSnapshotGet", defaultConf);
    _serverIndices.insert("objectsSandboxSnapshotGet", 0);
    _serverConfigs.insert("objectsSandboxSnapshotPost", defaultConf);
    _serverIndices.insert("objectsSandboxSnapshotPost", 0);
    _serverConfigs.insert("objectsSandboxVaultIdActionsRefreshPost", defaultConf);
    _serverIndices.insert("objectsSandboxVaultIdActionsRefreshPost", 0);
    _serverConfigs.insert("objectsSandboxVaultIdGet", defaultConf);
    _serverIndices.insert("objectsSandboxVaultIdGet", 0);
    _serverConfigs.insert("objectsSecuritypoliciesGet", defaultConf);
    _serverIndices.insert("objectsSecuritypoliciesGet", 0);
    _serverConfigs.insert("objectsSecuritypoliciesSecurityPolicyNameGet", defaultConf);
    _serverIndices.insert("objectsSecuritypoliciesSecurityPolicyNameGet", 0);
    _serverConfigs.insert("objectsUsersGet", defaultConf);
    _serverIndices.insert("objectsUsersGet", 0);
    _serverConfigs.insert("objectsUsersIdGet", defaultConf);
    _serverIndices.insert("objectsUsersIdGet", 0);
    _serverConfigs.insert("objectsUsersIdPermissionsGet", defaultConf);
    _serverIndices.insert("objectsUsersIdPermissionsGet", 0);
    _serverConfigs.insert("objectsUsersIdPut", defaultConf);
    _serverIndices.insert("objectsUsersIdPut", 0);
    _serverConfigs.insert("objectsUsersMeGet", defaultConf);
    _serverIndices.insert("objectsUsersMeGet", 0);
    _serverConfigs.insert("objectsUsersMePasswordPost", defaultConf);
    _serverIndices.insert("objectsUsersMePasswordPost", 0);
    _serverConfigs.insert("objectsUsersMePermissionsGet", defaultConf);
    _serverIndices.insert("objectsUsersMePermissionsGet", 0);
    _serverConfigs.insert("objectsUsersMePut", defaultConf);
    _serverIndices.insert("objectsUsersMePut", 0);
    _serverConfigs.insert("objectsUsersPost", defaultConf);
    _serverIndices.insert("objectsUsersPost", 0);
    _serverConfigs.insert("objectsUsersPut", defaultConf);
    _serverIndices.insert("objectsUsersPut", 0);
    _serverConfigs.insert("objectsUsersUserIdDelete", defaultConf);
    _serverIndices.insert("objectsUsersUserIdDelete", 0);
    _serverConfigs.insert("objectsUsersUserIdVaultMembershipVaultIdPut", defaultConf);
    _serverIndices.insert("objectsUsersUserIdVaultMembershipVaultIdPut", 0);
    _serverConfigs.insert("objectsVaultActionsComparePost", defaultConf);
    _serverIndices.insert("objectsVaultActionsComparePost", 0);
    _serverConfigs.insert("objectsVaultActionsConfigreportPost", defaultConf);
    _serverIndices.insert("objectsVaultActionsConfigreportPost", 0);
    _serverConfigs.insert("queryComponentsPost", defaultConf);
    _serverIndices.insert("queryComponentsPost", 0);
    _serverConfigs.insert("queryNextPagePost", defaultConf);
    _serverIndices.insert("queryNextPagePost", 0);
    _serverConfigs.insert("queryPost", defaultConf);
    _serverIndices.insert("queryPost", 0);
    _serverConfigs.insert("queryPreviousPagePost", defaultConf);
    _serverIndices.insert("queryPreviousPagePost", 0);
    _serverConfigs.insert("scimV2MeGet", defaultConf);
    _serverIndices.insert("scimV2MeGet", 0);
    _serverConfigs.insert("scimV2MePut", defaultConf);
    _serverIndices.insert("scimV2MePut", 0);
    _serverConfigs.insert("scimV2ResourceTypesGet", defaultConf);
    _serverIndices.insert("scimV2ResourceTypesGet", 0);
    _serverConfigs.insert("scimV2ResourceTypesTypeGet", defaultConf);
    _serverIndices.insert("scimV2ResourceTypesTypeGet", 0);
    _serverConfigs.insert("scimV2SchemasGet", defaultConf);
    _serverIndices.insert("scimV2SchemasGet", 0);
    _serverConfigs.insert("scimV2SchemasIdGet", defaultConf);
    _serverIndices.insert("scimV2SchemasIdGet", 0);
    _serverConfigs.insert("scimV2ServiceProviderConfigGet", defaultConf);
    _serverIndices.insert("scimV2ServiceProviderConfigGet", 0);
    _serverConfigs.insert("scimV2TypeGet", defaultConf);
    _serverIndices.insert("scimV2TypeGet", 0);
    _serverConfigs.insert("scimV2TypeIdGet", defaultConf);
    _serverIndices.insert("scimV2TypeIdGet", 0);
    _serverConfigs.insert("scimV2UsersGet", defaultConf);
    _serverIndices.insert("scimV2UsersGet", 0);
    _serverConfigs.insert("scimV2UsersIdGet", defaultConf);
    _serverIndices.insert("scimV2UsersIdGet", 0);
    _serverConfigs.insert("scimV2UsersIdPut", defaultConf);
    _serverIndices.insert("scimV2UsersIdPut", 0);
    _serverConfigs.insert("scimV2UsersPost", defaultConf);
    _serverIndices.insert("scimV2UsersPost", 0);
    _serverConfigs.insert("servicesCertificateCertIdGet", defaultConf);
    _serverIndices.insert("servicesCertificateCertIdGet", 0);
    _serverConfigs.insert("servicesConfigurationModeActionsDisablePost", defaultConf);
    _serverIndices.insert("servicesConfigurationModeActionsDisablePost", 0);
    _serverConfigs.insert("servicesConfigurationModeActionsEnablePost", defaultConf);
    _serverIndices.insert("servicesConfigurationModeActionsEnablePost", 0);
    _serverConfigs.insert("servicesDirectdataFilesGet", defaultConf);
    _serverIndices.insert("servicesDirectdataFilesGet", 0);
    _serverConfigs.insert("servicesDirectdataFilesNameGet", defaultConf);
    _serverIndices.insert("servicesDirectdataFilesNameGet", 0);
    _serverConfigs.insert("servicesFileStagingItemsContentItemGet", defaultConf);
    _serverIndices.insert("servicesFileStagingItemsContentItemGet", 0);
    _serverConfigs.insert("servicesFileStagingItemsItemDelete", defaultConf);
    _serverIndices.insert("servicesFileStagingItemsItemDelete", 0);
    _serverConfigs.insert("servicesFileStagingItemsItemGet", defaultConf);
    _serverIndices.insert("servicesFileStagingItemsItemGet", 0);
    _serverConfigs.insert("servicesFileStagingItemsItemPut", defaultConf);
    _serverIndices.insert("servicesFileStagingItemsItemPut", 0);
    _serverConfigs.insert("servicesFileStagingItemsPost", defaultConf);
    _serverIndices.insert("servicesFileStagingItemsPost", 0);
    _serverConfigs.insert("servicesFileStagingUploadGet", defaultConf);
    _serverIndices.insert("servicesFileStagingUploadGet", 0);
    _serverConfigs.insert("servicesFileStagingUploadPost", defaultConf);
    _serverIndices.insert("servicesFileStagingUploadPost", 0);
    _serverConfigs.insert("servicesFileStagingUploadUploadSessionIdDelete", defaultConf);
    _serverIndices.insert("servicesFileStagingUploadUploadSessionIdDelete", 0);
    _serverConfigs.insert("servicesFileStagingUploadUploadSessionIdGet", defaultConf);
    _serverIndices.insert("servicesFileStagingUploadUploadSessionIdGet", 0);
    _serverConfigs.insert("servicesFileStagingUploadUploadSessionIdPartsGet", defaultConf);
    _serverIndices.insert("servicesFileStagingUploadUploadSessionIdPartsGet", 0);
    _serverConfigs.insert("servicesFileStagingUploadUploadSessionIdPost", defaultConf);
    _serverIndices.insert("servicesFileStagingUploadUploadSessionIdPost", 0);
    _serverConfigs.insert("servicesFileStagingUploadUploadSessionIdPut", defaultConf);
    _serverIndices.insert("servicesFileStagingUploadUploadSessionIdPut", 0);
    _serverConfigs.insert("servicesJobsHistoriesGet", defaultConf);
    _serverIndices.insert("servicesJobsHistoriesGet", 0);
    _serverConfigs.insert("servicesJobsJobIdErrorsGet", defaultConf);
    _serverIndices.insert("servicesJobsJobIdErrorsGet", 0);
    _serverConfigs.insert("servicesJobsJobIdGet", defaultConf);
    _serverIndices.insert("servicesJobsJobIdGet", 0);
    _serverConfigs.insert("servicesJobsJobIdSummaryGet", defaultConf);
    _serverIndices.insert("servicesJobsJobIdSummaryGet", 0);
    _serverConfigs.insert("servicesJobsJobIdTasksGet", defaultConf);
    _serverIndices.insert("servicesJobsJobIdTasksGet", 0);
    _serverConfigs.insert("servicesJobsMonitorsGet", defaultConf);
    _serverIndices.insert("servicesJobsMonitorsGet", 0);
    _serverConfigs.insert("servicesJobsStartNowJobIdPost", defaultConf);
    _serverIndices.insert("servicesJobsStartNowJobIdPost", 0);
    _serverConfigs.insert("servicesLoaderExtractPost", defaultConf);
    _serverIndices.insert("servicesLoaderExtractPost", 0);
    _serverConfigs.insert("servicesLoaderJobIdTasksTaskIdFailurelogGet", defaultConf);
    _serverIndices.insert("servicesLoaderJobIdTasksTaskIdFailurelogGet", 0);
    _serverConfigs.insert("servicesLoaderJobIdTasksTaskIdResultsGet", defaultConf);
    _serverIndices.insert("servicesLoaderJobIdTasksTaskIdResultsGet", 0);
    _serverConfigs.insert("servicesLoaderJobIdTasksTaskIdResultsRenditionsGet", defaultConf);
    _serverIndices.insert("servicesLoaderJobIdTasksTaskIdResultsRenditionsGet", 0);
    _serverConfigs.insert("servicesLoaderJobIdTasksTaskIdSuccesslogGet", defaultConf);
    _serverIndices.insert("servicesLoaderJobIdTasksTaskIdSuccesslogGet", 0);
    _serverConfigs.insert("servicesLoaderLoadPost", defaultConf);
    _serverIndices.insert("servicesLoaderLoadPost", 0);
    _serverConfigs.insert("servicesPackageActionsValidatePost", defaultConf);
    _serverIndices.insert("servicesPackageActionsValidatePost", 0);
    _serverConfigs.insert("servicesPackagePost", defaultConf);
    _serverIndices.insert("servicesPackagePost", 0);
    _serverConfigs.insert("servicesPackagePut", defaultConf);
    _serverIndices.insert("servicesPackagePut", 0);
    _serverConfigs.insert("servicesQueuesGet", defaultConf);
    _serverIndices.insert("servicesQueuesGet", 0);
    _serverConfigs.insert("servicesQueuesQueueNameActionsDisableDeliveryPut", defaultConf);
    _serverIndices.insert("servicesQueuesQueueNameActionsDisableDeliveryPut", 0);
    _serverConfigs.insert("servicesQueuesQueueNameActionsEnableDeliveryPut", defaultConf);
    _serverIndices.insert("servicesQueuesQueueNameActionsEnableDeliveryPut", 0);
    _serverConfigs.insert("servicesQueuesQueueNameActionsResetPut", defaultConf);
    _serverIndices.insert("servicesQueuesQueueNameActionsResetPut", 0);
    _serverConfigs.insert("servicesQueuesQueueNameGet", defaultConf);
    _serverIndices.insert("servicesQueuesQueueNameGet", 0);
    _serverConfigs.insert("servicesVobjectVaultPackageVPackageIdActionsValidatePost", defaultConf);
    _serverIndices.insert("servicesVobjectVaultPackageVPackageIdActionsValidatePost", 0);
    _serverConfigs.insert("sessionDelete", defaultConf);
    _serverIndices.insert("sessionDelete", 0);
    _serverConfigs.insert("uicodeDistributionsDistributionNameCodeGet", defaultConf);
    _serverIndices.insert("uicodeDistributionsDistributionNameCodeGet", 0);
    _serverConfigs.insert("uicodeDistributionsDistributionNameDelete", defaultConf);
    _serverIndices.insert("uicodeDistributionsDistributionNameDelete", 0);
    _serverConfigs.insert("uicodeDistributionsDistributionNameGet", defaultConf);
    _serverIndices.insert("uicodeDistributionsDistributionNameGet", 0);
    _serverConfigs.insert("uicodeDistributionsGet", defaultConf);
    _serverIndices.insert("uicodeDistributionsGet", 0);
    _serverConfigs.insert("uicodeDistributionsPost", defaultConf);
    _serverIndices.insert("uicodeDistributionsPost", 0);
    _serverConfigs.insert("vobjectVaultPackageVPackageIdActionsDeployPost", defaultConf);
    _serverIndices.insert("vobjectVaultPackageVPackageIdActionsDeployPost", 0);
    _serverConfigs.insert("vobjectVaultPackageVPackageIdActionsDeployResultsGet", defaultConf);
    _serverIndices.insert("vobjectVaultPackageVPackageIdActionsDeployResultsGet", 0);
    _serverConfigs.insert("vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet", defaultConf);
    _serverIndices.insert("vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet", 0);
    _serverConfigs.insert("vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet", defaultConf);
    _serverIndices.insert("vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet", 0);
    _serverConfigs.insert("vobjectsEdlItemVActionsCreateplaceholderPost", defaultConf);
    _serverIndices.insert("vobjectsEdlItemVActionsCreateplaceholderPost", 0);
    _serverConfigs.insert("vobjectsMergesJobIdLogGet", defaultConf);
    _serverIndices.insert("vobjectsMergesJobIdLogGet", 0);
    _serverConfigs.insert("vobjectsMergesJobIdResultsGet", defaultConf);
    _serverIndices.insert("vobjectsMergesJobIdResultsGet", 0);
    _serverConfigs.insert("vobjectsMergesJobIdStatusGet", defaultConf);
    _serverIndices.insert("vobjectsMergesJobIdStatusGet", 0);
    _serverConfigs.insert("vobjectsObjectNameActionsActionNamePost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameActionsActionNamePost", 0);
    _serverConfigs.insert("vobjectsObjectNameActionsChangetypePost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameActionsChangetypePost", 0);
    _serverConfigs.insert("vobjectsObjectNameActionsMergePost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameActionsMergePost", 0);
    _serverConfigs.insert("vobjectsObjectNameActionsRecalculaterollupsGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameActionsRecalculaterollupsGet", 0);
    _serverConfigs.insert("vobjectsObjectNameActionsRecalculaterollupsPost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameActionsRecalculaterollupsPost", 0);
    _serverConfigs.insert("vobjectsObjectNameActionsUpdatecorporatecurrencyPut", defaultConf);
    _serverIndices.insert("vobjectsObjectNameActionsUpdatecorporatecurrencyPut", 0);
    _serverConfigs.insert("vobjectsObjectNameAttachmentsBatchDelete", defaultConf);
    _serverIndices.insert("vobjectsObjectNameAttachmentsBatchDelete", 0);
    _serverConfigs.insert("vobjectsObjectNameAttachmentsBatchPost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameAttachmentsBatchPost", 0);
    _serverConfigs.insert("vobjectsObjectNameAttachmentsBatchPut", defaultConf);
    _serverIndices.insert("vobjectsObjectNameAttachmentsBatchPut", 0);
    _serverConfigs.insert("vobjectsObjectNameDelete", defaultConf);
    _serverIndices.insert("vobjectsObjectNameDelete", 0);
    _serverConfigs.insert("vobjectsObjectNameIdRolesRoleNameGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameIdRolesRoleNameGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdActionsActionNameGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdActionsActionNameGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdActionsActionNamePost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdActionsActionNamePost", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdActionsCascadedeletePost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdActionsCascadedeletePost", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdActionsDeepcopyPost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdActionsDeepcopyPost", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdActionsGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdActionsGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsFileGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsFileGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAttachmentsPost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAttachmentsPost", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdAudittrailGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdAudittrailGet", 0);
    _serverConfigs.insert("vobjectsObjectNameObjectRecordIdGet", defaultConf);
    _serverIndices.insert("vobjectsObjectNameObjectRecordIdGet", 0);
    _serverConfigs.insert("vobjectsObjectNamePost", defaultConf);
    _serverIndices.insert("vobjectsObjectNamePost", 0);
    _serverConfigs.insert("vobjectsObjectNamePut", defaultConf);
    _serverIndices.insert("vobjectsObjectNamePut", 0);
    _serverConfigs.insert("vobjectsObjectNameRolesDelete", defaultConf);
    _serverIndices.insert("vobjectsObjectNameRolesDelete", 0);
    _serverConfigs.insert("vobjectsObjectNameRolesPost", defaultConf);
    _serverIndices.insert("vobjectsObjectNameRolesPost", 0);
    _serverConfigs.insert("vobjectsOutboundPackageVPackageIdDependenciesGet", defaultConf);
    _serverIndices.insert("vobjectsOutboundPackageVPackageIdDependenciesGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIDefaultApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIDefaultApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIDefaultApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIDefaultApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIDefaultApi::setUsername(const QString &username) {
    _username = username;
}

void OAIDefaultApi::setPassword(const QString &password) {
    _password = password;
}


void OAIDefaultApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIDefaultApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIDefaultApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIDefaultApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDefaultApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIDefaultApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIDefaultApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIDefaultApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIDefaultApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIDefaultApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIDefaultApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIDefaultApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIDefaultApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIDefaultApi::apiGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["apiGet"][_serverIndices.value("apiGet")].URL()+"/api/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiGetSignal();
        Q_EMIT apiGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiGetSignalE(error_type, error_str);
        Q_EMIT apiGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiGetSignalError(error_type, error_str);
        Q_EMIT apiGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiMdlComponentsComponentTypeAndRecordNameFilesGet(const QString &component_type_and_record_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["apiMdlComponentsComponentTypeAndRecordNameFilesGet"][_serverIndices.value("apiMdlComponentsComponentTypeAndRecordNameFilesGet")].URL()+"/api/mdl/components/{component_type_and_record_name}/files");
    
    
    {
        QString component_type_and_record_namePathParam("{");
        component_type_and_record_namePathParam.append("component_type_and_record_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "component_type_and_record_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"component_type_and_record_name"+pathSuffix : pathPrefix;
        fullPath.replace(component_type_and_record_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(component_type_and_record_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiMdlComponentsComponentTypeAndRecordNameFilesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiMdlComponentsComponentTypeAndRecordNameFilesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameFilesGetSignal();
        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalE(error_type, error_str);
        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalError(error_type, error_str);
        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameFilesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiMdlComponentsComponentTypeAndRecordNameGet(const QString &component_type_and_record_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["apiMdlComponentsComponentTypeAndRecordNameGet"][_serverIndices.value("apiMdlComponentsComponentTypeAndRecordNameGet")].URL()+"/api/mdl/components/{component_type_and_record_name}");
    
    
    {
        QString component_type_and_record_namePathParam("{");
        component_type_and_record_namePathParam.append("component_type_and_record_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "component_type_and_record_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"component_type_and_record_name"+pathSuffix : pathPrefix;
        fullPath.replace(component_type_and_record_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(component_type_and_record_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiMdlComponentsComponentTypeAndRecordNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiMdlComponentsComponentTypeAndRecordNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameGetSignal();
        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameGetSignalE(error_type, error_str);
        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameGetSignalError(error_type, error_str);
        Q_EMIT apiMdlComponentsComponentTypeAndRecordNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiMdlExecuteAsyncJobIdResultsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["apiMdlExecuteAsyncJobIdResultsGet"][_serverIndices.value("apiMdlExecuteAsyncJobIdResultsGet")].URL()+"/api/mdl/execute_async/{job_id}/results");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiMdlExecuteAsyncJobIdResultsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiMdlExecuteAsyncJobIdResultsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiMdlExecuteAsyncJobIdResultsGetSignal();
        Q_EMIT apiMdlExecuteAsyncJobIdResultsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiMdlExecuteAsyncJobIdResultsGetSignalE(error_type, error_str);
        Q_EMIT apiMdlExecuteAsyncJobIdResultsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiMdlExecuteAsyncJobIdResultsGetSignalError(error_type, error_str);
        Q_EMIT apiMdlExecuteAsyncJobIdResultsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiMdlExecuteAsyncPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["apiMdlExecuteAsyncPost"][_serverIndices.value("apiMdlExecuteAsyncPost")].URL()+"/api/mdl/execute_async");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiMdlExecuteAsyncPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiMdlExecuteAsyncPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiMdlExecuteAsyncPostSignal();
        Q_EMIT apiMdlExecuteAsyncPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiMdlExecuteAsyncPostSignalE(error_type, error_str);
        Q_EMIT apiMdlExecuteAsyncPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiMdlExecuteAsyncPostSignalError(error_type, error_str);
        Q_EMIT apiMdlExecuteAsyncPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiMdlExecutePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["apiMdlExecutePost"][_serverIndices.value("apiMdlExecutePost")].URL()+"/api/mdl/execute");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiMdlExecutePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiMdlExecutePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiMdlExecutePostSignal();
        Q_EMIT apiMdlExecutePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiMdlExecutePostSignalE(error_type, error_str);
        Q_EMIT apiMdlExecutePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiMdlExecutePostSignalError(error_type, error_str);
        Q_EMIT apiMdlExecutePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::apiMdlFilesPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["apiMdlFilesPost"][_serverIndices.value("apiMdlFilesPost")].URL()+"/api/mdl/files");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::apiMdlFilesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::apiMdlFilesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT apiMdlFilesPostSignal();
        Q_EMIT apiMdlFilesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT apiMdlFilesPostSignalE(error_type, error_str);
        Q_EMIT apiMdlFilesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT apiMdlFilesPostSignalError(error_type, error_str);
        Q_EMIT apiMdlFilesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::audittrailAuditTrailTypeGet(const QString &audit_trail_type, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<QString> &all_dates, const ::OpenAPI::OptionalParam<QString> &format_result, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &objects, const ::OpenAPI::OptionalParam<QString> &events, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["audittrailAuditTrailTypeGet"][_serverIndices.value("audittrailAuditTrailTypeGet")].URL()+"/audittrail/{audit_trail_type}");
    
    
    {
        QString audit_trail_typePathParam("{");
        audit_trail_typePathParam.append("audit_trail_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "audit_trail_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"audit_trail_type"+pathSuffix : pathPrefix;
        fullPath.replace(audit_trail_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(audit_trail_type)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (start_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_date.stringValue())));
    }
    if (end_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(end_date.stringValue())));
    }
    if (all_dates.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "all_dates", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("all_dates")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(all_dates.stringValue())));
    }
    if (format_result.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format_result", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format_result")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(format_result.stringValue())));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    if (objects.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "objects", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("objects")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(objects.stringValue())));
    }
    if (events.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "events", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("events")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(events.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::audittrailAuditTrailTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::audittrailAuditTrailTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT audittrailAuditTrailTypeGetSignal();
        Q_EMIT audittrailAuditTrailTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT audittrailAuditTrailTypeGetSignalE(error_type, error_str);
        Q_EMIT audittrailAuditTrailTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT audittrailAuditTrailTypeGetSignalError(error_type, error_str);
        Q_EMIT audittrailAuditTrailTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::authDiscoveryPost(const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["authDiscoveryPost"][_serverIndices.value("authDiscoveryPost")].URL()+"/auth/discovery");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::authDiscoveryPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::authDiscoveryPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT authDiscoveryPostSignal();
        Q_EMIT authDiscoveryPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT authDiscoveryPostSignalE(error_type, error_str);
        Q_EMIT authDiscoveryPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT authDiscoveryPostSignalError(error_type, error_str);
        Q_EMIT authDiscoveryPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::authOauthSessionOathOidcProfileIdPost(const QString &oath_oidc_profile_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["authOauthSessionOathOidcProfileIdPost"][_serverIndices.value("authOauthSessionOathOidcProfileIdPost")].URL()+"/auth/oauth/session/{oath_oidc_profile_id}");
    
    
    {
        QString oath_oidc_profile_idPathParam("{");
        oath_oidc_profile_idPathParam.append("oath_oidc_profile_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "oath_oidc_profile_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"oath_oidc_profile_id"+pathSuffix : pathPrefix;
        fullPath.replace(oath_oidc_profile_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(oath_oidc_profile_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::authOauthSessionOathOidcProfileIdPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::authOauthSessionOathOidcProfileIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT authOauthSessionOathOidcProfileIdPostSignal();
        Q_EMIT authOauthSessionOathOidcProfileIdPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT authOauthSessionOathOidcProfileIdPostSignalE(error_type, error_str);
        Q_EMIT authOauthSessionOathOidcProfileIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT authOauthSessionOathOidcProfileIdPostSignalError(error_type, error_str);
        Q_EMIT authOauthSessionOathOidcProfileIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::authPost(const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["authPost"][_serverIndices.value("authPost")].URL()+"/auth");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::authPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::authPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT authPostSignal();
        Q_EMIT authPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT authPostSignalE(error_type, error_str);
        Q_EMIT authPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT authPostSignalError(error_type, error_str);
        Q_EMIT authPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeClassNameDelete(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeClassNameDelete"][_serverIndices.value("codeClassNameDelete")].URL()+"/code/{class_name}");
    
    
    {
        QString class_namePathParam("{");
        class_namePathParam.append("class_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class_name"+pathSuffix : pathPrefix;
        fullPath.replace(class_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(class_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeClassNameDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeClassNameDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeClassNameDeleteSignal();
        Q_EMIT codeClassNameDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeClassNameDeleteSignalE(error_type, error_str);
        Q_EMIT codeClassNameDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeClassNameDeleteSignalError(error_type, error_str);
        Q_EMIT codeClassNameDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeClassNameDisablePut(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeClassNameDisablePut"][_serverIndices.value("codeClassNameDisablePut")].URL()+"/code/{class_name}/disable");
    
    
    {
        QString class_namePathParam("{");
        class_namePathParam.append("class_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class_name"+pathSuffix : pathPrefix;
        fullPath.replace(class_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(class_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeClassNameDisablePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeClassNameDisablePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeClassNameDisablePutSignal();
        Q_EMIT codeClassNameDisablePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeClassNameDisablePutSignalE(error_type, error_str);
        Q_EMIT codeClassNameDisablePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeClassNameDisablePutSignalError(error_type, error_str);
        Q_EMIT codeClassNameDisablePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeClassNameEnablePut(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeClassNameEnablePut"][_serverIndices.value("codeClassNameEnablePut")].URL()+"/code/{class_name}/enable");
    
    
    {
        QString class_namePathParam("{");
        class_namePathParam.append("class_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class_name"+pathSuffix : pathPrefix;
        fullPath.replace(class_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(class_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeClassNameEnablePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeClassNameEnablePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeClassNameEnablePutSignal();
        Q_EMIT codeClassNameEnablePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeClassNameEnablePutSignalE(error_type, error_str);
        Q_EMIT codeClassNameEnablePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeClassNameEnablePutSignalError(error_type, error_str);
        Q_EMIT codeClassNameEnablePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeClassNameGet(const QString &class_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeClassNameGet"][_serverIndices.value("codeClassNameGet")].URL()+"/code/{class_name}");
    
    
    {
        QString class_namePathParam("{");
        class_namePathParam.append("class_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class_name"+pathSuffix : pathPrefix;
        fullPath.replace(class_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(class_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeClassNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeClassNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeClassNameGetSignal();
        Q_EMIT codeClassNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeClassNameGetSignalE(error_type, error_str);
        Q_EMIT codeClassNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeClassNameGetSignalError(error_type, error_str);
        Q_EMIT codeClassNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeProfilerGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeProfilerGet"][_serverIndices.value("codeProfilerGet")].URL()+"/code/profiler");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeProfilerGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeProfilerGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeProfilerGetSignal();
        Q_EMIT codeProfilerGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeProfilerGetSignalE(error_type, error_str);
        Q_EMIT codeProfilerGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeProfilerGetSignalError(error_type, error_str);
        Q_EMIT codeProfilerGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeProfilerPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeProfilerPost"][_serverIndices.value("codeProfilerPost")].URL()+"/code/profiler");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeProfilerPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeProfilerPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeProfilerPostSignal();
        Q_EMIT codeProfilerPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeProfilerPostSignalE(error_type, error_str);
        Q_EMIT codeProfilerPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeProfilerPostSignalError(error_type, error_str);
        Q_EMIT codeProfilerPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeProfilerSessionNameActionsEndPost(const QString &session_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeProfilerSessionNameActionsEndPost"][_serverIndices.value("codeProfilerSessionNameActionsEndPost")].URL()+"/code/profiler/{session_name}/actions/end");
    
    
    {
        QString session_namePathParam("{");
        session_namePathParam.append("session_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "session_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"session_name"+pathSuffix : pathPrefix;
        fullPath.replace(session_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeProfilerSessionNameActionsEndPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeProfilerSessionNameActionsEndPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeProfilerSessionNameActionsEndPostSignal();
        Q_EMIT codeProfilerSessionNameActionsEndPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeProfilerSessionNameActionsEndPostSignalE(error_type, error_str);
        Q_EMIT codeProfilerSessionNameActionsEndPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeProfilerSessionNameActionsEndPostSignalError(error_type, error_str);
        Q_EMIT codeProfilerSessionNameActionsEndPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeProfilerSessionNameDelete(const QString &session_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeProfilerSessionNameDelete"][_serverIndices.value("codeProfilerSessionNameDelete")].URL()+"/code/profiler/{session_name}");
    
    
    {
        QString session_namePathParam("{");
        session_namePathParam.append("session_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "session_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"session_name"+pathSuffix : pathPrefix;
        fullPath.replace(session_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeProfilerSessionNameDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeProfilerSessionNameDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeProfilerSessionNameDeleteSignal();
        Q_EMIT codeProfilerSessionNameDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeProfilerSessionNameDeleteSignalE(error_type, error_str);
        Q_EMIT codeProfilerSessionNameDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeProfilerSessionNameDeleteSignalError(error_type, error_str);
        Q_EMIT codeProfilerSessionNameDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeProfilerSessionNameGet(const QString &session_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeProfilerSessionNameGet"][_serverIndices.value("codeProfilerSessionNameGet")].URL()+"/code/profiler/{session_name}");
    
    
    {
        QString session_namePathParam("{");
        session_namePathParam.append("session_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "session_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"session_name"+pathSuffix : pathPrefix;
        fullPath.replace(session_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeProfilerSessionNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeProfilerSessionNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeProfilerSessionNameGetSignal();
        Q_EMIT codeProfilerSessionNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeProfilerSessionNameGetSignalE(error_type, error_str);
        Q_EMIT codeProfilerSessionNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeProfilerSessionNameGetSignalError(error_type, error_str);
        Q_EMIT codeProfilerSessionNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codeProfilerSessionNameResultsGet(const QString &session_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codeProfilerSessionNameResultsGet"][_serverIndices.value("codeProfilerSessionNameResultsGet")].URL()+"/code/profiler/{session_name}/results");
    
    
    {
        QString session_namePathParam("{");
        session_namePathParam.append("session_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "session_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"session_name"+pathSuffix : pathPrefix;
        fullPath.replace(session_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(session_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codeProfilerSessionNameResultsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codeProfilerSessionNameResultsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codeProfilerSessionNameResultsGetSignal();
        Q_EMIT codeProfilerSessionNameResultsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codeProfilerSessionNameResultsGetSignalE(error_type, error_str);
        Q_EMIT codeProfilerSessionNameResultsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codeProfilerSessionNameResultsGetSignalError(error_type, error_str);
        Q_EMIT codeProfilerSessionNameResultsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::codePut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["codePut"][_serverIndices.value("codePut")].URL()+"/code");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::codePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::codePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT codePutSignal();
        Q_EMIT codePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT codePutSignalE(error_type, error_str);
        Q_EMIT codePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT codePutSignalError(error_type, error_str);
        Q_EMIT codePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::compositesTreesEdlHierarchyOrTemplateActionsListnodesPost(const QString &edl_hierarchy_or_template, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["compositesTreesEdlHierarchyOrTemplateActionsListnodesPost"][_serverIndices.value("compositesTreesEdlHierarchyOrTemplateActionsListnodesPost")].URL()+"/composites/trees/{edl_hierarchy_or_template}/actions/listnodes");
    
    
    {
        QString edl_hierarchy_or_templatePathParam("{");
        edl_hierarchy_or_templatePathParam.append("edl_hierarchy_or_template").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "edl_hierarchy_or_template", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"edl_hierarchy_or_template"+pathSuffix : pathPrefix;
        fullPath.replace(edl_hierarchy_or_templatePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(edl_hierarchy_or_template)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::compositesTreesEdlHierarchyOrTemplateActionsListnodesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::compositesTreesEdlHierarchyOrTemplateActionsListnodesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignal();
        Q_EMIT compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalE(error_type, error_str);
        Q_EMIT compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalError(error_type, error_str);
        Q_EMIT compositesTreesEdlHierarchyOrTemplateActionsListnodesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::compositesTreesEdlHierarchyOrTemplateGet(const QString &edl_hierarchy_or_template, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["compositesTreesEdlHierarchyOrTemplateGet"][_serverIndices.value("compositesTreesEdlHierarchyOrTemplateGet")].URL()+"/composites/trees/{edl_hierarchy_or_template}");
    
    
    {
        QString edl_hierarchy_or_templatePathParam("{");
        edl_hierarchy_or_templatePathParam.append("edl_hierarchy_or_template").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "edl_hierarchy_or_template", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"edl_hierarchy_or_template"+pathSuffix : pathPrefix;
        fullPath.replace(edl_hierarchy_or_templatePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(edl_hierarchy_or_template)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::compositesTreesEdlHierarchyOrTemplateGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::compositesTreesEdlHierarchyOrTemplateGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT compositesTreesEdlHierarchyOrTemplateGetSignal();
        Q_EMIT compositesTreesEdlHierarchyOrTemplateGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT compositesTreesEdlHierarchyOrTemplateGetSignalE(error_type, error_str);
        Q_EMIT compositesTreesEdlHierarchyOrTemplateGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT compositesTreesEdlHierarchyOrTemplateGetSignalError(error_type, error_str);
        Q_EMIT compositesTreesEdlHierarchyOrTemplateGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::compositesTreesEdlHierarchyVParentNodeIdChildrenGet(const QString &parent_node_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["compositesTreesEdlHierarchyVParentNodeIdChildrenGet"][_serverIndices.value("compositesTreesEdlHierarchyVParentNodeIdChildrenGet")].URL()+"/composites/trees/edl_hierarchy__v/{parent_node_id}/children");
    
    
    {
        QString parent_node_idPathParam("{");
        parent_node_idPathParam.append("parent_node_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "parent_node_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"parent_node_id"+pathSuffix : pathPrefix;
        fullPath.replace(parent_node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(parent_node_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::compositesTreesEdlHierarchyVParentNodeIdChildrenGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::compositesTreesEdlHierarchyVParentNodeIdChildrenGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignal();
        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalE(error_type, error_str);
        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalError(error_type, error_str);
        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::compositesTreesEdlHierarchyVParentNodeIdChildrenPut(const QString &parent_node_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["compositesTreesEdlHierarchyVParentNodeIdChildrenPut"][_serverIndices.value("compositesTreesEdlHierarchyVParentNodeIdChildrenPut")].URL()+"/composites/trees/edl_hierarchy__v/{parent_node_id}/children");
    
    
    {
        QString parent_node_idPathParam("{");
        parent_node_idPathParam.append("parent_node_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "parent_node_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"parent_node_id"+pathSuffix : pathPrefix;
        fullPath.replace(parent_node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(parent_node_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::compositesTreesEdlHierarchyVParentNodeIdChildrenPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::compositesTreesEdlHierarchyVParentNodeIdChildrenPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignal();
        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalE(error_type, error_str);
        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalError(error_type, error_str);
        Q_EMIT compositesTreesEdlHierarchyVParentNodeIdChildrenPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::configurationComponentTypeAndRecordNameGet(const QString &component_type_and_record_name, const ::OpenAPI::OptionalParam<QString> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["configurationComponentTypeAndRecordNameGet"][_serverIndices.value("configurationComponentTypeAndRecordNameGet")].URL()+"/configuration/{component_type_and_record_name}");
    
    
    {
        QString component_type_and_record_namePathParam("{");
        component_type_and_record_namePathParam.append("component_type_and_record_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "component_type_and_record_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"component_type_and_record_name"+pathSuffix : pathPrefix;
        fullPath.replace(component_type_and_record_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(component_type_and_record_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::configurationComponentTypeAndRecordNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::configurationComponentTypeAndRecordNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT configurationComponentTypeAndRecordNameGetSignal();
        Q_EMIT configurationComponentTypeAndRecordNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT configurationComponentTypeAndRecordNameGetSignalE(error_type, error_str);
        Q_EMIT configurationComponentTypeAndRecordNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT configurationComponentTypeAndRecordNameGetSignalError(error_type, error_str);
        Q_EMIT configurationComponentTypeAndRecordNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::configurationComponentTypeGet(const QString &component_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["configurationComponentTypeGet"][_serverIndices.value("configurationComponentTypeGet")].URL()+"/configuration/{component_type}");
    
    
    {
        QString component_typePathParam("{");
        component_typePathParam.append("component_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "component_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"component_type"+pathSuffix : pathPrefix;
        fullPath.replace(component_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(component_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::configurationComponentTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::configurationComponentTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT configurationComponentTypeGetSignal();
        Q_EMIT configurationComponentTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT configurationComponentTypeGetSignalE(error_type, error_str);
        Q_EMIT configurationComponentTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT configurationComponentTypeGetSignalError(error_type, error_str);
        Q_EMIT configurationComponentTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::configurationObjectNameAndObjectTypeGet(const QString &object_name_and_object_type, const ::OpenAPI::OptionalParam<QString> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["configurationObjectNameAndObjectTypeGet"][_serverIndices.value("configurationObjectNameAndObjectTypeGet")].URL()+"/configuration/{object_name_and_object_type}");
    
    
    {
        QString object_name_and_object_typePathParam("{");
        object_name_and_object_typePathParam.append("object_name_and_object_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name_and_object_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name_and_object_type"+pathSuffix : pathPrefix;
        fullPath.replace(object_name_and_object_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name_and_object_type)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::configurationObjectNameAndObjectTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::configurationObjectNameAndObjectTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT configurationObjectNameAndObjectTypeGetSignal();
        Q_EMIT configurationObjectNameAndObjectTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT configurationObjectNameAndObjectTypeGetSignalE(error_type, error_str);
        Q_EMIT configurationObjectNameAndObjectTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT configurationObjectNameAndObjectTypeGetSignalError(error_type, error_str);
        Q_EMIT configurationObjectNameAndObjectTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::configurationObjecttypeGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["configurationObjecttypeGet"][_serverIndices.value("configurationObjecttypeGet")].URL()+"/configuration/Objecttype");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::configurationObjecttypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::configurationObjecttypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT configurationObjecttypeGetSignal();
        Q_EMIT configurationObjecttypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT configurationObjecttypeGetSignalE(error_type, error_str);
        Q_EMIT configurationObjecttypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT configurationObjecttypeGetSignalError(error_type, error_str);
        Q_EMIT configurationObjecttypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::configurationRoleAssignmentRuleDelete(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["configurationRoleAssignmentRuleDelete"][_serverIndices.value("configurationRoleAssignmentRuleDelete")].URL()+"/configuration/role_assignment_rule");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::configurationRoleAssignmentRuleDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::configurationRoleAssignmentRuleDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT configurationRoleAssignmentRuleDeleteSignal();
        Q_EMIT configurationRoleAssignmentRuleDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT configurationRoleAssignmentRuleDeleteSignalE(error_type, error_str);
        Q_EMIT configurationRoleAssignmentRuleDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT configurationRoleAssignmentRuleDeleteSignalError(error_type, error_str);
        Q_EMIT configurationRoleAssignmentRuleDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::configurationRoleAssignmentRuleGet(const ::OpenAPI::OptionalParam<QString> &lifecycle__v, const ::OpenAPI::OptionalParam<QString> &role__v, const ::OpenAPI::OptionalParam<QString> &product__v, const ::OpenAPI::OptionalParam<QString> &country__v, const ::OpenAPI::OptionalParam<QString> &study__v, const ::OpenAPI::OptionalParam<QString> &study_country__v, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["configurationRoleAssignmentRuleGet"][_serverIndices.value("configurationRoleAssignmentRuleGet")].URL()+"/configuration/role_assignment_rule");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (lifecycle__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "lifecycle__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("lifecycle__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(lifecycle__v.stringValue())));
    }
    if (role__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "role__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("role__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(role__v.stringValue())));
    }
    if (product__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "product__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("product__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(product__v.stringValue())));
    }
    if (country__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "country__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("country__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(country__v.stringValue())));
    }
    if (study__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "study__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("study__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(study__v.stringValue())));
    }
    if (study_country__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "study_country__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("study_country__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(study_country__v.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::configurationRoleAssignmentRuleGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::configurationRoleAssignmentRuleGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT configurationRoleAssignmentRuleGetSignal();
        Q_EMIT configurationRoleAssignmentRuleGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT configurationRoleAssignmentRuleGetSignalE(error_type, error_str);
        Q_EMIT configurationRoleAssignmentRuleGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT configurationRoleAssignmentRuleGetSignalError(error_type, error_str);
        Q_EMIT configurationRoleAssignmentRuleGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::configurationRoleAssignmentRulePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["configurationRoleAssignmentRulePost"][_serverIndices.value("configurationRoleAssignmentRulePost")].URL()+"/configuration/role_assignment_rule");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::configurationRoleAssignmentRulePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::configurationRoleAssignmentRulePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT configurationRoleAssignmentRulePostSignal();
        Q_EMIT configurationRoleAssignmentRulePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT configurationRoleAssignmentRulePostSignalE(error_type, error_str);
        Q_EMIT configurationRoleAssignmentRulePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT configurationRoleAssignmentRulePostSignalError(error_type, error_str);
        Q_EMIT configurationRoleAssignmentRulePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::configurationRoleAssignmentRulePut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["configurationRoleAssignmentRulePut"][_serverIndices.value("configurationRoleAssignmentRulePut")].URL()+"/configuration/role_assignment_rule");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::configurationRoleAssignmentRulePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::configurationRoleAssignmentRulePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT configurationRoleAssignmentRulePutSignal();
        Q_EMIT configurationRoleAssignmentRulePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT configurationRoleAssignmentRulePutSignalE(error_type, error_str);
        Q_EMIT configurationRoleAssignmentRulePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT configurationRoleAssignmentRulePutSignalError(error_type, error_str);
        Q_EMIT configurationRoleAssignmentRulePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::delegationLoginPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["delegationLoginPost"][_serverIndices.value("delegationLoginPost")].URL()+"/delegation/login");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::delegationLoginPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::delegationLoginPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT delegationLoginPostSignal();
        Q_EMIT delegationLoginPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT delegationLoginPostSignalE(error_type, error_str);
        Q_EMIT delegationLoginPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT delegationLoginPostSignalError(error_type, error_str);
        Q_EMIT delegationLoginPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::delegationVaultsGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["delegationVaultsGet"][_serverIndices.value("delegationVaultsGet")].URL()+"/delegation/vaults");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::delegationVaultsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::delegationVaultsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT delegationVaultsGetSignal();
        Q_EMIT delegationVaultsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT delegationVaultsGetSignalE(error_type, error_str);
        Q_EMIT delegationVaultsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT delegationVaultsGetSignalError(error_type, error_str);
        Q_EMIT delegationVaultsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::keepAlivePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["keepAlivePost"][_serverIndices.value("keepAlivePost")].URL()+"/keep-alive");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::keepAlivePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::keepAlivePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT keepAlivePostSignal();
        Q_EMIT keepAlivePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT keepAlivePostSignalE(error_type, error_str);
        Q_EMIT keepAlivePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT keepAlivePostSignalError(error_type, error_str);
        Q_EMIT keepAlivePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::limitsGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["limitsGet"][_serverIndices.value("limitsGet")].URL()+"/limits");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::limitsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::limitsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT limitsGetSignal();
        Q_EMIT limitsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT limitsGetSignalE(error_type, error_str);
        Q_EMIT limitsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT limitsGetSignalError(error_type, error_str);
        Q_EMIT limitsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::logsApiUsageGet(const ::OpenAPI::OptionalParam<QString> &date, const ::OpenAPI::OptionalParam<QString> &log_format, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["logsApiUsageGet"][_serverIndices.value("logsApiUsageGet")].URL()+"/logs/api_usage");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(date.stringValue())));
    }
    if (log_format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "log_format", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("log_format")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(log_format.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::logsApiUsageGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::logsApiUsageGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT logsApiUsageGetSignal();
        Q_EMIT logsApiUsageGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT logsApiUsageGetSignalE(error_type, error_str);
        Q_EMIT logsApiUsageGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT logsApiUsageGetSignalError(error_type, error_str);
        Q_EMIT logsApiUsageGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::logsCodeDebugGet(const ::OpenAPI::OptionalParam<QString> &user_id, const ::OpenAPI::OptionalParam<bool> &include_inactive, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["logsCodeDebugGet"][_serverIndices.value("logsCodeDebugGet")].URL()+"/logs/code/debug");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (user_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "user_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("user_id")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id.stringValue())));
    }
    if (include_inactive.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_inactive", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_inactive")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_inactive.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::logsCodeDebugGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::logsCodeDebugGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT logsCodeDebugGetSignal();
        Q_EMIT logsCodeDebugGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT logsCodeDebugGetSignalE(error_type, error_str);
        Q_EMIT logsCodeDebugGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT logsCodeDebugGetSignalError(error_type, error_str);
        Q_EMIT logsCodeDebugGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::logsCodeDebugIdActionsResetDelete(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["logsCodeDebugIdActionsResetDelete"][_serverIndices.value("logsCodeDebugIdActionsResetDelete")].URL()+"/logs/code/debug/{id}/actions/reset");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::logsCodeDebugIdActionsResetDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::logsCodeDebugIdActionsResetDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT logsCodeDebugIdActionsResetDeleteSignal();
        Q_EMIT logsCodeDebugIdActionsResetDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT logsCodeDebugIdActionsResetDeleteSignalE(error_type, error_str);
        Q_EMIT logsCodeDebugIdActionsResetDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT logsCodeDebugIdActionsResetDeleteSignalError(error_type, error_str);
        Q_EMIT logsCodeDebugIdActionsResetDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::logsCodeDebugIdActionsResetPost(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["logsCodeDebugIdActionsResetPost"][_serverIndices.value("logsCodeDebugIdActionsResetPost")].URL()+"/logs/code/debug/{id}/actions/reset");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::logsCodeDebugIdActionsResetPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::logsCodeDebugIdActionsResetPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT logsCodeDebugIdActionsResetPostSignal();
        Q_EMIT logsCodeDebugIdActionsResetPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT logsCodeDebugIdActionsResetPostSignalE(error_type, error_str);
        Q_EMIT logsCodeDebugIdActionsResetPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT logsCodeDebugIdActionsResetPostSignalError(error_type, error_str);
        Q_EMIT logsCodeDebugIdActionsResetPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::logsCodeDebugIdFilesGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["logsCodeDebugIdFilesGet"][_serverIndices.value("logsCodeDebugIdFilesGet")].URL()+"/logs/code/debug/{id}/files");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::logsCodeDebugIdFilesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::logsCodeDebugIdFilesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT logsCodeDebugIdFilesGetSignal();
        Q_EMIT logsCodeDebugIdFilesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT logsCodeDebugIdFilesGetSignalE(error_type, error_str);
        Q_EMIT logsCodeDebugIdFilesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT logsCodeDebugIdFilesGetSignalError(error_type, error_str);
        Q_EMIT logsCodeDebugIdFilesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::logsCodeDebugIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["logsCodeDebugIdGet"][_serverIndices.value("logsCodeDebugIdGet")].URL()+"/logs/code/debug/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::logsCodeDebugIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::logsCodeDebugIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT logsCodeDebugIdGetSignal();
        Q_EMIT logsCodeDebugIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT logsCodeDebugIdGetSignalE(error_type, error_str);
        Q_EMIT logsCodeDebugIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT logsCodeDebugIdGetSignalError(error_type, error_str);
        Q_EMIT logsCodeDebugIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::logsCodeDebugPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["logsCodeDebugPost"][_serverIndices.value("logsCodeDebugPost")].URL()+"/logs/code/debug");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::logsCodeDebugPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::logsCodeDebugPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT logsCodeDebugPostSignal();
        Q_EMIT logsCodeDebugPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT logsCodeDebugPostSignalE(error_type, error_str);
        Q_EMIT logsCodeDebugPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT logsCodeDebugPostSignalError(error_type, error_str);
        Q_EMIT logsCodeDebugPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::logsCodeRuntimeGet(const ::OpenAPI::OptionalParam<QString> &date, const ::OpenAPI::OptionalParam<QString> &log_format, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["logsCodeRuntimeGet"][_serverIndices.value("logsCodeRuntimeGet")].URL()+"/logs/code/runtime");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(date.stringValue())));
    }
    if (log_format.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "log_format", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("log_format")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(log_format.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::logsCodeRuntimeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::logsCodeRuntimeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT logsCodeRuntimeGetSignal();
        Q_EMIT logsCodeRuntimeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT logsCodeRuntimeGetSignalE(error_type, error_str);
        Q_EMIT logsCodeRuntimeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT logsCodeRuntimeGetSignalError(error_type, error_str);
        Q_EMIT logsCodeRuntimeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::messagesMessageTypeActionsImportPost(const QString &message_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["messagesMessageTypeActionsImportPost"][_serverIndices.value("messagesMessageTypeActionsImportPost")].URL()+"/messages/{message_type}/actions/import");
    
    
    {
        QString message_typePathParam("{");
        message_typePathParam.append("message_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "message_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"message_type"+pathSuffix : pathPrefix;
        fullPath.replace(message_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(message_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::messagesMessageTypeActionsImportPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::messagesMessageTypeActionsImportPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT messagesMessageTypeActionsImportPostSignal();
        Q_EMIT messagesMessageTypeActionsImportPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT messagesMessageTypeActionsImportPostSignalE(error_type, error_str);
        Q_EMIT messagesMessageTypeActionsImportPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT messagesMessageTypeActionsImportPostSignalError(error_type, error_str);
        Q_EMIT messagesMessageTypeActionsImportPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::messagesMessageTypeLanguageLangActionsExportPost(const QString &message_type, const QString &lang, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["messagesMessageTypeLanguageLangActionsExportPost"][_serverIndices.value("messagesMessageTypeLanguageLangActionsExportPost")].URL()+"/messages/{message_type}/language/{lang}/actions/export");
    
    
    {
        QString message_typePathParam("{");
        message_typePathParam.append("message_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "message_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"message_type"+pathSuffix : pathPrefix;
        fullPath.replace(message_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(message_type)));
    }
    
    {
        QString langPathParam("{");
        langPathParam.append("lang").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lang", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lang"+pathSuffix : pathPrefix;
        fullPath.replace(langPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lang)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::messagesMessageTypeLanguageLangActionsExportPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::messagesMessageTypeLanguageLangActionsExportPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT messagesMessageTypeLanguageLangActionsExportPostSignal();
        Q_EMIT messagesMessageTypeLanguageLangActionsExportPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT messagesMessageTypeLanguageLangActionsExportPostSignalE(error_type, error_str);
        Q_EMIT messagesMessageTypeLanguageLangActionsExportPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT messagesMessageTypeLanguageLangActionsExportPostSignalError(error_type, error_str);
        Q_EMIT messagesMessageTypeLanguageLangActionsExportPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataAudittrailAuditTrailTypeGet(const QString &audit_trail_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataAudittrailAuditTrailTypeGet"][_serverIndices.value("metadataAudittrailAuditTrailTypeGet")].URL()+"/metadata/audittrail/{audit_trail_type}");
    
    
    {
        QString audit_trail_typePathParam("{");
        audit_trail_typePathParam.append("audit_trail_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "audit_trail_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"audit_trail_type"+pathSuffix : pathPrefix;
        fullPath.replace(audit_trail_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(audit_trail_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataAudittrailAuditTrailTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataAudittrailAuditTrailTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataAudittrailAuditTrailTypeGetSignal();
        Q_EMIT metadataAudittrailAuditTrailTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataAudittrailAuditTrailTypeGetSignalE(error_type, error_str);
        Q_EMIT metadataAudittrailAuditTrailTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataAudittrailAuditTrailTypeGetSignalError(error_type, error_str);
        Q_EMIT metadataAudittrailAuditTrailTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataAudittrailGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataAudittrailGet"][_serverIndices.value("metadataAudittrailGet")].URL()+"/metadata/audittrail");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataAudittrailGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataAudittrailGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataAudittrailGetSignal();
        Q_EMIT metadataAudittrailGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataAudittrailGetSignalE(error_type, error_str);
        Q_EMIT metadataAudittrailGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataAudittrailGetSignalError(error_type, error_str);
        Q_EMIT metadataAudittrailGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataComponentsComponentTypeGet(const QString &component_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataComponentsComponentTypeGet"][_serverIndices.value("metadataComponentsComponentTypeGet")].URL()+"/metadata/components/{component_type}");
    
    
    {
        QString component_typePathParam("{");
        component_typePathParam.append("component_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "component_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"component_type"+pathSuffix : pathPrefix;
        fullPath.replace(component_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(component_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataComponentsComponentTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataComponentsComponentTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataComponentsComponentTypeGetSignal();
        Q_EMIT metadataComponentsComponentTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataComponentsComponentTypeGetSignalE(error_type, error_str);
        Q_EMIT metadataComponentsComponentTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataComponentsComponentTypeGetSignalError(error_type, error_str);
        Q_EMIT metadataComponentsComponentTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataComponentsGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataComponentsGet"][_serverIndices.value("metadataComponentsGet")].URL()+"/metadata/components");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataComponentsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataComponentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataComponentsGetSignal();
        Q_EMIT metadataComponentsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataComponentsGetSignalE(error_type, error_str);
        Q_EMIT metadataComponentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataComponentsGetSignalError(error_type, error_str);
        Q_EMIT metadataComponentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsBindersTemplatesBindernodesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsBindersTemplatesBindernodesGet"][_serverIndices.value("metadataObjectsBindersTemplatesBindernodesGet")].URL()+"/metadata/objects/binders/templates/bindernodes");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsBindersTemplatesBindernodesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsBindersTemplatesBindernodesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsBindersTemplatesBindernodesGetSignal();
        Q_EMIT metadataObjectsBindersTemplatesBindernodesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsBindersTemplatesBindernodesGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsBindersTemplatesBindernodesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsBindersTemplatesBindernodesGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsBindersTemplatesBindernodesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsBindersTemplatesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsBindersTemplatesGet"][_serverIndices.value("metadataObjectsBindersTemplatesGet")].URL()+"/metadata/objects/binders/templates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsBindersTemplatesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsBindersTemplatesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsBindersTemplatesGetSignal();
        Q_EMIT metadataObjectsBindersTemplatesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsBindersTemplatesGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsBindersTemplatesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsBindersTemplatesGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsBindersTemplatesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet(const QString &placemark_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet"][_serverIndices.value("metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet")].URL()+"/metadata/objects/documents/annotations/placemarks/types/{placemark_type}");
    
    
    {
        QString placemark_typePathParam("{");
        placemark_typePathParam.append("placemark_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "placemark_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"placemark_type"+pathSuffix : pathPrefix;
        fullPath.replace(placemark_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(placemark_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignal();
        Q_EMIT metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet(const QString &reference_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet"][_serverIndices.value("metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet")].URL()+"/metadata/objects/documents/annotations/references/types/{reference_type}");
    
    
    {
        QString reference_typePathParam("{");
        reference_typePathParam.append("reference_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reference_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reference_type"+pathSuffix : pathPrefix;
        fullPath.replace(reference_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(reference_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignal();
        Q_EMIT metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet(const QString &annotation_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet"][_serverIndices.value("metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet")].URL()+"/metadata/objects/documents/annotations/types/{annotation_type}");
    
    
    {
        QString annotation_typePathParam("{");
        annotation_typePathParam.append("annotation_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "annotation_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"annotation_type"+pathSuffix : pathPrefix;
        fullPath.replace(annotation_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(annotation_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignal();
        Q_EMIT metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet(const QString &event_type, const QString &event_subtype, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet"][_serverIndices.value("metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet")].URL()+"/metadata/objects/documents/events/{event_type}/types/{event_subtype}");
    
    
    {
        QString event_typePathParam("{");
        event_typePathParam.append("event_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "event_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"event_type"+pathSuffix : pathPrefix;
        fullPath.replace(event_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(event_type)));
    }
    
    {
        QString event_subtypePathParam("{");
        event_subtypePathParam.append("event_subtype").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "event_subtype", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"event_subtype"+pathSuffix : pathPrefix;
        fullPath.replace(event_subtypePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(event_subtype)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignal();
        Q_EMIT metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsEventsGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsEventsGet"][_serverIndices.value("metadataObjectsDocumentsEventsGet")].URL()+"/metadata/objects/documents/events");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsEventsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsEventsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsEventsGetSignal();
        Q_EMIT metadataObjectsDocumentsEventsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsEventsGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsEventsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsEventsGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsEventsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsLockGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsLockGet"][_serverIndices.value("metadataObjectsDocumentsLockGet")].URL()+"/metadata/objects/documents/lock");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsLockGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsLockGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsLockGetSignal();
        Q_EMIT metadataObjectsDocumentsLockGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsLockGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsLockGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsLockGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsLockGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsPropertiesFindCommonPost(const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsPropertiesFindCommonPost"][_serverIndices.value("metadataObjectsDocumentsPropertiesFindCommonPost")].URL()+"/metadata/objects/documents/properties/find_common");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsPropertiesFindCommonPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsPropertiesFindCommonPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsPropertiesFindCommonPostSignal();
        Q_EMIT metadataObjectsDocumentsPropertiesFindCommonPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsPropertiesFindCommonPostSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsPropertiesFindCommonPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsPropertiesFindCommonPostSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsPropertiesFindCommonPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsPropertiesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsPropertiesGet"][_serverIndices.value("metadataObjectsDocumentsPropertiesGet")].URL()+"/metadata/objects/documents/properties");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsPropertiesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsPropertiesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsPropertiesGetSignal();
        Q_EMIT metadataObjectsDocumentsPropertiesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsPropertiesGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsPropertiesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsPropertiesGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsPropertiesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsTemplatesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsTemplatesGet"][_serverIndices.value("metadataObjectsDocumentsTemplatesGet")].URL()+"/metadata/objects/documents/templates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsTemplatesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsTemplatesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsTemplatesGetSignal();
        Q_EMIT metadataObjectsDocumentsTemplatesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsTemplatesGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTemplatesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsTemplatesGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTemplatesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsTypesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsTypesGet"][_serverIndices.value("metadataObjectsDocumentsTypesGet")].URL()+"/metadata/objects/documents/types");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsTypesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsTypesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsTypesGetSignal();
        Q_EMIT metadataObjectsDocumentsTypesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsTypesGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsTypesGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsTypesTypeGet(const QString &type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsTypesTypeGet"][_serverIndices.value("metadataObjectsDocumentsTypesTypeGet")].URL()+"/metadata/objects/documents/types/{type}");
    
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsTypesTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsTypesTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsTypesTypeGetSignal();
        Q_EMIT metadataObjectsDocumentsTypesTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsTypesTypeGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsTypesTypeGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsTypesTypeRelationshipsGet(const QString &type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsTypesTypeRelationshipsGet"][_serverIndices.value("metadataObjectsDocumentsTypesTypeRelationshipsGet")].URL()+"/metadata/objects/documents/types/{type}/relationships");
    
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsTypesTypeRelationshipsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsTypesTypeRelationshipsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsTypesTypeRelationshipsGetSignal();
        Q_EMIT metadataObjectsDocumentsTypesTypeRelationshipsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsTypesTypeRelationshipsGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesTypeRelationshipsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsTypesTypeRelationshipsGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesTypeRelationshipsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet(const QString &type, const QString &subtype, const QString &classification, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet"][_serverIndices.value("metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet")].URL()+"/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}");
    
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    
    {
        QString subtypePathParam("{");
        subtypePathParam.append("subtype").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subtype", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subtype"+pathSuffix : pathPrefix;
        fullPath.replace(subtypePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subtype)));
    }
    
    {
        QString classificationPathParam("{");
        classificationPathParam.append("classification").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "classification", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"classification"+pathSuffix : pathPrefix;
        fullPath.replace(classificationPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(classification)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignal();
        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet(const QString &type, const QString &subtype, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet"][_serverIndices.value("metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet")].URL()+"/metadata/objects/documents/types/{type}/subtypes/{subtype}");
    
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    
    {
        QString subtypePathParam("{");
        subtypePathParam.append("subtype").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "subtype", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"subtype"+pathSuffix : pathPrefix;
        fullPath.replace(subtypePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(subtype)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignal();
        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsDocumentsTypesTypeSubtypesSubtypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsGroupsGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsGroupsGet"][_serverIndices.value("metadataObjectsGroupsGet")].URL()+"/metadata/objects/groups");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsGroupsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsGroupsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsGroupsGetSignal();
        Q_EMIT metadataObjectsGroupsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsGroupsGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsGroupsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsGroupsGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsGroupsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsSecuritypoliciesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsSecuritypoliciesGet"][_serverIndices.value("metadataObjectsSecuritypoliciesGet")].URL()+"/metadata/objects/securitypolicies");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsSecuritypoliciesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsSecuritypoliciesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsSecuritypoliciesGetSignal();
        Q_EMIT metadataObjectsSecuritypoliciesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsSecuritypoliciesGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsSecuritypoliciesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsSecuritypoliciesGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsSecuritypoliciesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataObjectsUsersGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataObjectsUsersGet"][_serverIndices.value("metadataObjectsUsersGet")].URL()+"/metadata/objects/users");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataObjectsUsersGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataObjectsUsersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataObjectsUsersGetSignal();
        Q_EMIT metadataObjectsUsersGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataObjectsUsersGetSignalE(error_type, error_str);
        Q_EMIT metadataObjectsUsersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataObjectsUsersGetSignalError(error_type, error_str);
        Q_EMIT metadataObjectsUsersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet"][_serverIndices.value("metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet")].URL()+"/metadata/query/archived_documents/relationships/document_signature__sysr");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignal();
        Q_EMIT metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalE(error_type, error_str);
        Q_EMIT metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalError(error_type, error_str);
        Q_EMIT metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet"][_serverIndices.value("metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet")].URL()+"/metadata/query/documents/relationships/document_signature__sysr");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignal();
        Q_EMIT metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalE(error_type, error_str);
        Q_EMIT metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalError(error_type, error_str);
        Q_EMIT metadataQueryDocumentsRelationshipsDocumentSignatureSysrGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataVobjectsGet(const ::OpenAPI::OptionalParam<bool> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataVobjectsGet"][_serverIndices.value("metadataVobjectsGet")].URL()+"/metadata/vobjects");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataVobjectsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataVobjectsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataVobjectsGetSignal();
        Q_EMIT metadataVobjectsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataVobjectsGetSignalE(error_type, error_str);
        Q_EMIT metadataVobjectsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataVobjectsGetSignalError(error_type, error_str);
        Q_EMIT metadataVobjectsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataVobjectsObjectNameActionsCanceldeploymentPost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataVobjectsObjectNameActionsCanceldeploymentPost"][_serverIndices.value("metadataVobjectsObjectNameActionsCanceldeploymentPost")].URL()+"/metadata/vobjects/{object_name}/actions/canceldeployment");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataVobjectsObjectNameActionsCanceldeploymentPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataVobjectsObjectNameActionsCanceldeploymentPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataVobjectsObjectNameActionsCanceldeploymentPostSignal();
        Q_EMIT metadataVobjectsObjectNameActionsCanceldeploymentPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataVobjectsObjectNameActionsCanceldeploymentPostSignalE(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNameActionsCanceldeploymentPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataVobjectsObjectNameActionsCanceldeploymentPostSignalError(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNameActionsCanceldeploymentPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataVobjectsObjectNameFieldsObjectFieldNameGet(const QString &object_name, const QString &object_field_name, const ::OpenAPI::OptionalParam<bool> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataVobjectsObjectNameFieldsObjectFieldNameGet"][_serverIndices.value("metadataVobjectsObjectNameFieldsObjectFieldNameGet")].URL()+"/metadata/vobjects/{object_name}/fields/{object_field_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_field_namePathParam("{");
        object_field_namePathParam.append("object_field_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_field_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_field_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_field_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_field_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataVobjectsObjectNameFieldsObjectFieldNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataVobjectsObjectNameFieldsObjectFieldNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataVobjectsObjectNameFieldsObjectFieldNameGetSignal();
        Q_EMIT metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalE(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalError(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNameFieldsObjectFieldNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataVobjectsObjectNameGet(const QString &object_name, const ::OpenAPI::OptionalParam<bool> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataVobjectsObjectNameGet"][_serverIndices.value("metadataVobjectsObjectNameGet")].URL()+"/metadata/vobjects/{object_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataVobjectsObjectNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataVobjectsObjectNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataVobjectsObjectNameGetSignal();
        Q_EMIT metadataVobjectsObjectNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataVobjectsObjectNameGetSignalE(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataVobjectsObjectNameGetSignalError(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataVobjectsObjectNamePageLayoutsGet(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataVobjectsObjectNamePageLayoutsGet"][_serverIndices.value("metadataVobjectsObjectNamePageLayoutsGet")].URL()+"/metadata/vobjects/{object_name}/page_layouts");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataVobjectsObjectNamePageLayoutsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataVobjectsObjectNamePageLayoutsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataVobjectsObjectNamePageLayoutsGetSignal();
        Q_EMIT metadataVobjectsObjectNamePageLayoutsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataVobjectsObjectNamePageLayoutsGetSignalE(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNamePageLayoutsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataVobjectsObjectNamePageLayoutsGetSignalError(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNamePageLayoutsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::metadataVobjectsObjectNamePageLayoutsLayoutNameGet(const QString &object_name, const QString &layout_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["metadataVobjectsObjectNamePageLayoutsLayoutNameGet"][_serverIndices.value("metadataVobjectsObjectNamePageLayoutsLayoutNameGet")].URL()+"/metadata/vobjects/{object_name}/page_layouts/{layout_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString layout_namePathParam("{");
        layout_namePathParam.append("layout_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "layout_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"layout_name"+pathSuffix : pathPrefix;
        fullPath.replace(layout_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(layout_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::metadataVobjectsObjectNamePageLayoutsLayoutNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::metadataVobjectsObjectNamePageLayoutsLayoutNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignal();
        Q_EMIT metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalE(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalError(error_type, error_str);
        Q_EMIT metadataVobjectsObjectNamePageLayoutsLayoutNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::notificationsHistoriesGet(const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<bool> &all_dates, const ::OpenAPI::OptionalParam<QString> &format_result, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["notificationsHistoriesGet"][_serverIndices.value("notificationsHistoriesGet")].URL()+"/notifications/histories");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (start_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_date.stringValue())));
    }
    if (end_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(end_date.stringValue())));
    }
    if (all_dates.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "all_dates", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("all_dates")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(all_dates.stringValue())));
    }
    if (format_result.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format_result", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format_result")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(format_result.stringValue())));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::notificationsHistoriesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::notificationsHistoriesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT notificationsHistoriesGetSignal();
        Q_EMIT notificationsHistoriesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT notificationsHistoriesGetSignalE(error_type, error_str);
        Q_EMIT notificationsHistoriesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT notificationsHistoriesGetSignalError(error_type, error_str);
        Q_EMIT notificationsHistoriesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectWorkflowActionsActionGet(const QString &action, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectWorkflowActionsActionGet"][_serverIndices.value("objectWorkflowActionsActionGet")].URL()+"/object/workflow/actions/{action}");
    
    
    {
        QString actionPathParam("{");
        actionPathParam.append("action").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "action", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"action"+pathSuffix : pathPrefix;
        fullPath.replace(actionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(action)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectWorkflowActionsActionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectWorkflowActionsActionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectWorkflowActionsActionGetSignal();
        Q_EMIT objectWorkflowActionsActionGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectWorkflowActionsActionGetSignalE(error_type, error_str);
        Q_EMIT objectWorkflowActionsActionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectWorkflowActionsActionGetSignalError(error_type, error_str);
        Q_EMIT objectWorkflowActionsActionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectWorkflowActionsActionPost(const QString &action, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectWorkflowActionsActionPost"][_serverIndices.value("objectWorkflowActionsActionPost")].URL()+"/object/workflow/actions/{action}");
    
    
    {
        QString actionPathParam("{");
        actionPathParam.append("action").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "action", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"action"+pathSuffix : pathPrefix;
        fullPath.replace(actionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(action)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectWorkflowActionsActionPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectWorkflowActionsActionPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectWorkflowActionsActionPostSignal();
        Q_EMIT objectWorkflowActionsActionPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectWorkflowActionsActionPostSignalE(error_type, error_str);
        Q_EMIT objectWorkflowActionsActionPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectWorkflowActionsActionPostSignalError(error_type, error_str);
        Q_EMIT objectWorkflowActionsActionPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectWorkflowActionsCanceltasksPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectWorkflowActionsCanceltasksPost"][_serverIndices.value("objectWorkflowActionsCanceltasksPost")].URL()+"/object/workflow/actions/canceltasks");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectWorkflowActionsCanceltasksPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectWorkflowActionsCanceltasksPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectWorkflowActionsCanceltasksPostSignal();
        Q_EMIT objectWorkflowActionsCanceltasksPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectWorkflowActionsCanceltasksPostSignalE(error_type, error_str);
        Q_EMIT objectWorkflowActionsCanceltasksPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectWorkflowActionsCanceltasksPostSignalError(error_type, error_str);
        Q_EMIT objectWorkflowActionsCanceltasksPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectWorkflowActionsCancelworkflowsPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectWorkflowActionsCancelworkflowsPost"][_serverIndices.value("objectWorkflowActionsCancelworkflowsPost")].URL()+"/object/workflow/actions/cancelworkflows");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectWorkflowActionsCancelworkflowsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectWorkflowActionsCancelworkflowsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectWorkflowActionsCancelworkflowsPostSignal();
        Q_EMIT objectWorkflowActionsCancelworkflowsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectWorkflowActionsCancelworkflowsPostSignalE(error_type, error_str);
        Q_EMIT objectWorkflowActionsCancelworkflowsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectWorkflowActionsCancelworkflowsPostSignalError(error_type, error_str);
        Q_EMIT objectWorkflowActionsCancelworkflowsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectWorkflowActionsGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectWorkflowActionsGet"][_serverIndices.value("objectWorkflowActionsGet")].URL()+"/object/workflow/actions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectWorkflowActionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectWorkflowActionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectWorkflowActionsGetSignal();
        Q_EMIT objectWorkflowActionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectWorkflowActionsGetSignalE(error_type, error_str);
        Q_EMIT objectWorkflowActionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectWorkflowActionsGetSignalError(error_type, error_str);
        Q_EMIT objectWorkflowActionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectWorkflowActionsReassigntasksPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectWorkflowActionsReassigntasksPost"][_serverIndices.value("objectWorkflowActionsReassigntasksPost")].URL()+"/object/workflow/actions/reassigntasks");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectWorkflowActionsReassigntasksPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectWorkflowActionsReassigntasksPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectWorkflowActionsReassigntasksPostSignal();
        Q_EMIT objectWorkflowActionsReassigntasksPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectWorkflowActionsReassigntasksPostSignalE(error_type, error_str);
        Q_EMIT objectWorkflowActionsReassigntasksPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectWorkflowActionsReassigntasksPostSignalError(error_type, error_str);
        Q_EMIT objectWorkflowActionsReassigntasksPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectWorkflowActionsReplaceworkflowownerPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectWorkflowActionsReplaceworkflowownerPost"][_serverIndices.value("objectWorkflowActionsReplaceworkflowownerPost")].URL()+"/object/workflow/actions/replaceworkflowowner");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectWorkflowActionsReplaceworkflowownerPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectWorkflowActionsReplaceworkflowownerPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectWorkflowActionsReplaceworkflowownerPostSignal();
        Q_EMIT objectWorkflowActionsReplaceworkflowownerPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectWorkflowActionsReplaceworkflowownerPostSignalE(error_type, error_str);
        Q_EMIT objectWorkflowActionsReplaceworkflowownerPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectWorkflowActionsReplaceworkflowownerPostSignalError(error_type, error_str);
        Q_EMIT objectWorkflowActionsReplaceworkflowownerPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersActionsExportJobIdResultsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersActionsExportJobIdResultsGet"][_serverIndices.value("objectsBindersActionsExportJobIdResultsGet")].URL()+"/objects/binders/actions/export/{job_id}/results");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersActionsExportJobIdResultsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersActionsExportJobIdResultsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersActionsExportJobIdResultsGetSignal();
        Q_EMIT objectsBindersActionsExportJobIdResultsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersActionsExportJobIdResultsGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersActionsExportJobIdResultsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersActionsExportJobIdResultsGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersActionsExportJobIdResultsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdActionsExportPost(const QString &binder_id, const ::OpenAPI::OptionalParam<bool> &source, const ::OpenAPI::OptionalParam<QString> &renditiontype, const ::OpenAPI::OptionalParam<QString> &docversion, const ::OpenAPI::OptionalParam<QString> &attachments, const ::OpenAPI::OptionalParam<QString> &r_export, const ::OpenAPI::OptionalParam<bool> &docfield, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdActionsExportPost"][_serverIndices.value("objectsBindersBinderIdActionsExportPost")].URL()+"/objects/binders/{binder_id}/actions/export");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (source.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "source", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("source")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(source.stringValue())));
    }
    if (renditiontype.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "renditiontype", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("renditiontype")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(renditiontype.stringValue())));
    }
    if (docversion.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "docversion", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("docversion")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(docversion.stringValue())));
    }
    if (attachments.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attachments", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attachments")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachments.stringValue())));
    }
    if (r_export.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "export", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("export")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_export.stringValue())));
    }
    if (docfield.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "docfield", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("docfield")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(docfield.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdActionsExportPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdActionsExportPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdActionsExportPostSignal();
        Q_EMIT objectsBindersBinderIdActionsExportPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdActionsExportPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdActionsExportPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdActionsExportPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdActionsExportPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdActionsPost(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdActionsPost"][_serverIndices.value("objectsBindersBinderIdActionsPost")].URL()+"/objects/binders/{binder_id}/actions");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdActionsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdActionsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdActionsPostSignal();
        Q_EMIT objectsBindersBinderIdActionsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdActionsPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdActionsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdActionsPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdActionsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdBindingRulePut(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdBindingRulePut"][_serverIndices.value("objectsBindersBinderIdBindingRulePut")].URL()+"/objects/binders/{binder_id}/binding_rule");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdBindingRulePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdBindingRulePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdBindingRulePutSignal();
        Q_EMIT objectsBindersBinderIdBindingRulePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdBindingRulePutSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdBindingRulePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdBindingRulePutSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdBindingRulePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdDelete(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdDelete"][_serverIndices.value("objectsBindersBinderIdDelete")].URL()+"/objects/binders/{binder_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdDeleteSignal();
        Q_EMIT objectsBindersBinderIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdDocumentsNodeIdBindingRulePut(const QString &binder_id, const QString &node_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdDocumentsNodeIdBindingRulePut"][_serverIndices.value("objectsBindersBinderIdDocumentsNodeIdBindingRulePut")].URL()+"/objects/binders/{binder_id}/documents/{node_id}/binding_rule");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString node_idPathParam("{");
        node_idPathParam.append("node_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "node_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"node_id"+pathSuffix : pathPrefix;
        fullPath.replace(node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdDocumentsNodeIdBindingRulePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdDocumentsNodeIdBindingRulePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignal();
        Q_EMIT objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDocumentsNodeIdBindingRulePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdDocumentsPost(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdDocumentsPost"][_serverIndices.value("objectsBindersBinderIdDocumentsPost")].URL()+"/objects/binders/{binder_id}/documents");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdDocumentsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdDocumentsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdDocumentsPostSignal();
        Q_EMIT objectsBindersBinderIdDocumentsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdDocumentsPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDocumentsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdDocumentsPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDocumentsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdDocumentsSectionIdDelete(const QString &binder_id, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdDocumentsSectionIdDelete"][_serverIndices.value("objectsBindersBinderIdDocumentsSectionIdDelete")].URL()+"/objects/binders/{binder_id}/documents/{section_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString section_idPathParam("{");
        section_idPathParam.append("section_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "section_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"section_id"+pathSuffix : pathPrefix;
        fullPath.replace(section_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(section_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdDocumentsSectionIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdDocumentsSectionIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdDocumentsSectionIdDeleteSignal();
        Q_EMIT objectsBindersBinderIdDocumentsSectionIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdDocumentsSectionIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDocumentsSectionIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdDocumentsSectionIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDocumentsSectionIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdDocumentsSectionIdPut(const QString &binder_id, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdDocumentsSectionIdPut"][_serverIndices.value("objectsBindersBinderIdDocumentsSectionIdPut")].URL()+"/objects/binders/{binder_id}/documents/{section_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString section_idPathParam("{");
        section_idPathParam.append("section_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "section_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"section_id"+pathSuffix : pathPrefix;
        fullPath.replace(section_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(section_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdDocumentsSectionIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdDocumentsSectionIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdDocumentsSectionIdPutSignal();
        Q_EMIT objectsBindersBinderIdDocumentsSectionIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdDocumentsSectionIdPutSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDocumentsSectionIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdDocumentsSectionIdPutSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdDocumentsSectionIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdGet(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &depth, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdGet"][_serverIndices.value("objectsBindersBinderIdGet")].URL()+"/objects/binders/{binder_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (depth.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "depth", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("depth")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(depth.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdGetSignal();
        Q_EMIT objectsBindersBinderIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdPost(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdPost"][_serverIndices.value("objectsBindersBinderIdPost")].URL()+"/objects/binders/{binder_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdPostSignal();
        Q_EMIT objectsBindersBinderIdPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdPut(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdPut"][_serverIndices.value("objectsBindersBinderIdPut")].URL()+"/objects/binders/{binder_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdPutSignal();
        Q_EMIT objectsBindersBinderIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdPutSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdPutSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete(const QString &binder_id, const QString &role_name_and_user_or_group, const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete"][_serverIndices.value("objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete")].URL()+"/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString role_name_and_user_or_groupPathParam("{");
        role_name_and_user_or_groupPathParam.append("role_name_and_user_or_group").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "role_name_and_user_or_group", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"role_name_and_user_or_group"+pathSuffix : pathPrefix;
        fullPath.replace(role_name_and_user_or_groupPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(role_name_and_user_or_group)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignal();
        Q_EMIT objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdSectionsNodeIdBindingRulePut(const QString &binder_id, const QString &node_id, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdSectionsNodeIdBindingRulePut"][_serverIndices.value("objectsBindersBinderIdSectionsNodeIdBindingRulePut")].URL()+"/objects/binders/{binder_id}/sections/{node_id}/binding_rule");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString node_idPathParam("{");
        node_idPathParam.append("node_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "node_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"node_id"+pathSuffix : pathPrefix;
        fullPath.replace(node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdSectionsNodeIdBindingRulePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdSectionsNodeIdBindingRulePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdSectionsNodeIdBindingRulePutSignal();
        Q_EMIT objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsNodeIdBindingRulePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdSectionsNodeIdPut(const QString &binder_id, const QString &node_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdSectionsNodeIdPut"][_serverIndices.value("objectsBindersBinderIdSectionsNodeIdPut")].URL()+"/objects/binders/{binder_id}/sections/{node_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString node_idPathParam("{");
        node_idPathParam.append("node_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "node_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"node_id"+pathSuffix : pathPrefix;
        fullPath.replace(node_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(node_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdSectionsNodeIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdSectionsNodeIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdSectionsNodeIdPutSignal();
        Q_EMIT objectsBindersBinderIdSectionsNodeIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdSectionsNodeIdPutSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsNodeIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdSectionsNodeIdPutSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsNodeIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdSectionsPost(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdSectionsPost"][_serverIndices.value("objectsBindersBinderIdSectionsPost")].URL()+"/objects/binders/{binder_id}/sections");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdSectionsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdSectionsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdSectionsPostSignal();
        Q_EMIT objectsBindersBinderIdSectionsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdSectionsPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdSectionsPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdSectionsSectionIdDelete(const QString &binder_id, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdSectionsSectionIdDelete"][_serverIndices.value("objectsBindersBinderIdSectionsSectionIdDelete")].URL()+"/objects/binders/{binder_id}/sections/{section_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString section_idPathParam("{");
        section_idPathParam.append("section_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "section_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"section_id"+pathSuffix : pathPrefix;
        fullPath.replace(section_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(section_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdSectionsSectionIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdSectionsSectionIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdSectionsSectionIdDeleteSignal();
        Q_EMIT objectsBindersBinderIdSectionsSectionIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdSectionsSectionIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsSectionIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdSectionsSectionIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsSectionIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdSectionsSectionIdGet(const QString &binder_id, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdSectionsSectionIdGet"][_serverIndices.value("objectsBindersBinderIdSectionsSectionIdGet")].URL()+"/objects/binders/{binder_id}/sections/{section_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString section_idPathParam("{");
        section_idPathParam.append("section_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "section_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"section_id"+pathSuffix : pathPrefix;
        fullPath.replace(section_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(section_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdSectionsSectionIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdSectionsSectionIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdSectionsSectionIdGetSignal();
        Q_EMIT objectsBindersBinderIdSectionsSectionIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdSectionsSectionIdGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsSectionIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdSectionsSectionIdGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdSectionsSectionIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdVersionsGet(const QString &binder_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdVersionsGet"][_serverIndices.value("objectsBindersBinderIdVersionsGet")].URL()+"/objects/binders/{binder_id}/versions");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdVersionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdVersionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdVersionsGetSignal();
        Q_EMIT objectsBindersBinderIdVersionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdVersionsGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdVersionsGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<bool> &source, const ::OpenAPI::OptionalParam<QString> &renditiontype, const ::OpenAPI::OptionalParam<QString> &docversion, const ::OpenAPI::OptionalParam<QString> &attachments, const ::OpenAPI::OptionalParam<QString> &r_export, const ::OpenAPI::OptionalParam<bool> &docfield, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost"][_serverIndices.value("objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost")].URL()+"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (source.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "source", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("source")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(source.stringValue())));
    }
    if (renditiontype.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "renditiontype", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("renditiontype")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(renditiontype.stringValue())));
    }
    if (docversion.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "docversion", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("docversion")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(docversion.stringValue())));
    }
    if (attachments.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attachments", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attachments")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachments.stringValue())));
    }
    if (r_export.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "export", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("export")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_export.stringValue())));
    }
    if (docfield.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "docfield", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("docfield")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(docfield.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignal();
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete"][_serverIndices.value("objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete")].URL()+"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignal();
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionGet(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdVersionsMajorVersionMinorVersionGet"][_serverIndices.value("objectsBindersBinderIdVersionsMajorVersionMinorVersionGet")].URL()+"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignal();
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionPut(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdVersionsMajorVersionMinorVersionPut"][_serverIndices.value("objectsBindersBinderIdVersionsMajorVersionMinorVersionPut")].URL()+"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignal();
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost(const QString &binder_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost"][_serverIndices.value("objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost")].URL()+"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignal();
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(const QString &binder_id, const QString &major_version, const QString &minor_version, const QString &relationship_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"][_serverIndices.value("objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete")].URL()+"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString relationship_idPathParam("{");
        relationship_idPathParam.append("relationship_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "relationship_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"relationship_id"+pathSuffix : pathPrefix;
        fullPath.replace(relationship_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(relationship_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignal();
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(const QString &binder_id, const QString &major_version, const QString &minor_version, const QString &relationship_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"][_serverIndices.value("objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet")].URL()+"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString relationship_idPathParam("{");
        relationship_idPathParam.append("relationship_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "relationship_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"relationship_id"+pathSuffix : pathPrefix;
        fullPath.replace(relationship_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(relationship_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignal();
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet(const QString &binder_id, const QString &major_version, const QString &minor_version, const QString &section_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet"][_serverIndices.value("objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet")].URL()+"/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}");
    
    
    {
        QString binder_idPathParam("{");
        binder_idPathParam.append("binder_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "binder_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"binder_id"+pathSuffix : pathPrefix;
        fullPath.replace(binder_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(binder_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString section_idPathParam("{");
        section_idPathParam.append("section_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "section_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"section_id"+pathSuffix : pathPrefix;
        fullPath.replace(section_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(section_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignal();
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersIdRolesGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersIdRolesGet"][_serverIndices.value("objectsBindersIdRolesGet")].URL()+"/objects/binders/{id}/roles");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersIdRolesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersIdRolesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersIdRolesGetSignal();
        Q_EMIT objectsBindersIdRolesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersIdRolesGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersIdRolesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersIdRolesGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersIdRolesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersIdRolesPost(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersIdRolesPost"][_serverIndices.value("objectsBindersIdRolesPost")].URL()+"/objects/binders/{id}/roles");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersIdRolesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersIdRolesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersIdRolesPostSignal();
        Q_EMIT objectsBindersIdRolesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersIdRolesPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersIdRolesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersIdRolesPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersIdRolesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersIdRolesRoleNameGet(const QString &id, const QString &role_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersIdRolesRoleNameGet"][_serverIndices.value("objectsBindersIdRolesRoleNameGet")].URL()+"/objects/binders/{id}/roles/{role_name}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString role_namePathParam("{");
        role_namePathParam.append("role_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "role_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"role_name"+pathSuffix : pathPrefix;
        fullPath.replace(role_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(role_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersIdRolesRoleNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersIdRolesRoleNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersIdRolesRoleNameGetSignal();
        Q_EMIT objectsBindersIdRolesRoleNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersIdRolesRoleNameGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersIdRolesRoleNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersIdRolesRoleNameGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersIdRolesRoleNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet(const QString &id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet"][_serverIndices.value("objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet")].URL()+"/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignal();
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(const QString &id, const QString &major_version, const QString &minor_version, const QString &name__v, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"][_serverIndices.value("objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet")].URL()+"/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString name__vPathParam("{");
        name__vPathParam.append("name__v").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name__v", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name__v"+pathSuffix : pathPrefix;
        fullPath.replace(name__vPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name__v)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignal();
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(const QString &id, const QString &major_version, const QString &minor_version, const QString &name__v, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"][_serverIndices.value("objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut")].URL()+"/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString name__vPathParam("{");
        name__vPathParam.append("name__v").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name__v", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name__v"+pathSuffix : pathPrefix;
        fullPath.replace(name__vPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name__v)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignal();
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalE(error_type, error_str);
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalError(error_type, error_str);
        Q_EMIT objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersLifecycleActionsPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersLifecycleActionsPost"][_serverIndices.value("objectsBindersLifecycleActionsPost")].URL()+"/objects/binders/lifecycle_actions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersLifecycleActionsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersLifecycleActionsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersLifecycleActionsPostSignal();
        Q_EMIT objectsBindersLifecycleActionsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersLifecycleActionsPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersLifecycleActionsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersLifecycleActionsPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersLifecycleActionsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersLifecycleActionsUserActionNamePut(const QString &user_action_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersLifecycleActionsUserActionNamePut"][_serverIndices.value("objectsBindersLifecycleActionsUserActionNamePut")].URL()+"/objects/binders/lifecycle_actions/{user_action_name}");
    
    
    {
        QString user_action_namePathParam("{");
        user_action_namePathParam.append("user_action_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_action_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_action_name"+pathSuffix : pathPrefix;
        fullPath.replace(user_action_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_action_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersLifecycleActionsUserActionNamePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersLifecycleActionsUserActionNamePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersLifecycleActionsUserActionNamePutSignal();
        Q_EMIT objectsBindersLifecycleActionsUserActionNamePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersLifecycleActionsUserActionNamePutSignalE(error_type, error_str);
        Q_EMIT objectsBindersLifecycleActionsUserActionNamePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersLifecycleActionsUserActionNamePutSignalError(error_type, error_str);
        Q_EMIT objectsBindersLifecycleActionsUserActionNamePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersPost(const ::OpenAPI::OptionalParam<bool> &async, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersPost"][_serverIndices.value("objectsBindersPost")].URL()+"/objects/binders");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (async.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "async", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("async")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(async.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersPostSignal();
        Q_EMIT objectsBindersPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersTemplatesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersTemplatesGet"][_serverIndices.value("objectsBindersTemplatesGet")].URL()+"/objects/binders/templates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersTemplatesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersTemplatesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersTemplatesGetSignal();
        Q_EMIT objectsBindersTemplatesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersTemplatesGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersTemplatesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersTemplatesGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersTemplatesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersTemplatesPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersTemplatesPost"][_serverIndices.value("objectsBindersTemplatesPost")].URL()+"/objects/binders/templates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersTemplatesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersTemplatesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersTemplatesPostSignal();
        Q_EMIT objectsBindersTemplatesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersTemplatesPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersTemplatesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersTemplatesPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersTemplatesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersTemplatesPut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersTemplatesPut"][_serverIndices.value("objectsBindersTemplatesPut")].URL()+"/objects/binders/templates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersTemplatesPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersTemplatesPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersTemplatesPutSignal();
        Q_EMIT objectsBindersTemplatesPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersTemplatesPutSignalE(error_type, error_str);
        Q_EMIT objectsBindersTemplatesPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersTemplatesPutSignalError(error_type, error_str);
        Q_EMIT objectsBindersTemplatesPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameBindernodesGet(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersTemplatesTemplateNameBindernodesGet"][_serverIndices.value("objectsBindersTemplatesTemplateNameBindernodesGet")].URL()+"/objects/binders/templates/{template_name}/bindernodes");
    
    
    {
        QString template_namePathParam("{");
        template_namePathParam.append("template_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "template_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"template_name"+pathSuffix : pathPrefix;
        fullPath.replace(template_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersTemplatesTemplateNameBindernodesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameBindernodesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesGetSignal();
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameBindernodesPost(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersTemplatesTemplateNameBindernodesPost"][_serverIndices.value("objectsBindersTemplatesTemplateNameBindernodesPost")].URL()+"/objects/binders/templates/{template_name}/bindernodes");
    
    
    {
        QString template_namePathParam("{");
        template_namePathParam.append("template_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "template_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"template_name"+pathSuffix : pathPrefix;
        fullPath.replace(template_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersTemplatesTemplateNameBindernodesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameBindernodesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPostSignal();
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPostSignalE(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPostSignalError(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameBindernodesPut(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersTemplatesTemplateNameBindernodesPut"][_serverIndices.value("objectsBindersTemplatesTemplateNameBindernodesPut")].URL()+"/objects/binders/templates/{template_name}/bindernodes");
    
    
    {
        QString template_namePathParam("{");
        template_namePathParam.append("template_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "template_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"template_name"+pathSuffix : pathPrefix;
        fullPath.replace(template_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersTemplatesTemplateNameBindernodesPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameBindernodesPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPutSignal();
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPutSignalE(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPutSignalError(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameBindernodesPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameDelete(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersTemplatesTemplateNameDelete"][_serverIndices.value("objectsBindersTemplatesTemplateNameDelete")].URL()+"/objects/binders/templates/{template_name}");
    
    
    {
        QString template_namePathParam("{");
        template_namePathParam.append("template_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "template_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"template_name"+pathSuffix : pathPrefix;
        fullPath.replace(template_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersTemplatesTemplateNameDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersTemplatesTemplateNameDeleteSignal();
        Q_EMIT objectsBindersTemplatesTemplateNameDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameDeleteSignalE(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameDeleteSignalError(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameGet(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsBindersTemplatesTemplateNameGet"][_serverIndices.value("objectsBindersTemplatesTemplateNameGet")].URL()+"/objects/binders/templates/{template_name}");
    
    
    {
        QString template_namePathParam("{");
        template_namePathParam.append("template_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "template_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"template_name"+pathSuffix : pathPrefix;
        fullPath.replace(template_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsBindersTemplatesTemplateNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsBindersTemplatesTemplateNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsBindersTemplatesTemplateNameGetSignal();
        Q_EMIT objectsBindersTemplatesTemplateNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameGetSignalE(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsBindersTemplatesTemplateNameGetSignalError(error_type, error_str);
        Q_EMIT objectsBindersTemplatesTemplateNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDeletionsDocumentsGet(const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDeletionsDocumentsGet"][_serverIndices.value("objectsDeletionsDocumentsGet")].URL()+"/objects/deletions/documents");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (start_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_date.stringValue())));
    }
    if (end_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(end_date.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDeletionsDocumentsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDeletionsDocumentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDeletionsDocumentsGetSignal();
        Q_EMIT objectsDeletionsDocumentsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDeletionsDocumentsGetSignalE(error_type, error_str);
        Q_EMIT objectsDeletionsDocumentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDeletionsDocumentsGetSignalError(error_type, error_str);
        Q_EMIT objectsDeletionsDocumentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDeletionsVobjectsObjectNameGet(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDeletionsVobjectsObjectNameGet"][_serverIndices.value("objectsDeletionsVobjectsObjectNameGet")].URL()+"/objects/deletions/vobjects/{object_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDeletionsVobjectsObjectNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDeletionsVobjectsObjectNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDeletionsVobjectsObjectNameGetSignal();
        Q_EMIT objectsDeletionsVobjectsObjectNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDeletionsVobjectsObjectNameGetSignalE(error_type, error_str);
        Q_EMIT objectsDeletionsVobjectsObjectNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDeletionsVobjectsObjectNameGetSignalError(error_type, error_str);
        Q_EMIT objectsDeletionsVobjectsObjectNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsActionsGet(const ::OpenAPI::OptionalParam<bool> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsActionsGet"][_serverIndices.value("objectsDocumentsActionsGet")].URL()+"/objects/documents/actions");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsActionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsActionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsActionsGetSignal();
        Q_EMIT objectsDocumentsActionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsActionsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsActionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsActionsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsActionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet(const QString &lifecycle_and_state_and_action, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet"][_serverIndices.value("objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet")].URL()+"/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results");
    
    
    {
        QString lifecycle_and_state_and_actionPathParam("{");
        lifecycle_and_state_and_actionPathParam.append("lifecycle_and_state_and_action").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "lifecycle_and_state_and_action", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"lifecycle_and_state_and_action"+pathSuffix : pathPrefix;
        fullPath.replace(lifecycle_and_state_and_actionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(lifecycle_and_state_and_action)));
    }
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignal();
        Q_EMIT objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsActionsWorkflowNameGet(const QString &workflow_name, const ::OpenAPI::OptionalParam<bool> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsActionsWorkflowNameGet"][_serverIndices.value("objectsDocumentsActionsWorkflowNameGet")].URL()+"/objects/documents/actions/{workflow_name}");
    
    
    {
        QString workflow_namePathParam("{");
        workflow_namePathParam.append("workflow_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_name"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsActionsWorkflowNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsActionsWorkflowNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsActionsWorkflowNameGetSignal();
        Q_EMIT objectsDocumentsActionsWorkflowNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsActionsWorkflowNameGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsActionsWorkflowNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsActionsWorkflowNameGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsActionsWorkflowNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsActionsWorkflowNamePost(const QString &workflow_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsActionsWorkflowNamePost"][_serverIndices.value("objectsDocumentsActionsWorkflowNamePost")].URL()+"/objects/documents/actions/{workflow_name}");
    
    
    {
        QString workflow_namePathParam("{");
        workflow_namePathParam.append("workflow_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_name"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsActionsWorkflowNamePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsActionsWorkflowNamePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsActionsWorkflowNamePostSignal();
        Q_EMIT objectsDocumentsActionsWorkflowNamePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsActionsWorkflowNamePostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsActionsWorkflowNamePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsActionsWorkflowNamePostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsActionsWorkflowNamePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsAnnotationsBatchDelete(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsAnnotationsBatchDelete"][_serverIndices.value("objectsDocumentsAnnotationsBatchDelete")].URL()+"/objects/documents/annotations/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsAnnotationsBatchDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsAnnotationsBatchDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsAnnotationsBatchDeleteSignal();
        Q_EMIT objectsDocumentsAnnotationsBatchDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsAnnotationsBatchDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsAnnotationsBatchDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsAnnotationsBatchDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsAnnotationsBatchDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsAnnotationsBatchPost(const QString &authorization, const QString &content_type, const QString &accept, const QString &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsAnnotationsBatchPost"][_serverIndices.value("objectsDocumentsAnnotationsBatchPost")].URL()+"/objects/documents/annotations/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(accept).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsAnnotationsBatchPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsAnnotationsBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsAnnotationsBatchPostSignal();
        Q_EMIT objectsDocumentsAnnotationsBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsAnnotationsBatchPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsAnnotationsBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsAnnotationsBatchPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsAnnotationsBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsAnnotationsBatchPut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsAnnotationsBatchPut"][_serverIndices.value("objectsDocumentsAnnotationsBatchPut")].URL()+"/objects/documents/annotations/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsAnnotationsBatchPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsAnnotationsBatchPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsAnnotationsBatchPutSignal();
        Q_EMIT objectsDocumentsAnnotationsBatchPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsAnnotationsBatchPutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsAnnotationsBatchPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsAnnotationsBatchPutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsAnnotationsBatchPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsAnnotationsRepliesBatchPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsAnnotationsRepliesBatchPost"][_serverIndices.value("objectsDocumentsAnnotationsRepliesBatchPost")].URL()+"/objects/documents/annotations/replies/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsAnnotationsRepliesBatchPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsAnnotationsRepliesBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsAnnotationsRepliesBatchPostSignal();
        Q_EMIT objectsDocumentsAnnotationsRepliesBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsAnnotationsRepliesBatchPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsAnnotationsRepliesBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsAnnotationsRepliesBatchPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsAnnotationsRepliesBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsAttachmentsBatchDelete(const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsAttachmentsBatchDelete"][_serverIndices.value("objectsDocumentsAttachmentsBatchDelete")].URL()+"/objects/documents/attachments/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsAttachmentsBatchDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsAttachmentsBatchDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsAttachmentsBatchDeleteSignal();
        Q_EMIT objectsDocumentsAttachmentsBatchDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsAttachmentsBatchDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsAttachmentsBatchDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsAttachmentsBatchDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsAttachmentsBatchDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsAttachmentsBatchPost(const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsAttachmentsBatchPost"][_serverIndices.value("objectsDocumentsAttachmentsBatchPost")].URL()+"/objects/documents/attachments/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsAttachmentsBatchPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsAttachmentsBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsAttachmentsBatchPostSignal();
        Q_EMIT objectsDocumentsAttachmentsBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsAttachmentsBatchPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsAttachmentsBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsAttachmentsBatchPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsAttachmentsBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsAttachmentsBatchPut(const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsAttachmentsBatchPut"][_serverIndices.value("objectsDocumentsAttachmentsBatchPut")].URL()+"/objects/documents/attachments/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsAttachmentsBatchPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsAttachmentsBatchPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsAttachmentsBatchPutSignal();
        Q_EMIT objectsDocumentsAttachmentsBatchPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsAttachmentsBatchPutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsAttachmentsBatchPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsAttachmentsBatchPutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsAttachmentsBatchPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsBatchActionsFileextractJobIdResultsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsBatchActionsFileextractJobIdResultsGet"][_serverIndices.value("objectsDocumentsBatchActionsFileextractJobIdResultsGet")].URL()+"/objects/documents/batch/actions/fileextract/{job_id}/results");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsBatchActionsFileextractJobIdResultsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsBatchActionsFileextractJobIdResultsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsBatchActionsFileextractJobIdResultsGetSignal();
        Q_EMIT objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsBatchActionsFileextractJobIdResultsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsBatchActionsFileextractPost(const ::OpenAPI::OptionalParam<bool> &source, const ::OpenAPI::OptionalParam<bool> &renditions, const ::OpenAPI::OptionalParam<bool> &allversions, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsBatchActionsFileextractPost"][_serverIndices.value("objectsDocumentsBatchActionsFileextractPost")].URL()+"/objects/documents/batch/actions/fileextract");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (source.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "source", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("source")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(source.stringValue())));
    }
    if (renditions.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "renditions", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("renditions")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(renditions.stringValue())));
    }
    if (allversions.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "allversions", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("allversions")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(allversions.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsBatchActionsFileextractPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsBatchActionsFileextractPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsBatchActionsFileextractPostSignal();
        Q_EMIT objectsDocumentsBatchActionsFileextractPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsBatchActionsFileextractPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsBatchActionsFileextractPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsBatchActionsFileextractPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsBatchActionsFileextractPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsBatchActionsReclassifyPut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsBatchActionsReclassifyPut"][_serverIndices.value("objectsDocumentsBatchActionsReclassifyPut")].URL()+"/objects/documents/batch/actions/reclassify");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsBatchActionsReclassifyPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsBatchActionsReclassifyPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsBatchActionsReclassifyPutSignal();
        Q_EMIT objectsDocumentsBatchActionsReclassifyPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsBatchActionsReclassifyPutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsBatchActionsReclassifyPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsBatchActionsReclassifyPutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsBatchActionsReclassifyPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsBatchActionsRerenderPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsBatchActionsRerenderPost"][_serverIndices.value("objectsDocumentsBatchActionsRerenderPost")].URL()+"/objects/documents/batch/actions/rerender");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsBatchActionsRerenderPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsBatchActionsRerenderPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsBatchActionsRerenderPostSignal();
        Q_EMIT objectsDocumentsBatchActionsRerenderPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsBatchActionsRerenderPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsBatchActionsRerenderPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsBatchActionsRerenderPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsBatchActionsRerenderPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsBatchDelete(const ::OpenAPI::OptionalParam<QString> &id_param, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsBatchDelete"][_serverIndices.value("objectsDocumentsBatchDelete")].URL()+"/objects/documents/batch");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id_param.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "idParam", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("idParam")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(id_param.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsBatchDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsBatchDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsBatchDeleteSignal();
        Q_EMIT objectsDocumentsBatchDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsBatchDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsBatchDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsBatchDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsBatchDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsBatchLockDelete(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsBatchLockDelete"][_serverIndices.value("objectsDocumentsBatchLockDelete")].URL()+"/objects/documents/batch/lock");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsBatchLockDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsBatchLockDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsBatchLockDeleteSignal();
        Q_EMIT objectsDocumentsBatchLockDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsBatchLockDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsBatchLockDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsBatchLockDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsBatchLockDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsBatchPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsBatchPost"][_serverIndices.value("objectsDocumentsBatchPost")].URL()+"/objects/documents/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsBatchPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsBatchPostSignal();
        Q_EMIT objectsDocumentsBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsBatchPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsBatchPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsBatchPut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsBatchPut"][_serverIndices.value("objectsDocumentsBatchPut")].URL()+"/objects/documents/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsBatchPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsBatchPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsBatchPutSignal();
        Q_EMIT objectsDocumentsBatchPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsBatchPutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsBatchPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsBatchPutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsBatchPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAnchorsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAnchorsGet"][_serverIndices.value("objectsDocumentsDocIdAnchorsGet")].URL()+"/objects/documents/{doc_id}/anchors");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAnchorsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAnchorsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAnchorsGetSignal();
        Q_EMIT objectsDocumentsDocIdAnchorsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAnchorsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAnchorsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAnchorsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAnchorsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAnnotationsFileGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAnnotationsFileGet"][_serverIndices.value("objectsDocumentsDocIdAnnotationsFileGet")].URL()+"/objects/documents/{doc_id}/annotations/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAnnotationsFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAnnotationsFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAnnotationsFileGetSignal();
        Q_EMIT objectsDocumentsDocIdAnnotationsFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAnnotationsFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAnnotationsFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAnnotationsFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAnnotationsFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAnnotationsFilePost(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAnnotationsFilePost"][_serverIndices.value("objectsDocumentsDocIdAnnotationsFilePost")].URL()+"/objects/documents/{doc_id}/annotations/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAnnotationsFilePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAnnotationsFilePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAnnotationsFilePostSignal();
        Q_EMIT objectsDocumentsDocIdAnnotationsFilePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAnnotationsFilePostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAnnotationsFilePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAnnotationsFilePostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAnnotationsFilePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdDelete(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsAttachmentIdDelete"][_serverIndices.value("objectsDocumentsDocIdAttachmentsAttachmentIdDelete")].URL()+"/objects/documents/{doc_id}/attachments/{attachment_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdFileGet(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsAttachmentIdFileGet"][_serverIndices.value("objectsDocumentsDocIdAttachmentsAttachmentIdFileGet")].URL()+"/objects/documents/{doc_id}/attachments/{attachment_id}/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdGet(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsAttachmentIdGet"][_serverIndices.value("objectsDocumentsDocIdAttachmentsAttachmentIdGet")].URL()+"/objects/documents/{doc_id}/attachments/{attachment_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdGetSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdPut(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsAttachmentIdPut"][_serverIndices.value("objectsDocumentsDocIdAttachmentsAttachmentIdPut")].URL()+"/objects/documents/{doc_id}/attachments/{attachment_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdPutSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(const QString &doc_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"][_serverIndices.value("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete")].URL()+"/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(const QString &doc_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"][_serverIndices.value("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet")].URL()+"/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(const QString &doc_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"][_serverIndices.value("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet")].URL()+"/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(const QString &doc_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<bool> &restore, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"][_serverIndices.value("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost")].URL()+"/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (restore.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "restore", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("restore")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(restore.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet(const QString &doc_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet"][_serverIndices.value("objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet")].URL()+"/objects/documents/{doc_id}/attachments/{attachment_id}/versions");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsFileGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsFileGet"][_serverIndices.value("objectsDocumentsDocIdAttachmentsFileGet")].URL()+"/objects/documents/{doc_id}/attachments/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsFileGetSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsGet"][_serverIndices.value("objectsDocumentsDocIdAttachmentsGet")].URL()+"/objects/documents/{doc_id}/attachments");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsGetSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsPost(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAttachmentsPost"][_serverIndices.value("objectsDocumentsDocIdAttachmentsPost")].URL()+"/objects/documents/{doc_id}/attachments");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAttachmentsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAttachmentsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAttachmentsPostSignal();
        Q_EMIT objectsDocumentsDocIdAttachmentsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAttachmentsPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAttachmentsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdAudittrailGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<QString> &format_result, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &events, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdAudittrailGet"][_serverIndices.value("objectsDocumentsDocIdAudittrailGet")].URL()+"/objects/documents/{doc_id}/audittrail");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (start_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_date.stringValue())));
    }
    if (end_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(end_date.stringValue())));
    }
    if (format_result.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format_result", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format_result")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(format_result.stringValue())));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    if (events.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "events", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("events")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(events.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdAudittrailGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdAudittrailGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdAudittrailGetSignal();
        Q_EMIT objectsDocumentsDocIdAudittrailGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdAudittrailGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAudittrailGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdAudittrailGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdAudittrailGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdDelete(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdDelete"][_serverIndices.value("objectsDocumentsDocIdDelete")].URL()+"/objects/documents/{doc_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdDeleteSignal();
        Q_EMIT objectsDocumentsDocIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdEventsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdEventsGet"][_serverIndices.value("objectsDocumentsDocIdEventsGet")].URL()+"/objects/documents/{doc_id}/events");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdEventsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdEventsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdEventsGetSignal();
        Q_EMIT objectsDocumentsDocIdEventsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdEventsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdEventsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdEventsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdEventsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdFileGet(const QString &doc_id, const ::OpenAPI::OptionalParam<bool> &lock_document, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdFileGet"][_serverIndices.value("objectsDocumentsDocIdFileGet")].URL()+"/objects/documents/{doc_id}/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (lock_document.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "lockDocument", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("lockDocument")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(lock_document.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdFileGetSignal();
        Q_EMIT objectsDocumentsDocIdFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdGet"][_serverIndices.value("objectsDocumentsDocIdGet")].URL()+"/objects/documents/{doc_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdGetSignal();
        Q_EMIT objectsDocumentsDocIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdLockDelete(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdLockDelete"][_serverIndices.value("objectsDocumentsDocIdLockDelete")].URL()+"/objects/documents/{doc_id}/lock");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdLockDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdLockDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdLockDeleteSignal();
        Q_EMIT objectsDocumentsDocIdLockDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdLockDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdLockDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdLockDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdLockDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdLockGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdLockGet"][_serverIndices.value("objectsDocumentsDocIdLockGet")].URL()+"/objects/documents/{doc_id}/lock");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdLockGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdLockGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdLockGetSignal();
        Q_EMIT objectsDocumentsDocIdLockGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdLockGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdLockGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdLockGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdLockGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdLockPost(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdLockPost"][_serverIndices.value("objectsDocumentsDocIdLockPost")].URL()+"/objects/documents/{doc_id}/lock");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdLockPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdLockPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdLockPostSignal();
        Q_EMIT objectsDocumentsDocIdLockPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdLockPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdLockPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdLockPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdLockPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet"][_serverIndices.value("objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet")].URL()+"/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignal();
        Q_EMIT objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdPost(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &suppress_rendition, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdPost"][_serverIndices.value("objectsDocumentsDocIdPost")].URL()+"/objects/documents/{doc_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (suppress_rendition.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "suppressRendition", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("suppressRendition")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(suppress_rendition.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdPostSignal();
        Q_EMIT objectsDocumentsDocIdPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdPut(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdPut"][_serverIndices.value("objectsDocumentsDocIdPut")].URL()+"/objects/documents/{doc_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdPutSignal();
        Q_EMIT objectsDocumentsDocIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdPutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdPutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdRenditionsGet"][_serverIndices.value("objectsDocumentsDocIdRenditionsGet")].URL()+"/objects/documents/{doc_id}/renditions");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdRenditionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdRenditionsGetSignal();
        Q_EMIT objectsDocumentsDocIdRenditionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypeDelete(const QString &doc_id, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdRenditionsRenditionTypeDelete"][_serverIndices.value("objectsDocumentsDocIdRenditionsRenditionTypeDelete")].URL()+"/objects/documents/{doc_id}/renditions/{rendition_type}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString rendition_typePathParam("{");
        rendition_typePathParam.append("rendition_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendition_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendition_type"+pathSuffix : pathPrefix;
        fullPath.replace(rendition_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendition_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypeDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypeDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignal();
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypeGet(const QString &doc_id, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &steady_state, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdRenditionsRenditionTypeGet"][_serverIndices.value("objectsDocumentsDocIdRenditionsRenditionTypeGet")].URL()+"/objects/documents/{doc_id}/renditions/{rendition_type}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString rendition_typePathParam("{");
        rendition_typePathParam.append("rendition_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendition_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendition_type"+pathSuffix : pathPrefix;
        fullPath.replace(rendition_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendition_type)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (steady_state.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "steadyState", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("steadyState")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(steady_state.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeGetSignal();
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypePost(const QString &doc_id, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdRenditionsRenditionTypePost"][_serverIndices.value("objectsDocumentsDocIdRenditionsRenditionTypePost")].URL()+"/objects/documents/{doc_id}/renditions/{rendition_type}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString rendition_typePathParam("{");
        rendition_typePathParam.append("rendition_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendition_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendition_type"+pathSuffix : pathPrefix;
        fullPath.replace(rendition_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendition_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePostSignal();
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypePut(const QString &doc_id, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdRenditionsRenditionTypePut"][_serverIndices.value("objectsDocumentsDocIdRenditionsRenditionTypePut")].URL()+"/objects/documents/{doc_id}/renditions/{rendition_type}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString rendition_typePathParam("{");
        rendition_typePathParam.append("rendition_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendition_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendition_type"+pathSuffix : pathPrefix;
        fullPath.replace(rendition_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendition_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdRenditionsRenditionTypePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePutSignal();
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRenditionsRenditionTypePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete(const QString &doc_id, const QString &role_name_and_user_or_group, const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete"][_serverIndices.value("objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete")].URL()+"/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString role_name_and_user_or_groupPathParam("{");
        role_name_and_user_or_groupPathParam.append("role_name_and_user_or_group").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "role_name_and_user_or_group", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"role_name_and_user_or_group"+pathSuffix : pathPrefix;
        fullPath.replace(role_name_and_user_or_groupPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(role_name_and_user_or_group)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignal();
        Q_EMIT objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet"][_serverIndices.value("objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet")].URL()+"/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsGet(const QString &doc_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsGet"][_serverIndices.value("objectsDocumentsDocIdVersionsGet")].URL()+"/objects/documents/{doc_id}/versions");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &annotation_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString annotation_idPathParam("{");
        annotation_idPathParam.append("annotation_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "annotation_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"annotation_id"+pathSuffix : pathPrefix;
        fullPath.replace(annotation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(annotation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &annotation_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString annotation_idPathParam("{");
        annotation_idPathParam.append("annotation_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "annotation_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"annotation_id"+pathSuffix : pathPrefix;
        fullPath.replace(annotation_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(annotation_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &annotation_types, const ::OpenAPI::OptionalParam<QString> &pagination_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    if (annotation_types.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "annotation_types", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("annotation_types")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(annotation_types.stringValue())));
    }
    if (pagination_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pagination_id", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pagination_id")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(pagination_id.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &relationship_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString relationship_idPathParam("{");
        relationship_idPathParam.append("relationship_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "relationship_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"relationship_id"+pathSuffix : pathPrefix;
        fullPath.replace(relationship_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(relationship_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &relationship_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString relationship_idPathParam("{");
        relationship_idPathParam.append("relationship_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "relationship_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"relationship_id"+pathSuffix : pathPrefix;
        fullPath.replace(relationship_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(relationship_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString rendition_typePathParam("{");
        rendition_typePathParam.append("rendition_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendition_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendition_type"+pathSuffix : pathPrefix;
        fullPath.replace(rendition_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendition_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString rendition_typePathParam("{");
        rendition_typePathParam.append("rendition_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendition_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendition_type"+pathSuffix : pathPrefix;
        fullPath.replace(rendition_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendition_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString rendition_typePathParam("{");
        rendition_typePathParam.append("rendition_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendition_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendition_type"+pathSuffix : pathPrefix;
        fullPath.replace(rendition_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendition_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut(const QString &doc_id, const QString &major_version, const QString &minor_version, const QString &rendition_type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString rendition_typePathParam("{");
        rendition_typePathParam.append("rendition_type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "rendition_type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"rendition_type"+pathSuffix : pathPrefix;
        fullPath.replace(rendition_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(rendition_type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet(const QString &doc_id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet"][_serverIndices.value("objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet")].URL()+"/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail");
    
    
    {
        QString doc_idPathParam("{");
        doc_idPathParam.append("doc_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "doc_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"doc_id"+pathSuffix : pathPrefix;
        fullPath.replace(doc_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(doc_id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignal();
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsGet(const ::OpenAPI::OptionalParam<QString> &named_filter, const ::OpenAPI::OptionalParam<QString> &scope, const ::OpenAPI::OptionalParam<QString> &versionscope, const ::OpenAPI::OptionalParam<QString> &search, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &sort, const ::OpenAPI::OptionalParam<QString> &start, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsGet"][_serverIndices.value("objectsDocumentsGet")].URL()+"/objects/documents");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (named_filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "named_filter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("named_filter")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(named_filter.stringValue())));
    }
    if (scope.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "scope", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("scope")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(scope.stringValue())));
    }
    if (versionscope.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "versionscope", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("versionscope")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(versionscope.stringValue())));
    }
    if (search.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "search", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("search")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(search.stringValue())));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (sort.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sort", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sort")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort.stringValue())));
    }
    if (start.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsGetSignal();
        Q_EMIT objectsDocumentsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsIdRolesGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsIdRolesGet"][_serverIndices.value("objectsDocumentsIdRolesGet")].URL()+"/objects/documents/{id}/roles");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsIdRolesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsIdRolesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsIdRolesGetSignal();
        Q_EMIT objectsDocumentsIdRolesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsIdRolesGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsIdRolesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsIdRolesGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsIdRolesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsIdRolesPost(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsIdRolesPost"][_serverIndices.value("objectsDocumentsIdRolesPost")].URL()+"/objects/documents/{id}/roles");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsIdRolesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsIdRolesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsIdRolesPostSignal();
        Q_EMIT objectsDocumentsIdRolesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsIdRolesPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsIdRolesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsIdRolesPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsIdRolesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsIdRolesRoleNameGet(const QString &id, const QString &role_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsIdRolesRoleNameGet"][_serverIndices.value("objectsDocumentsIdRolesRoleNameGet")].URL()+"/objects/documents/{id}/roles/{role_name}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString role_namePathParam("{");
        role_namePathParam.append("role_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "role_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"role_name"+pathSuffix : pathPrefix;
        fullPath.replace(role_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(role_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsIdRolesRoleNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsIdRolesRoleNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsIdRolesRoleNameGetSignal();
        Q_EMIT objectsDocumentsIdRolesRoleNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsIdRolesRoleNameGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsIdRolesRoleNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsIdRolesRoleNameGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsIdRolesRoleNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet(const QString &id, const QString &major_version, const QString &minor_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet"][_serverIndices.value("objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet")].URL()+"/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignal();
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet(const QString &id, const QString &major_version, const QString &minor_version, const QString &name__v, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"][_serverIndices.value("objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet")].URL()+"/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString name__vPathParam("{");
        name__vPathParam.append("name__v").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name__v", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name__v"+pathSuffix : pathPrefix;
        fullPath.replace(name__vPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name__v)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignal();
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut(const QString &id, const QString &major_version, const QString &minor_version, const QString &name__v, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"][_serverIndices.value("objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut")].URL()+"/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString major_versionPathParam("{");
        major_versionPathParam.append("major_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "major_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"major_version"+pathSuffix : pathPrefix;
        fullPath.replace(major_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(major_version)));
    }
    
    {
        QString minor_versionPathParam("{");
        minor_versionPathParam.append("minor_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "minor_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"minor_version"+pathSuffix : pathPrefix;
        fullPath.replace(minor_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(minor_version)));
    }
    
    {
        QString name__vPathParam("{");
        name__vPathParam.append("name__v").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name__v", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name__v"+pathSuffix : pathPrefix;
        fullPath.replace(name__vPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name__v)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignal();
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsLifecycleActionsPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsLifecycleActionsPost"][_serverIndices.value("objectsDocumentsLifecycleActionsPost")].URL()+"/objects/documents/lifecycle_actions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsLifecycleActionsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsLifecycleActionsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsLifecycleActionsPostSignal();
        Q_EMIT objectsDocumentsLifecycleActionsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsLifecycleActionsPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsLifecycleActionsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsLifecycleActionsPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsLifecycleActionsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsLifecycleActionsUserActionNamePut(const QString &user_action_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsLifecycleActionsUserActionNamePut"][_serverIndices.value("objectsDocumentsLifecycleActionsUserActionNamePut")].URL()+"/objects/documents/lifecycle_actions/{user_action_name}");
    
    
    {
        QString user_action_namePathParam("{");
        user_action_namePathParam.append("user_action_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_action_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_action_name"+pathSuffix : pathPrefix;
        fullPath.replace(user_action_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_action_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsLifecycleActionsUserActionNamePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsLifecycleActionsUserActionNamePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsLifecycleActionsUserActionNamePutSignal();
        Q_EMIT objectsDocumentsLifecycleActionsUserActionNamePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsLifecycleActionsUserActionNamePutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsLifecycleActionsUserActionNamePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsLifecycleActionsUserActionNamePutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsLifecycleActionsUserActionNamePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsPost"][_serverIndices.value("objectsDocumentsPost")].URL()+"/objects/documents");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsPostSignal();
        Q_EMIT objectsDocumentsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsRelationshipsBatchDelete(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsRelationshipsBatchDelete"][_serverIndices.value("objectsDocumentsRelationshipsBatchDelete")].URL()+"/objects/documents/relationships/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsRelationshipsBatchDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsRelationshipsBatchDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsRelationshipsBatchDeleteSignal();
        Q_EMIT objectsDocumentsRelationshipsBatchDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsRelationshipsBatchDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsRelationshipsBatchDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsRelationshipsBatchDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsRelationshipsBatchDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsRelationshipsBatchPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsRelationshipsBatchPost"][_serverIndices.value("objectsDocumentsRelationshipsBatchPost")].URL()+"/objects/documents/relationships/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsRelationshipsBatchPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsRelationshipsBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsRelationshipsBatchPostSignal();
        Q_EMIT objectsDocumentsRelationshipsBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsRelationshipsBatchPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsRelationshipsBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsRelationshipsBatchPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsRelationshipsBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsRenditionsBatchDelete(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsRenditionsBatchDelete"][_serverIndices.value("objectsDocumentsRenditionsBatchDelete")].URL()+"/objects/documents/renditions/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsRenditionsBatchDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsRenditionsBatchDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsRenditionsBatchDeleteSignal();
        Q_EMIT objectsDocumentsRenditionsBatchDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsRenditionsBatchDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsRenditionsBatchDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsRenditionsBatchDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsRenditionsBatchDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsRenditionsBatchPost(const ::OpenAPI::OptionalParam<QString> &id_param, const ::OpenAPI::OptionalParam<QString> &large_size_asset, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsRenditionsBatchPost"][_serverIndices.value("objectsDocumentsRenditionsBatchPost")].URL()+"/objects/documents/renditions/batch");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id_param.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "idParam", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("idParam")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(id_param.stringValue())));
    }
    if (large_size_asset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "largeSizeAsset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("largeSizeAsset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(large_size_asset.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsRenditionsBatchPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsRenditionsBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsRenditionsBatchPostSignal();
        Q_EMIT objectsDocumentsRenditionsBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsRenditionsBatchPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsRenditionsBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsRenditionsBatchPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsRenditionsBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsRolesBatchDelete(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsRolesBatchDelete"][_serverIndices.value("objectsDocumentsRolesBatchDelete")].URL()+"/objects/documents/roles/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsRolesBatchDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsRolesBatchDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsRolesBatchDeleteSignal();
        Q_EMIT objectsDocumentsRolesBatchDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsRolesBatchDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsRolesBatchDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsRolesBatchDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsRolesBatchDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsRolesBatchPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsRolesBatchPost"][_serverIndices.value("objectsDocumentsRolesBatchPost")].URL()+"/objects/documents/roles/batch");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsRolesBatchPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsRolesBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsRolesBatchPostSignal();
        Q_EMIT objectsDocumentsRolesBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsRolesBatchPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsRolesBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsRolesBatchPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsRolesBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsTemplatesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsTemplatesGet"][_serverIndices.value("objectsDocumentsTemplatesGet")].URL()+"/objects/documents/templates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsTemplatesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsTemplatesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsTemplatesGetSignal();
        Q_EMIT objectsDocumentsTemplatesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsTemplatesGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsTemplatesGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsTemplatesPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsTemplatesPost"][_serverIndices.value("objectsDocumentsTemplatesPost")].URL()+"/objects/documents/templates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsTemplatesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsTemplatesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsTemplatesPostSignal();
        Q_EMIT objectsDocumentsTemplatesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsTemplatesPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsTemplatesPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsTemplatesPut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsTemplatesPut"][_serverIndices.value("objectsDocumentsTemplatesPut")].URL()+"/objects/documents/templates");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsTemplatesPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsTemplatesPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsTemplatesPutSignal();
        Q_EMIT objectsDocumentsTemplatesPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsTemplatesPutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsTemplatesPutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsTemplatesTemplateNameDelete(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsTemplatesTemplateNameDelete"][_serverIndices.value("objectsDocumentsTemplatesTemplateNameDelete")].URL()+"/objects/documents/templates/{template_name}");
    
    
    {
        QString template_namePathParam("{");
        template_namePathParam.append("template_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "template_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"template_name"+pathSuffix : pathPrefix;
        fullPath.replace(template_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsTemplatesTemplateNameDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsTemplatesTemplateNameDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsTemplatesTemplateNameDeleteSignal();
        Q_EMIT objectsDocumentsTemplatesTemplateNameDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsTemplatesTemplateNameDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesTemplateNameDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsTemplatesTemplateNameDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesTemplateNameDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsTemplatesTemplateNameFileGet(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsTemplatesTemplateNameFileGet"][_serverIndices.value("objectsDocumentsTemplatesTemplateNameFileGet")].URL()+"/objects/documents/templates/{template_name}/file");
    
    
    {
        QString template_namePathParam("{");
        template_namePathParam.append("template_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "template_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"template_name"+pathSuffix : pathPrefix;
        fullPath.replace(template_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsTemplatesTemplateNameFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsTemplatesTemplateNameFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsTemplatesTemplateNameFileGetSignal();
        Q_EMIT objectsDocumentsTemplatesTemplateNameFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsTemplatesTemplateNameFileGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesTemplateNameFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsTemplatesTemplateNameFileGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesTemplateNameFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsTemplatesTemplateNameGet(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsTemplatesTemplateNameGet"][_serverIndices.value("objectsDocumentsTemplatesTemplateNameGet")].URL()+"/objects/documents/templates/{template_name}");
    
    
    {
        QString template_namePathParam("{");
        template_namePathParam.append("template_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "template_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"template_name"+pathSuffix : pathPrefix;
        fullPath.replace(template_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsTemplatesTemplateNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsTemplatesTemplateNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsTemplatesTemplateNameGetSignal();
        Q_EMIT objectsDocumentsTemplatesTemplateNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsTemplatesTemplateNameGetSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesTemplateNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsTemplatesTemplateNameGetSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesTemplateNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsTemplatesTemplateNamePut(const QString &template_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsTemplatesTemplateNamePut"][_serverIndices.value("objectsDocumentsTemplatesTemplateNamePut")].URL()+"/objects/documents/templates/{template_name}");
    
    
    {
        QString template_namePathParam("{");
        template_namePathParam.append("template_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "template_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"template_name"+pathSuffix : pathPrefix;
        fullPath.replace(template_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(template_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsTemplatesTemplateNamePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsTemplatesTemplateNamePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsTemplatesTemplateNamePutSignal();
        Q_EMIT objectsDocumentsTemplatesTemplateNamePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsTemplatesTemplateNamePutSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesTemplateNamePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsTemplatesTemplateNamePutSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsTemplatesTemplateNamePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsTokensPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsTokensPost"][_serverIndices.value("objectsDocumentsTokensPost")].URL()+"/objects/documents/tokens");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsTokensPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsTokensPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsTokensPostSignal();
        Q_EMIT objectsDocumentsTokensPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsTokensPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsTokensPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsTokensPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsTokensPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsVersionsBatchActionsFileextractPost(const ::OpenAPI::OptionalParam<bool> &source, const ::OpenAPI::OptionalParam<bool> &renditions, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsVersionsBatchActionsFileextractPost"][_serverIndices.value("objectsDocumentsVersionsBatchActionsFileextractPost")].URL()+"/objects/documents/versions/batch/actions/fileextract");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (source.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "source", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("source")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(source.stringValue())));
    }
    if (renditions.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "renditions", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("renditions")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(renditions.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsVersionsBatchActionsFileextractPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsVersionsBatchActionsFileextractPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsVersionsBatchActionsFileextractPostSignal();
        Q_EMIT objectsDocumentsVersionsBatchActionsFileextractPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsVersionsBatchActionsFileextractPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsVersionsBatchActionsFileextractPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsVersionsBatchActionsFileextractPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsVersionsBatchActionsFileextractPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsVersionsBatchDelete(const ::OpenAPI::OptionalParam<QString> &id_param, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsVersionsBatchDelete"][_serverIndices.value("objectsDocumentsVersionsBatchDelete")].URL()+"/objects/documents/versions/batch");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id_param.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "idParam", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("idParam")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(id_param.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsVersionsBatchDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsVersionsBatchDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsVersionsBatchDeleteSignal();
        Q_EMIT objectsDocumentsVersionsBatchDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsVersionsBatchDeleteSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsVersionsBatchDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsVersionsBatchDeleteSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsVersionsBatchDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDocumentsVersionsBatchPost(const ::OpenAPI::OptionalParam<QString> &id_param, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDocumentsVersionsBatchPost"][_serverIndices.value("objectsDocumentsVersionsBatchPost")].URL()+"/objects/documents/versions/batch");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id_param.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "idParam", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("idParam")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(id_param.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDocumentsVersionsBatchPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDocumentsVersionsBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDocumentsVersionsBatchPostSignal();
        Q_EMIT objectsDocumentsVersionsBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDocumentsVersionsBatchPostSignalE(error_type, error_str);
        Q_EMIT objectsDocumentsVersionsBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDocumentsVersionsBatchPostSignalError(error_type, error_str);
        Q_EMIT objectsDocumentsVersionsBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDomainGet(const ::OpenAPI::OptionalParam<bool> &include_application, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDomainGet"][_serverIndices.value("objectsDomainGet")].URL()+"/objects/domain");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (include_application.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "include_application", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("include_application")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_application.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDomainGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDomainGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDomainGetSignal();
        Q_EMIT objectsDomainGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDomainGetSignalE(error_type, error_str);
        Q_EMIT objectsDomainGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDomainGetSignalError(error_type, error_str);
        Q_EMIT objectsDomainGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsDomainsGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsDomainsGet"][_serverIndices.value("objectsDomainsGet")].URL()+"/objects/domains");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsDomainsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsDomainsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsDomainsGetSignal();
        Q_EMIT objectsDomainsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsDomainsGetSignalE(error_type, error_str);
        Q_EMIT objectsDomainsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsDomainsGetSignalError(error_type, error_str);
        Q_EMIT objectsDomainsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsEdlMatchedDocumentsBatchActionsAddPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsEdlMatchedDocumentsBatchActionsAddPost"][_serverIndices.value("objectsEdlMatchedDocumentsBatchActionsAddPost")].URL()+"/objects/edl_matched_documents/batch/actions/add");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsEdlMatchedDocumentsBatchActionsAddPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsEdlMatchedDocumentsBatchActionsAddPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsEdlMatchedDocumentsBatchActionsAddPostSignal();
        Q_EMIT objectsEdlMatchedDocumentsBatchActionsAddPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsEdlMatchedDocumentsBatchActionsAddPostSignalE(error_type, error_str);
        Q_EMIT objectsEdlMatchedDocumentsBatchActionsAddPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsEdlMatchedDocumentsBatchActionsAddPostSignalError(error_type, error_str);
        Q_EMIT objectsEdlMatchedDocumentsBatchActionsAddPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsEdlMatchedDocumentsBatchActionsRemovePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsEdlMatchedDocumentsBatchActionsRemovePost"][_serverIndices.value("objectsEdlMatchedDocumentsBatchActionsRemovePost")].URL()+"/objects/edl_matched_documents/batch/actions/remove");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsEdlMatchedDocumentsBatchActionsRemovePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsEdlMatchedDocumentsBatchActionsRemovePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsEdlMatchedDocumentsBatchActionsRemovePostSignal();
        Q_EMIT objectsEdlMatchedDocumentsBatchActionsRemovePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsEdlMatchedDocumentsBatchActionsRemovePostSignalE(error_type, error_str);
        Q_EMIT objectsEdlMatchedDocumentsBatchActionsRemovePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsEdlMatchedDocumentsBatchActionsRemovePostSignalError(error_type, error_str);
        Q_EMIT objectsEdlMatchedDocumentsBatchActionsRemovePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsGroupsAutoGet(const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsGroupsAutoGet"][_serverIndices.value("objectsGroupsAutoGet")].URL()+"/objects/groups/auto");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsGroupsAutoGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsGroupsAutoGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsGroupsAutoGetSignal();
        Q_EMIT objectsGroupsAutoGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsGroupsAutoGetSignalE(error_type, error_str);
        Q_EMIT objectsGroupsAutoGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsGroupsAutoGetSignalError(error_type, error_str);
        Q_EMIT objectsGroupsAutoGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsGroupsGet(const ::OpenAPI::OptionalParam<QString> &include_implied, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsGroupsGet"][_serverIndices.value("objectsGroupsGet")].URL()+"/objects/groups");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (include_implied.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "includeImplied", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("includeImplied")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_implied.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsGroupsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsGroupsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsGroupsGetSignal();
        Q_EMIT objectsGroupsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsGroupsGetSignalE(error_type, error_str);
        Q_EMIT objectsGroupsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsGroupsGetSignalError(error_type, error_str);
        Q_EMIT objectsGroupsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsGroupsGroupIdDelete(const QString &group_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsGroupsGroupIdDelete"][_serverIndices.value("objectsGroupsGroupIdDelete")].URL()+"/objects/groups/{group_id}");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"group_id"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsGroupsGroupIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsGroupsGroupIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsGroupsGroupIdDeleteSignal();
        Q_EMIT objectsGroupsGroupIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsGroupsGroupIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsGroupsGroupIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsGroupsGroupIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsGroupsGroupIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsGroupsGroupIdGet(const QString &group_id, const ::OpenAPI::OptionalParam<bool> &include_implied, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsGroupsGroupIdGet"][_serverIndices.value("objectsGroupsGroupIdGet")].URL()+"/objects/groups/{group_id}");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"group_id"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (include_implied.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "includeImplied", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("includeImplied")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(include_implied.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsGroupsGroupIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsGroupsGroupIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsGroupsGroupIdGetSignal();
        Q_EMIT objectsGroupsGroupIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsGroupsGroupIdGetSignalE(error_type, error_str);
        Q_EMIT objectsGroupsGroupIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsGroupsGroupIdGetSignalError(error_type, error_str);
        Q_EMIT objectsGroupsGroupIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsGroupsGroupIdPut(const QString &group_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsGroupsGroupIdPut"][_serverIndices.value("objectsGroupsGroupIdPut")].URL()+"/objects/groups/{group_id}");
    
    
    {
        QString group_idPathParam("{");
        group_idPathParam.append("group_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "group_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"group_id"+pathSuffix : pathPrefix;
        fullPath.replace(group_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(group_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsGroupsGroupIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsGroupsGroupIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsGroupsGroupIdPutSignal();
        Q_EMIT objectsGroupsGroupIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsGroupsGroupIdPutSignalE(error_type, error_str);
        Q_EMIT objectsGroupsGroupIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsGroupsGroupIdPutSignalError(error_type, error_str);
        Q_EMIT objectsGroupsGroupIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsGroupsPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsGroupsPost"][_serverIndices.value("objectsGroupsPost")].URL()+"/objects/groups");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsGroupsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsGroupsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsGroupsPostSignal();
        Q_EMIT objectsGroupsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsGroupsPostSignalE(error_type, error_str);
        Q_EMIT objectsGroupsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsGroupsPostSignalError(error_type, error_str);
        Q_EMIT objectsGroupsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsLicensesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsLicensesGet"][_serverIndices.value("objectsLicensesGet")].URL()+"/objects/licenses");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsLicensesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsLicensesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsLicensesGetSignal();
        Q_EMIT objectsLicensesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsLicensesGetSignalE(error_type, error_str);
        Q_EMIT objectsLicensesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsLicensesGetSignalError(error_type, error_str);
        Q_EMIT objectsLicensesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsActionsGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsActionsGet"][_serverIndices.value("objectsObjectworkflowsActionsGet")].URL()+"/objects/objectworkflows/actions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsActionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsActionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsActionsGetSignal();
        Q_EMIT objectsObjectworkflowsActionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsActionsGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsActionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsActionsGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsActionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsActionsWorkflowNameGet(const QString &workflow_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsActionsWorkflowNameGet"][_serverIndices.value("objectsObjectworkflowsActionsWorkflowNameGet")].URL()+"/objects/objectworkflows/actions/{workflow_name}");
    
    
    {
        QString workflow_namePathParam("{");
        workflow_namePathParam.append("workflow_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_name"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsActionsWorkflowNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsActionsWorkflowNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsActionsWorkflowNameGetSignal();
        Q_EMIT objectsObjectworkflowsActionsWorkflowNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsActionsWorkflowNameGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsActionsWorkflowNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsActionsWorkflowNameGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsActionsWorkflowNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsActionsWorkflowNamePost(const QString &workflow_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsActionsWorkflowNamePost"][_serverIndices.value("objectsObjectworkflowsActionsWorkflowNamePost")].URL()+"/objects/objectworkflows/actions/{workflow_name}");
    
    
    {
        QString workflow_namePathParam("{");
        workflow_namePathParam.append("workflow_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_name"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsActionsWorkflowNamePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsActionsWorkflowNamePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsActionsWorkflowNamePostSignal();
        Q_EMIT objectsObjectworkflowsActionsWorkflowNamePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsActionsWorkflowNamePostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsActionsWorkflowNamePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsActionsWorkflowNamePostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsActionsWorkflowNamePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsGet(const ::OpenAPI::OptionalParam<QString> &object__v, const ::OpenAPI::OptionalParam<QString> &record_id__v, const ::OpenAPI::OptionalParam<QString> &participant, const ::OpenAPI::OptionalParam<QString> &status__v, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &page_size, const ::OpenAPI::OptionalParam<QString> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsGet"][_serverIndices.value("objectsObjectworkflowsGet")].URL()+"/objects/objectworkflows");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (object__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "object__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("object__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(object__v.stringValue())));
    }
    if (record_id__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "record_id__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("record_id__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(record_id__v.stringValue())));
    }
    if (participant.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "participant", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("participant")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(participant.stringValue())));
    }
    if (status__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("status__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(status__v.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page_size", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page_size")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size.stringValue())));
    }
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsGetSignal();
        Q_EMIT objectsObjectworkflowsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksGet(const ::OpenAPI::OptionalParam<QString> &object__v, const ::OpenAPI::OptionalParam<QString> &record_id__v, const ::OpenAPI::OptionalParam<QString> &assignee__v, const ::OpenAPI::OptionalParam<QString> &status__v, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &page_size, const ::OpenAPI::OptionalParam<QString> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksGet"][_serverIndices.value("objectsObjectworkflowsTasksGet")].URL()+"/objects/objectworkflows/tasks");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (object__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "object__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("object__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(object__v.stringValue())));
    }
    if (record_id__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "record_id__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("record_id__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(record_id__v.stringValue())));
    }
    if (assignee__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "assignee__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("assignee__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(assignee__v.stringValue())));
    }
    if (status__v.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status__v", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("status__v")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(status__v.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page_size", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page_size")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_size.stringValue())));
    }
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksGetSignal();
        Q_EMIT objectsObjectworkflowsTasksGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsAcceptPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsAcceptPost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsAcceptPost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/accept");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsAcceptPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsAcceptPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsAcceptPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsCancelPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsCancelPost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsCancelPost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/cancel");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsCancelPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsCancelPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCancelPostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCancelPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsCompletePost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsCompletePost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsCompletePost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/complete");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsCompletePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsCompletePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCompletePostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsCompletePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsGet(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsGet"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsGet")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsGetSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwacceptPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwcompletePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsMdwreassignPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsReassignPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsReassignPost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsReassignPost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/reassign");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsReassignPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsReassignPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsReassignPostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsReassignPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsTaskActionGet(const QString &task_id, const QString &task_action, const ::OpenAPI::OptionalParam<QString> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsTaskActionGet"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsTaskActionGet")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/{task_action}");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    
    {
        QString task_actionPathParam("{");
        task_actionPathParam.append("task_action").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_action", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_action"+pathSuffix : pathPrefix;
        fullPath.replace(task_actionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_action)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsTaskActionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsTaskActionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsTaskActionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/undoaccept");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUndoacceptPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost(const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost")].URL()+"/objects/objectworkflows/tasks/{task_id}/actions/updateduedate");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdGet(const QString &task_id, const ::OpenAPI::OptionalParam<bool> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsTasksTaskIdGet"][_serverIndices.value("objectsObjectworkflowsTasksTaskIdGet")].URL()+"/objects/objectworkflows/tasks/{task_id}");
    
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsTasksTaskIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsTasksTaskIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsTasksTaskIdGetSignal();
        Q_EMIT objectsObjectworkflowsTasksTaskIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsTasksTaskIdGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsTasksTaskIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsWorkflowIdActionsGet(const QString &workflow_id, const ::OpenAPI::OptionalParam<QString> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsWorkflowIdActionsGet"][_serverIndices.value("objectsObjectworkflowsWorkflowIdActionsGet")].URL()+"/objects/objectworkflows/{workflow_id}/actions");
    
    
    {
        QString workflow_idPathParam("{");
        workflow_idPathParam.append("workflow_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_id"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsWorkflowIdActionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsWorkflowIdActionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsGetSignal();
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsWorkflowIdActionsGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsWorkflowIdActionsGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet(const QString &workflow_id, const QString &workflow_action, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet"][_serverIndices.value("objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet")].URL()+"/objects/objectworkflows/{workflow_id}/actions/{workflow_action}");
    
    
    {
        QString workflow_idPathParam("{");
        workflow_idPathParam.append("workflow_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_id"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_id)));
    }
    
    {
        QString workflow_actionPathParam("{");
        workflow_actionPathParam.append("workflow_action").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_action", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_action"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_actionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_action)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignal();
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost(const QString &workflow_id, const QString &workflow_action, const ::OpenAPI::OptionalParam<QString> &documents__sys, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost"][_serverIndices.value("objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost")].URL()+"/objects/objectworkflows/{workflow_id}/actions/{workflow_action}");
    
    
    {
        QString workflow_idPathParam("{");
        workflow_idPathParam.append("workflow_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_id"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_id)));
    }
    
    {
        QString workflow_actionPathParam("{");
        workflow_actionPathParam.append("workflow_action").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_action", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_action"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_actionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_action)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (documents__sys.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "documents__sys", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("documents__sys")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(documents__sys.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignal();
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsWorkflowIdActionsWorkflowActionPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsObjectworkflowsWorkflowIdGet(const QString &workflow_id, const ::OpenAPI::OptionalParam<bool> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsObjectworkflowsWorkflowIdGet"][_serverIndices.value("objectsObjectworkflowsWorkflowIdGet")].URL()+"/objects/objectworkflows/{workflow_id}");
    
    
    {
        QString workflow_idPathParam("{");
        workflow_idPathParam.append("workflow_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workflow_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workflow_id"+pathSuffix : pathPrefix;
        fullPath.replace(workflow_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workflow_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsObjectworkflowsWorkflowIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsObjectworkflowsWorkflowIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsObjectworkflowsWorkflowIdGetSignal();
        Q_EMIT objectsObjectworkflowsWorkflowIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsObjectworkflowsWorkflowIdGetSignalE(error_type, error_str);
        Q_EMIT objectsObjectworkflowsWorkflowIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsObjectworkflowsWorkflowIdGetSignalError(error_type, error_str);
        Q_EMIT objectsObjectworkflowsWorkflowIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsPicklistsGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsPicklistsGet"][_serverIndices.value("objectsPicklistsGet")].URL()+"/objects/picklists");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsPicklistsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsPicklistsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsPicklistsGetSignal();
        Q_EMIT objectsPicklistsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsPicklistsGetSignalE(error_type, error_str);
        Q_EMIT objectsPicklistsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsPicklistsGetSignalError(error_type, error_str);
        Q_EMIT objectsPicklistsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsPicklistsPicklistNameGet(const QString &picklist_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsPicklistsPicklistNameGet"][_serverIndices.value("objectsPicklistsPicklistNameGet")].URL()+"/objects/picklists/{picklist_name}");
    
    
    {
        QString picklist_namePathParam("{");
        picklist_namePathParam.append("picklist_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "picklist_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"picklist_name"+pathSuffix : pathPrefix;
        fullPath.replace(picklist_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(picklist_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsPicklistsPicklistNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsPicklistsPicklistNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsPicklistsPicklistNameGetSignal();
        Q_EMIT objectsPicklistsPicklistNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsPicklistsPicklistNameGetSignalE(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsPicklistsPicklistNameGetSignalError(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsPicklistsPicklistNamePicklistValueNameDelete(const QString &picklist_name, const QString &picklist_value_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsPicklistsPicklistNamePicklistValueNameDelete"][_serverIndices.value("objectsPicklistsPicklistNamePicklistValueNameDelete")].URL()+"/objects/picklists/{picklist_name}/{picklist_value_name}");
    
    
    {
        QString picklist_namePathParam("{");
        picklist_namePathParam.append("picklist_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "picklist_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"picklist_name"+pathSuffix : pathPrefix;
        fullPath.replace(picklist_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(picklist_name)));
    }
    
    {
        QString picklist_value_namePathParam("{");
        picklist_value_namePathParam.append("picklist_value_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "picklist_value_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"picklist_value_name"+pathSuffix : pathPrefix;
        fullPath.replace(picklist_value_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(picklist_value_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsPicklistsPicklistNamePicklistValueNameDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsPicklistsPicklistNamePicklistValueNameDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsPicklistsPicklistNamePicklistValueNameDeleteSignal();
        Q_EMIT objectsPicklistsPicklistNamePicklistValueNameDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsPicklistsPicklistNamePicklistValueNameDeleteSignalE(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNamePicklistValueNameDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsPicklistsPicklistNamePicklistValueNameDeleteSignalError(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNamePicklistValueNameDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsPicklistsPicklistNamePicklistValueNamePut(const QString &picklist_name, const QString &picklist_value_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsPicklistsPicklistNamePicklistValueNamePut"][_serverIndices.value("objectsPicklistsPicklistNamePicklistValueNamePut")].URL()+"/objects/picklists/{picklist_name}/{picklist_value_name}");
    
    
    {
        QString picklist_namePathParam("{");
        picklist_namePathParam.append("picklist_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "picklist_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"picklist_name"+pathSuffix : pathPrefix;
        fullPath.replace(picklist_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(picklist_name)));
    }
    
    {
        QString picklist_value_namePathParam("{");
        picklist_value_namePathParam.append("picklist_value_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "picklist_value_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"picklist_value_name"+pathSuffix : pathPrefix;
        fullPath.replace(picklist_value_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(picklist_value_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsPicklistsPicklistNamePicklistValueNamePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsPicklistsPicklistNamePicklistValueNamePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsPicklistsPicklistNamePicklistValueNamePutSignal();
        Q_EMIT objectsPicklistsPicklistNamePicklistValueNamePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsPicklistsPicklistNamePicklistValueNamePutSignalE(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNamePicklistValueNamePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsPicklistsPicklistNamePicklistValueNamePutSignalError(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNamePicklistValueNamePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsPicklistsPicklistNamePost(const QString &picklist_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsPicklistsPicklistNamePost"][_serverIndices.value("objectsPicklistsPicklistNamePost")].URL()+"/objects/picklists/{picklist_name}");
    
    
    {
        QString picklist_namePathParam("{");
        picklist_namePathParam.append("picklist_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "picklist_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"picklist_name"+pathSuffix : pathPrefix;
        fullPath.replace(picklist_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(picklist_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsPicklistsPicklistNamePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsPicklistsPicklistNamePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsPicklistsPicklistNamePostSignal();
        Q_EMIT objectsPicklistsPicklistNamePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsPicklistsPicklistNamePostSignalE(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNamePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsPicklistsPicklistNamePostSignalError(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNamePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsPicklistsPicklistNamePut(const QString &picklist_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsPicklistsPicklistNamePut"][_serverIndices.value("objectsPicklistsPicklistNamePut")].URL()+"/objects/picklists/{picklist_name}");
    
    
    {
        QString picklist_namePathParam("{");
        picklist_namePathParam.append("picklist_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "picklist_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"picklist_name"+pathSuffix : pathPrefix;
        fullPath.replace(picklist_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(picklist_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsPicklistsPicklistNamePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsPicklistsPicklistNamePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsPicklistsPicklistNamePutSignal();
        Q_EMIT objectsPicklistsPicklistNamePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsPicklistsPicklistNamePutSignalE(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNamePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsPicklistsPicklistNamePutSignalError(error_type, error_str);
        Q_EMIT objectsPicklistsPicklistNamePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxActionsBuildproductionPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxActionsBuildproductionPost"][_serverIndices.value("objectsSandboxActionsBuildproductionPost")].URL()+"/objects/sandbox/actions/buildproduction");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxActionsBuildproductionPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxActionsBuildproductionPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxActionsBuildproductionPostSignal();
        Q_EMIT objectsSandboxActionsBuildproductionPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxActionsBuildproductionPostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxActionsBuildproductionPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxActionsBuildproductionPostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxActionsBuildproductionPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxActionsPromoteproductionPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxActionsPromoteproductionPost"][_serverIndices.value("objectsSandboxActionsPromoteproductionPost")].URL()+"/objects/sandbox/actions/promoteproduction");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxActionsPromoteproductionPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxActionsPromoteproductionPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxActionsPromoteproductionPostSignal();
        Q_EMIT objectsSandboxActionsPromoteproductionPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxActionsPromoteproductionPostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxActionsPromoteproductionPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxActionsPromoteproductionPostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxActionsPromoteproductionPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxActionsRecheckusagePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxActionsRecheckusagePost"][_serverIndices.value("objectsSandboxActionsRecheckusagePost")].URL()+"/objects/sandbox/actions/recheckusage");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxActionsRecheckusagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxActionsRecheckusagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxActionsRecheckusagePostSignal();
        Q_EMIT objectsSandboxActionsRecheckusagePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxActionsRecheckusagePostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxActionsRecheckusagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxActionsRecheckusagePostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxActionsRecheckusagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxBatchChangesizePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxBatchChangesizePost"][_serverIndices.value("objectsSandboxBatchChangesizePost")].URL()+"/objects/sandbox/batch/changesize");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxBatchChangesizePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxBatchChangesizePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxBatchChangesizePostSignal();
        Q_EMIT objectsSandboxBatchChangesizePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxBatchChangesizePostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxBatchChangesizePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxBatchChangesizePostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxBatchChangesizePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxEntitlementsSetPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxEntitlementsSetPost"][_serverIndices.value("objectsSandboxEntitlementsSetPost")].URL()+"/objects/sandbox/entitlements/set");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxEntitlementsSetPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxEntitlementsSetPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxEntitlementsSetPostSignal();
        Q_EMIT objectsSandboxEntitlementsSetPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxEntitlementsSetPostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxEntitlementsSetPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxEntitlementsSetPostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxEntitlementsSetPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxGet"][_serverIndices.value("objectsSandboxGet")].URL()+"/objects/sandbox");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxGetSignal();
        Q_EMIT objectsSandboxGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxGetSignalE(error_type, error_str);
        Q_EMIT objectsSandboxGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxGetSignalError(error_type, error_str);
        Q_EMIT objectsSandboxGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxNameDelete(const QString &name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxNameDelete"][_serverIndices.value("objectsSandboxNameDelete")].URL()+"/objects/sandbox/{name}");
    
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxNameDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxNameDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxNameDeleteSignal();
        Q_EMIT objectsSandboxNameDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxNameDeleteSignalE(error_type, error_str);
        Q_EMIT objectsSandboxNameDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxNameDeleteSignalError(error_type, error_str);
        Q_EMIT objectsSandboxNameDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxPost"][_serverIndices.value("objectsSandboxPost")].URL()+"/objects/sandbox");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxPostSignal();
        Q_EMIT objectsSandboxPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxPostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxPostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxSnapshotApiNameActionsUpdatePost(const QString &api_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxSnapshotApiNameActionsUpdatePost"][_serverIndices.value("objectsSandboxSnapshotApiNameActionsUpdatePost")].URL()+"/objects/sandbox/snapshot/{api_name}/actions/update");
    
    
    {
        QString api_namePathParam("{");
        api_namePathParam.append("api_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "api_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"api_name"+pathSuffix : pathPrefix;
        fullPath.replace(api_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(api_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxSnapshotApiNameActionsUpdatePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxSnapshotApiNameActionsUpdatePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxSnapshotApiNameActionsUpdatePostSignal();
        Q_EMIT objectsSandboxSnapshotApiNameActionsUpdatePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxSnapshotApiNameActionsUpdatePostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotApiNameActionsUpdatePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxSnapshotApiNameActionsUpdatePostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotApiNameActionsUpdatePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxSnapshotApiNameActionsUpgradePost(const QString &api_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxSnapshotApiNameActionsUpgradePost"][_serverIndices.value("objectsSandboxSnapshotApiNameActionsUpgradePost")].URL()+"/objects/sandbox/snapshot/{api_name}/actions/upgrade");
    
    
    {
        QString api_namePathParam("{");
        api_namePathParam.append("api_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "api_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"api_name"+pathSuffix : pathPrefix;
        fullPath.replace(api_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(api_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxSnapshotApiNameActionsUpgradePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxSnapshotApiNameActionsUpgradePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxSnapshotApiNameActionsUpgradePostSignal();
        Q_EMIT objectsSandboxSnapshotApiNameActionsUpgradePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxSnapshotApiNameActionsUpgradePostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotApiNameActionsUpgradePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxSnapshotApiNameActionsUpgradePostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotApiNameActionsUpgradePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxSnapshotApiNameDelete(const QString &api_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxSnapshotApiNameDelete"][_serverIndices.value("objectsSandboxSnapshotApiNameDelete")].URL()+"/objects/sandbox/snapshot/{api_name}");
    
    
    {
        QString api_namePathParam("{");
        api_namePathParam.append("api_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "api_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"api_name"+pathSuffix : pathPrefix;
        fullPath.replace(api_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(api_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxSnapshotApiNameDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxSnapshotApiNameDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxSnapshotApiNameDeleteSignal();
        Q_EMIT objectsSandboxSnapshotApiNameDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxSnapshotApiNameDeleteSignalE(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotApiNameDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxSnapshotApiNameDeleteSignalError(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotApiNameDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxSnapshotGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxSnapshotGet"][_serverIndices.value("objectsSandboxSnapshotGet")].URL()+"/objects/sandbox/snapshot");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxSnapshotGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxSnapshotGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxSnapshotGetSignal();
        Q_EMIT objectsSandboxSnapshotGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxSnapshotGetSignalE(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxSnapshotGetSignalError(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxSnapshotPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxSnapshotPost"][_serverIndices.value("objectsSandboxSnapshotPost")].URL()+"/objects/sandbox/snapshot");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxSnapshotPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxSnapshotPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxSnapshotPostSignal();
        Q_EMIT objectsSandboxSnapshotPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxSnapshotPostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxSnapshotPostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxSnapshotPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxVaultIdActionsRefreshPost(const QString &vault_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxVaultIdActionsRefreshPost"][_serverIndices.value("objectsSandboxVaultIdActionsRefreshPost")].URL()+"/objects/sandbox/{vault_id}/actions/refresh");
    
    
    {
        QString vault_idPathParam("{");
        vault_idPathParam.append("vault_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "vault_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"vault_id"+pathSuffix : pathPrefix;
        fullPath.replace(vault_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(vault_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxVaultIdActionsRefreshPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxVaultIdActionsRefreshPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxVaultIdActionsRefreshPostSignal();
        Q_EMIT objectsSandboxVaultIdActionsRefreshPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxVaultIdActionsRefreshPostSignalE(error_type, error_str);
        Q_EMIT objectsSandboxVaultIdActionsRefreshPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxVaultIdActionsRefreshPostSignalError(error_type, error_str);
        Q_EMIT objectsSandboxVaultIdActionsRefreshPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSandboxVaultIdGet(const QString &vault_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSandboxVaultIdGet"][_serverIndices.value("objectsSandboxVaultIdGet")].URL()+"/objects/sandbox/{vault_id}");
    
    
    {
        QString vault_idPathParam("{");
        vault_idPathParam.append("vault_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "vault_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"vault_id"+pathSuffix : pathPrefix;
        fullPath.replace(vault_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(vault_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSandboxVaultIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSandboxVaultIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSandboxVaultIdGetSignal();
        Q_EMIT objectsSandboxVaultIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSandboxVaultIdGetSignalE(error_type, error_str);
        Q_EMIT objectsSandboxVaultIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSandboxVaultIdGetSignalError(error_type, error_str);
        Q_EMIT objectsSandboxVaultIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSecuritypoliciesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSecuritypoliciesGet"][_serverIndices.value("objectsSecuritypoliciesGet")].URL()+"/objects/securitypolicies");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSecuritypoliciesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSecuritypoliciesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSecuritypoliciesGetSignal();
        Q_EMIT objectsSecuritypoliciesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSecuritypoliciesGetSignalE(error_type, error_str);
        Q_EMIT objectsSecuritypoliciesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSecuritypoliciesGetSignalError(error_type, error_str);
        Q_EMIT objectsSecuritypoliciesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsSecuritypoliciesSecurityPolicyNameGet(const QString &security_policy_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsSecuritypoliciesSecurityPolicyNameGet"][_serverIndices.value("objectsSecuritypoliciesSecurityPolicyNameGet")].URL()+"/objects/securitypolicies/{security_policy_name}");
    
    
    {
        QString security_policy_namePathParam("{");
        security_policy_namePathParam.append("security_policy_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "security_policy_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"security_policy_name"+pathSuffix : pathPrefix;
        fullPath.replace(security_policy_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(security_policy_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsSecuritypoliciesSecurityPolicyNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsSecuritypoliciesSecurityPolicyNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsSecuritypoliciesSecurityPolicyNameGetSignal();
        Q_EMIT objectsSecuritypoliciesSecurityPolicyNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsSecuritypoliciesSecurityPolicyNameGetSignalE(error_type, error_str);
        Q_EMIT objectsSecuritypoliciesSecurityPolicyNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsSecuritypoliciesSecurityPolicyNameGetSignalError(error_type, error_str);
        Q_EMIT objectsSecuritypoliciesSecurityPolicyNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersGet(const ::OpenAPI::OptionalParam<QString> &vaults, const ::OpenAPI::OptionalParam<QString> &exclude_vault_membership, const ::OpenAPI::OptionalParam<QString> &exclude_app_licensing, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersGet"][_serverIndices.value("objectsUsersGet")].URL()+"/objects/users/");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (vaults.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vaults", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vaults")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(vaults.stringValue())));
    }
    if (exclude_vault_membership.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "exclude_vault_membership", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("exclude_vault_membership")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_vault_membership.stringValue())));
    }
    if (exclude_app_licensing.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "exclude_app_licensing", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("exclude_app_licensing")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_app_licensing.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersGetSignal();
        Q_EMIT objectsUsersGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersGetSignalE(error_type, error_str);
        Q_EMIT objectsUsersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersGetSignalError(error_type, error_str);
        Q_EMIT objectsUsersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &exclude_vault_membership, const ::OpenAPI::OptionalParam<QString> &exclude_app_licensing, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersIdGet"][_serverIndices.value("objectsUsersIdGet")].URL()+"/objects/users/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (exclude_vault_membership.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "exclude_vault_membership", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("exclude_vault_membership")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_vault_membership.stringValue())));
    }
    if (exclude_app_licensing.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "exclude_app_licensing", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("exclude_app_licensing")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_app_licensing.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersIdGetSignal();
        Q_EMIT objectsUsersIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersIdGetSignalE(error_type, error_str);
        Q_EMIT objectsUsersIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersIdGetSignalError(error_type, error_str);
        Q_EMIT objectsUsersIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersIdPermissionsGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersIdPermissionsGet"][_serverIndices.value("objectsUsersIdPermissionsGet")].URL()+"/objects/users/{id}/permissions");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(filter.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersIdPermissionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersIdPermissionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersIdPermissionsGetSignal();
        Q_EMIT objectsUsersIdPermissionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersIdPermissionsGetSignalE(error_type, error_str);
        Q_EMIT objectsUsersIdPermissionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersIdPermissionsGetSignalError(error_type, error_str);
        Q_EMIT objectsUsersIdPermissionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersIdPut(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersIdPut"][_serverIndices.value("objectsUsersIdPut")].URL()+"/objects/users/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersIdPutSignal();
        Q_EMIT objectsUsersIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersIdPutSignalE(error_type, error_str);
        Q_EMIT objectsUsersIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersIdPutSignalError(error_type, error_str);
        Q_EMIT objectsUsersIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersMeGet(const ::OpenAPI::OptionalParam<QString> &exclude_vault_membership, const ::OpenAPI::OptionalParam<QString> &exclude_app_licensing, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersMeGet"][_serverIndices.value("objectsUsersMeGet")].URL()+"/objects/users/me");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (exclude_vault_membership.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "exclude_vault_membership", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("exclude_vault_membership")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_vault_membership.stringValue())));
    }
    if (exclude_app_licensing.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "exclude_app_licensing", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("exclude_app_licensing")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(exclude_app_licensing.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersMeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersMeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersMeGetSignal();
        Q_EMIT objectsUsersMeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersMeGetSignalE(error_type, error_str);
        Q_EMIT objectsUsersMeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersMeGetSignalError(error_type, error_str);
        Q_EMIT objectsUsersMeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersMePasswordPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersMePasswordPost"][_serverIndices.value("objectsUsersMePasswordPost")].URL()+"/objects/users/me/password");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersMePasswordPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersMePasswordPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersMePasswordPostSignal();
        Q_EMIT objectsUsersMePasswordPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersMePasswordPostSignalE(error_type, error_str);
        Q_EMIT objectsUsersMePasswordPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersMePasswordPostSignalError(error_type, error_str);
        Q_EMIT objectsUsersMePasswordPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersMePermissionsGet(const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersMePermissionsGet"][_serverIndices.value("objectsUsersMePermissionsGet")].URL()+"/objects/users/me/permissions");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(filter.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersMePermissionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersMePermissionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersMePermissionsGetSignal();
        Q_EMIT objectsUsersMePermissionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersMePermissionsGetSignalE(error_type, error_str);
        Q_EMIT objectsUsersMePermissionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersMePermissionsGetSignalError(error_type, error_str);
        Q_EMIT objectsUsersMePermissionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersMePut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersMePut"][_serverIndices.value("objectsUsersMePut")].URL()+"/objects/users/me");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersMePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersMePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersMePutSignal();
        Q_EMIT objectsUsersMePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersMePutSignalE(error_type, error_str);
        Q_EMIT objectsUsersMePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersMePutSignalError(error_type, error_str);
        Q_EMIT objectsUsersMePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersPost"][_serverIndices.value("objectsUsersPost")].URL()+"/objects/users");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersPostSignal();
        Q_EMIT objectsUsersPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersPostSignalE(error_type, error_str);
        Q_EMIT objectsUsersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersPostSignalError(error_type, error_str);
        Q_EMIT objectsUsersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersPut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersPut"][_serverIndices.value("objectsUsersPut")].URL()+"/objects/users");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersPutSignal();
        Q_EMIT objectsUsersPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersPutSignalE(error_type, error_str);
        Q_EMIT objectsUsersPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersPutSignalError(error_type, error_str);
        Q_EMIT objectsUsersPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersUserIdDelete(const QString &user_id, const ::OpenAPI::OptionalParam<bool> &domain, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersUserIdDelete"][_serverIndices.value("objectsUsersUserIdDelete")].URL()+"/objects/users/{user_id}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (domain.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "domain", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("domain")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersUserIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersUserIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersUserIdDeleteSignal();
        Q_EMIT objectsUsersUserIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersUserIdDeleteSignalE(error_type, error_str);
        Q_EMIT objectsUsersUserIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersUserIdDeleteSignalError(error_type, error_str);
        Q_EMIT objectsUsersUserIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsUsersUserIdVaultMembershipVaultIdPut(const QString &user_id, const QString &vault_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsUsersUserIdVaultMembershipVaultIdPut"][_serverIndices.value("objectsUsersUserIdVaultMembershipVaultIdPut")].URL()+"/objects/users/{user_id}/vault_membership/{vault_id}");
    
    
    {
        QString user_idPathParam("{");
        user_idPathParam.append("user_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "user_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"user_id"+pathSuffix : pathPrefix;
        fullPath.replace(user_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(user_id)));
    }
    
    {
        QString vault_idPathParam("{");
        vault_idPathParam.append("vault_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "vault_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"vault_id"+pathSuffix : pathPrefix;
        fullPath.replace(vault_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(vault_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsUsersUserIdVaultMembershipVaultIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsUsersUserIdVaultMembershipVaultIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsUsersUserIdVaultMembershipVaultIdPutSignal();
        Q_EMIT objectsUsersUserIdVaultMembershipVaultIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsUsersUserIdVaultMembershipVaultIdPutSignalE(error_type, error_str);
        Q_EMIT objectsUsersUserIdVaultMembershipVaultIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsUsersUserIdVaultMembershipVaultIdPutSignalError(error_type, error_str);
        Q_EMIT objectsUsersUserIdVaultMembershipVaultIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsVaultActionsComparePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsVaultActionsComparePost"][_serverIndices.value("objectsVaultActionsComparePost")].URL()+"/objects/vault/actions/compare");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsVaultActionsComparePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsVaultActionsComparePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsVaultActionsComparePostSignal();
        Q_EMIT objectsVaultActionsComparePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsVaultActionsComparePostSignalE(error_type, error_str);
        Q_EMIT objectsVaultActionsComparePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsVaultActionsComparePostSignalError(error_type, error_str);
        Q_EMIT objectsVaultActionsComparePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::objectsVaultActionsConfigreportPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["objectsVaultActionsConfigreportPost"][_serverIndices.value("objectsVaultActionsConfigreportPost")].URL()+"/objects/vault/actions/configreport");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::objectsVaultActionsConfigreportPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::objectsVaultActionsConfigreportPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT objectsVaultActionsConfigreportPostSignal();
        Q_EMIT objectsVaultActionsConfigreportPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT objectsVaultActionsConfigreportPostSignalE(error_type, error_str);
        Q_EMIT objectsVaultActionsConfigreportPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT objectsVaultActionsConfigreportPostSignalError(error_type, error_str);
        Q_EMIT objectsVaultActionsConfigreportPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::queryComponentsPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["queryComponentsPost"][_serverIndices.value("queryComponentsPost")].URL()+"/query/components");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::queryComponentsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::queryComponentsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryComponentsPostSignal();
        Q_EMIT queryComponentsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryComponentsPostSignalE(error_type, error_str);
        Q_EMIT queryComponentsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryComponentsPostSignalError(error_type, error_str);
        Q_EMIT queryComponentsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::queryNextPagePost(const QString &next_page, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<bool> &x_vault_api_describe_query, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["queryNextPagePost"][_serverIndices.value("queryNextPagePost")].URL()+"/query/{next_page}");
    
    
    {
        QString next_pagePathParam("{");
        next_pagePathParam.append("next_page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "next_page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"next_page"+pathSuffix : pathPrefix;
        fullPath.replace(next_pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(next_page)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_describe_query.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_describe_query.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-DescribeQuery", ::OpenAPI::toStringValue(x_vault_api_describe_query.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::queryNextPagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::queryNextPagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryNextPagePostSignal();
        Q_EMIT queryNextPagePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryNextPagePostSignalE(error_type, error_str);
        Q_EMIT queryNextPagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryNextPagePostSignalError(error_type, error_str);
        Q_EMIT queryNextPagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::queryPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<bool> &x_vault_api_describe_query, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["queryPost"][_serverIndices.value("queryPost")].URL()+"/query");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_describe_query.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_describe_query.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-DescribeQuery", ::OpenAPI::toStringValue(x_vault_api_describe_query.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::queryPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::queryPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryPostSignal();
        Q_EMIT queryPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryPostSignalE(error_type, error_str);
        Q_EMIT queryPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryPostSignalError(error_type, error_str);
        Q_EMIT queryPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::queryPreviousPagePost(const QString &previous_page, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<bool> &x_vault_api_describe_query, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["queryPreviousPagePost"][_serverIndices.value("queryPreviousPagePost")].URL()+"/query/{previous_page}");
    
    
    {
        QString previous_pagePathParam("{");
        previous_pagePathParam.append("previous_page").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "previous_page", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"previous_page"+pathSuffix : pathPrefix;
        fullPath.replace(previous_pagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(previous_page)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_describe_query.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_describe_query.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-DescribeQuery", ::OpenAPI::toStringValue(x_vault_api_describe_query.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::queryPreviousPagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::queryPreviousPagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT queryPreviousPagePostSignal();
        Q_EMIT queryPreviousPagePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT queryPreviousPagePostSignalE(error_type, error_str);
        Q_EMIT queryPreviousPagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT queryPreviousPagePostSignalError(error_type, error_str);
        Q_EMIT queryPreviousPagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2MeGet(const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &excluded_attributes, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2MeGet"][_serverIndices.value("scimV2MeGet")].URL()+"/scim/v2/Me");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(attributes.stringValue())));
    }
    if (excluded_attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "excludedAttributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("excludedAttributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(excluded_attributes.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2MeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2MeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2MeGetSignal();
        Q_EMIT scimV2MeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2MeGetSignalE(error_type, error_str);
        Q_EMIT scimV2MeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2MeGetSignalError(error_type, error_str);
        Q_EMIT scimV2MeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2MePut(const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &excluded_attributes, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2MePut"][_serverIndices.value("scimV2MePut")].URL()+"/scim/v2/Me");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(attributes.stringValue())));
    }
    if (excluded_attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "excludedAttributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("excludedAttributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(excluded_attributes.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2MePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2MePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2MePutSignal();
        Q_EMIT scimV2MePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2MePutSignalE(error_type, error_str);
        Q_EMIT scimV2MePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2MePutSignalError(error_type, error_str);
        Q_EMIT scimV2MePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2ResourceTypesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2ResourceTypesGet"][_serverIndices.value("scimV2ResourceTypesGet")].URL()+"/scim/v2/ResourceTypes");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2ResourceTypesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2ResourceTypesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2ResourceTypesGetSignal();
        Q_EMIT scimV2ResourceTypesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2ResourceTypesGetSignalE(error_type, error_str);
        Q_EMIT scimV2ResourceTypesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2ResourceTypesGetSignalError(error_type, error_str);
        Q_EMIT scimV2ResourceTypesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2ResourceTypesTypeGet(const QString &type, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2ResourceTypesTypeGet"][_serverIndices.value("scimV2ResourceTypesTypeGet")].URL()+"/scim/v2/ResourceTypes/{type}");
    
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2ResourceTypesTypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2ResourceTypesTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2ResourceTypesTypeGetSignal();
        Q_EMIT scimV2ResourceTypesTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2ResourceTypesTypeGetSignalE(error_type, error_str);
        Q_EMIT scimV2ResourceTypesTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2ResourceTypesTypeGetSignalError(error_type, error_str);
        Q_EMIT scimV2ResourceTypesTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2SchemasGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2SchemasGet"][_serverIndices.value("scimV2SchemasGet")].URL()+"/scim/v2/Schemas");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2SchemasGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2SchemasGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2SchemasGetSignal();
        Q_EMIT scimV2SchemasGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2SchemasGetSignalE(error_type, error_str);
        Q_EMIT scimV2SchemasGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2SchemasGetSignalError(error_type, error_str);
        Q_EMIT scimV2SchemasGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2SchemasIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2SchemasIdGet"][_serverIndices.value("scimV2SchemasIdGet")].URL()+"/scim/v2/Schemas/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2SchemasIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2SchemasIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2SchemasIdGetSignal();
        Q_EMIT scimV2SchemasIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2SchemasIdGetSignalE(error_type, error_str);
        Q_EMIT scimV2SchemasIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2SchemasIdGetSignalError(error_type, error_str);
        Q_EMIT scimV2SchemasIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2ServiceProviderConfigGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2ServiceProviderConfigGet"][_serverIndices.value("scimV2ServiceProviderConfigGet")].URL()+"/scim/v2/ServiceProviderConfig");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2ServiceProviderConfigGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2ServiceProviderConfigGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2ServiceProviderConfigGetSignal();
        Q_EMIT scimV2ServiceProviderConfigGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2ServiceProviderConfigGetSignalE(error_type, error_str);
        Q_EMIT scimV2ServiceProviderConfigGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2ServiceProviderConfigGetSignalError(error_type, error_str);
        Q_EMIT scimV2ServiceProviderConfigGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2TypeGet(const QString &type, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &excluded_attributes, const ::OpenAPI::OptionalParam<QString> &sort_by, const ::OpenAPI::OptionalParam<QString> &sort_order, const ::OpenAPI::OptionalParam<QString> &start_index, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2TypeGet"][_serverIndices.value("scimV2TypeGet")].URL()+"/scim/v2/{type}");
    
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(filter.stringValue())));
    }
    if (attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(attributes.stringValue())));
    }
    if (excluded_attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "excludedAttributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("excludedAttributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(excluded_attributes.stringValue())));
    }
    if (sort_by.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sortBy", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sortBy")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort_by.stringValue())));
    }
    if (sort_order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sortOrder", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sortOrder")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort_order.stringValue())));
    }
    if (start_index.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "startIndex", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("startIndex")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_index.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2TypeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2TypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2TypeGetSignal();
        Q_EMIT scimV2TypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2TypeGetSignalE(error_type, error_str);
        Q_EMIT scimV2TypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2TypeGetSignalError(error_type, error_str);
        Q_EMIT scimV2TypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2TypeIdGet(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &excluded_attributes, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2TypeIdGet"][_serverIndices.value("scimV2TypeIdGet")].URL()+"/scim/v2/{type}/{id}");
    
    
    {
        QString typePathParam("{");
        typePathParam.append("type").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "type", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"type"+pathSuffix : pathPrefix;
        fullPath.replace(typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(type)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(attributes.stringValue())));
    }
    if (excluded_attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "excludedAttributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("excludedAttributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(excluded_attributes.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2TypeIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2TypeIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2TypeIdGetSignal();
        Q_EMIT scimV2TypeIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2TypeIdGetSignalE(error_type, error_str);
        Q_EMIT scimV2TypeIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2TypeIdGetSignalError(error_type, error_str);
        Q_EMIT scimV2TypeIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2UsersGet(const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &excluded_attributes, const ::OpenAPI::OptionalParam<QString> &sort_by, const ::OpenAPI::OptionalParam<QString> &sort_order, const ::OpenAPI::OptionalParam<QString> &count, const ::OpenAPI::OptionalParam<QString> &start_index, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2UsersGet"][_serverIndices.value("scimV2UsersGet")].URL()+"/scim/v2/Users");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(filter.stringValue())));
    }
    if (attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(attributes.stringValue())));
    }
    if (excluded_attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "excludedAttributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("excludedAttributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(excluded_attributes.stringValue())));
    }
    if (sort_by.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sortBy", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sortBy")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort_by.stringValue())));
    }
    if (sort_order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sortOrder", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sortOrder")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(sort_order.stringValue())));
    }
    if (count.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "count", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("count")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(count.stringValue())));
    }
    if (start_index.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "startIndex", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("startIndex")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_index.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2UsersGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2UsersGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2UsersGetSignal();
        Q_EMIT scimV2UsersGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2UsersGetSignalE(error_type, error_str);
        Q_EMIT scimV2UsersGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2UsersGetSignalError(error_type, error_str);
        Q_EMIT scimV2UsersGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2UsersIdGet(const QString &id, const ::OpenAPI::OptionalParam<QString> &filter, const ::OpenAPI::OptionalParam<QString> &attributes, const ::OpenAPI::OptionalParam<QString> &excluded_attributes, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2UsersIdGet"][_serverIndices.value("scimV2UsersIdGet")].URL()+"/scim/v2/Users/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (filter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(filter.stringValue())));
    }
    if (attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "attributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("attributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(attributes.stringValue())));
    }
    if (excluded_attributes.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "excludedAttributes", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("excludedAttributes")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(excluded_attributes.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2UsersIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2UsersIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2UsersIdGetSignal();
        Q_EMIT scimV2UsersIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2UsersIdGetSignalE(error_type, error_str);
        Q_EMIT scimV2UsersIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2UsersIdGetSignalError(error_type, error_str);
        Q_EMIT scimV2UsersIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2UsersIdPut(const QString &id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2UsersIdPut"][_serverIndices.value("scimV2UsersIdPut")].URL()+"/scim/v2/Users/{id}");
    
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2UsersIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2UsersIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2UsersIdPutSignal();
        Q_EMIT scimV2UsersIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2UsersIdPutSignalE(error_type, error_str);
        Q_EMIT scimV2UsersIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2UsersIdPutSignalError(error_type, error_str);
        Q_EMIT scimV2UsersIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::scimV2UsersPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["scimV2UsersPost"][_serverIndices.value("scimV2UsersPost")].URL()+"/scim/v2/Users");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::scimV2UsersPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::scimV2UsersPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT scimV2UsersPostSignal();
        Q_EMIT scimV2UsersPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT scimV2UsersPostSignalE(error_type, error_str);
        Q_EMIT scimV2UsersPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT scimV2UsersPostSignalError(error_type, error_str);
        Q_EMIT scimV2UsersPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesCertificateCertIdGet(const QString &cert_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesCertificateCertIdGet"][_serverIndices.value("servicesCertificateCertIdGet")].URL()+"/services/certificate/{cert_id}");
    
    
    {
        QString cert_idPathParam("{");
        cert_idPathParam.append("cert_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "cert_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"cert_id"+pathSuffix : pathPrefix;
        fullPath.replace(cert_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(cert_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesCertificateCertIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesCertificateCertIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesCertificateCertIdGetSignal();
        Q_EMIT servicesCertificateCertIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesCertificateCertIdGetSignalE(error_type, error_str);
        Q_EMIT servicesCertificateCertIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesCertificateCertIdGetSignalError(error_type, error_str);
        Q_EMIT servicesCertificateCertIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesConfigurationModeActionsDisablePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesConfigurationModeActionsDisablePost"][_serverIndices.value("servicesConfigurationModeActionsDisablePost")].URL()+"/services/configuration_mode/actions/disable");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesConfigurationModeActionsDisablePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesConfigurationModeActionsDisablePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesConfigurationModeActionsDisablePostSignal();
        Q_EMIT servicesConfigurationModeActionsDisablePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesConfigurationModeActionsDisablePostSignalE(error_type, error_str);
        Q_EMIT servicesConfigurationModeActionsDisablePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesConfigurationModeActionsDisablePostSignalError(error_type, error_str);
        Q_EMIT servicesConfigurationModeActionsDisablePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesConfigurationModeActionsEnablePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesConfigurationModeActionsEnablePost"][_serverIndices.value("servicesConfigurationModeActionsEnablePost")].URL()+"/services/configuration_mode/actions/enable");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesConfigurationModeActionsEnablePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesConfigurationModeActionsEnablePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesConfigurationModeActionsEnablePostSignal();
        Q_EMIT servicesConfigurationModeActionsEnablePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesConfigurationModeActionsEnablePostSignalE(error_type, error_str);
        Q_EMIT servicesConfigurationModeActionsEnablePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesConfigurationModeActionsEnablePostSignalError(error_type, error_str);
        Q_EMIT servicesConfigurationModeActionsEnablePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesDirectdataFilesGet(const ::OpenAPI::OptionalParam<QString> &extract_type, const ::OpenAPI::OptionalParam<qint32> &start_time, const ::OpenAPI::OptionalParam<qint32> &stop_time, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesDirectdataFilesGet"][_serverIndices.value("servicesDirectdataFilesGet")].URL()+"/services/directdata/files");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (extract_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "extract_type", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("extract_type")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(extract_type.stringValue())));
    }
    if (start_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_time", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_time")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_time.stringValue())));
    }
    if (stop_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "stop_time", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("stop_time")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(stop_time.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesDirectdataFilesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesDirectdataFilesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesDirectdataFilesGetSignal();
        Q_EMIT servicesDirectdataFilesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesDirectdataFilesGetSignalE(error_type, error_str);
        Q_EMIT servicesDirectdataFilesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesDirectdataFilesGetSignalError(error_type, error_str);
        Q_EMIT servicesDirectdataFilesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesDirectdataFilesNameGet(const QString &name, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesDirectdataFilesNameGet"][_serverIndices.value("servicesDirectdataFilesNameGet")].URL()+"/services/directdata/files/{name}");
    
    
    {
        QString namePathParam("{");
        namePathParam.append("name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"name"+pathSuffix : pathPrefix;
        fullPath.replace(namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesDirectdataFilesNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesDirectdataFilesNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesDirectdataFilesNameGetSignal();
        Q_EMIT servicesDirectdataFilesNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesDirectdataFilesNameGetSignalE(error_type, error_str);
        Q_EMIT servicesDirectdataFilesNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesDirectdataFilesNameGetSignalError(error_type, error_str);
        Q_EMIT servicesDirectdataFilesNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingItemsContentItemGet(const QString &item, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &range, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingItemsContentItemGet"][_serverIndices.value("servicesFileStagingItemsContentItemGet")].URL()+"/services/file_staging/items/content/{item}");
    
    
    {
        QString itemPathParam("{");
        itemPathParam.append("item").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "item", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"item"+pathSuffix : pathPrefix;
        fullPath.replace(itemPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (range.hasValue())
    {
        if (!::OpenAPI::toStringValue(range.value()).isEmpty()) {
            input.headers.insert("Range", ::OpenAPI::toStringValue(range.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingItemsContentItemGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingItemsContentItemGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingItemsContentItemGetSignal();
        Q_EMIT servicesFileStagingItemsContentItemGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingItemsContentItemGetSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingItemsContentItemGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingItemsContentItemGetSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingItemsContentItemGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingItemsItemDelete(const QString &item, const ::OpenAPI::OptionalParam<QString> &recursive, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingItemsItemDelete"][_serverIndices.value("servicesFileStagingItemsItemDelete")].URL()+"/services/file_staging/items/{item}");
    
    
    {
        QString itemPathParam("{");
        itemPathParam.append("item").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "item", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"item"+pathSuffix : pathPrefix;
        fullPath.replace(itemPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (recursive.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "recursive", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("recursive")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(recursive.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingItemsItemDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingItemsItemDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingItemsItemDeleteSignal();
        Q_EMIT servicesFileStagingItemsItemDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingItemsItemDeleteSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingItemsItemDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingItemsItemDeleteSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingItemsItemDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingItemsItemGet(const QString &item, const ::OpenAPI::OptionalParam<QString> &recursive, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &format_result, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingItemsItemGet"][_serverIndices.value("servicesFileStagingItemsItemGet")].URL()+"/services/file_staging/items/{item}");
    
    
    {
        QString itemPathParam("{");
        itemPathParam.append("item").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "item", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"item"+pathSuffix : pathPrefix;
        fullPath.replace(itemPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (recursive.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "recursive", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("recursive")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(recursive.stringValue())));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (format_result.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format_result", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format_result")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(format_result.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingItemsItemGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingItemsItemGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingItemsItemGetSignal();
        Q_EMIT servicesFileStagingItemsItemGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingItemsItemGetSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingItemsItemGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingItemsItemGetSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingItemsItemGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingItemsItemPut(const QString &item, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingItemsItemPut"][_serverIndices.value("servicesFileStagingItemsItemPut")].URL()+"/services/file_staging/items/{item}");
    
    
    {
        QString itemPathParam("{");
        itemPathParam.append("item").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "item", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"item"+pathSuffix : pathPrefix;
        fullPath.replace(itemPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(item)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingItemsItemPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingItemsItemPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingItemsItemPutSignal();
        Q_EMIT servicesFileStagingItemsItemPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingItemsItemPutSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingItemsItemPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingItemsItemPutSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingItemsItemPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingItemsPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_md5, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingItemsPost"][_serverIndices.value("servicesFileStagingItemsPost")].URL()+"/services/file_staging/items");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_md5.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_md5.value()).isEmpty()) {
            input.headers.insert("Content-MD5", ::OpenAPI::toStringValue(content_md5.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingItemsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingItemsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingItemsPostSignal();
        Q_EMIT servicesFileStagingItemsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingItemsPostSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingItemsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingItemsPostSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingItemsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingUploadGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingUploadGet"][_serverIndices.value("servicesFileStagingUploadGet")].URL()+"/services/file_staging/upload/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingUploadGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingUploadGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingUploadGetSignal();
        Q_EMIT servicesFileStagingUploadGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingUploadGetSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingUploadGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingUploadGetSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingUploadGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingUploadPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingUploadPost"][_serverIndices.value("servicesFileStagingUploadPost")].URL()+"/services/file_staging/upload");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingUploadPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingUploadPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingUploadPostSignal();
        Q_EMIT servicesFileStagingUploadPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingUploadPostSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingUploadPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingUploadPostSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingUploadPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdDelete(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingUploadUploadSessionIdDelete"][_serverIndices.value("servicesFileStagingUploadUploadSessionIdDelete")].URL()+"/services/file_staging/upload/{upload_session_id}");
    
    
    {
        QString upload_session_idPathParam("{");
        upload_session_idPathParam.append("upload_session_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_session_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_session_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_session_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingUploadUploadSessionIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingUploadUploadSessionIdDeleteSignal();
        Q_EMIT servicesFileStagingUploadUploadSessionIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdDeleteSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdDeleteSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdGet(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingUploadUploadSessionIdGet"][_serverIndices.value("servicesFileStagingUploadUploadSessionIdGet")].URL()+"/services/file_staging/upload/{upload_session_id}");
    
    
    {
        QString upload_session_idPathParam("{");
        upload_session_idPathParam.append("upload_session_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_session_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_session_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_session_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingUploadUploadSessionIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingUploadUploadSessionIdGetSignal();
        Q_EMIT servicesFileStagingUploadUploadSessionIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdGetSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdGetSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdPartsGet(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingUploadUploadSessionIdPartsGet"][_serverIndices.value("servicesFileStagingUploadUploadSessionIdPartsGet")].URL()+"/services/file_staging/upload/{upload_session_id}/parts");
    
    
    {
        QString upload_session_idPathParam("{");
        upload_session_idPathParam.append("upload_session_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_session_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_session_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_session_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingUploadUploadSessionIdPartsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdPartsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingUploadUploadSessionIdPartsGetSignal();
        Q_EMIT servicesFileStagingUploadUploadSessionIdPartsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdPartsGetSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdPartsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdPartsGetSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdPartsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdPost(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingUploadUploadSessionIdPost"][_serverIndices.value("servicesFileStagingUploadUploadSessionIdPost")].URL()+"/services/file_staging/upload/{upload_session_id}");
    
    
    {
        QString upload_session_idPathParam("{");
        upload_session_idPathParam.append("upload_session_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_session_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_session_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_session_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingUploadUploadSessionIdPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingUploadUploadSessionIdPostSignal();
        Q_EMIT servicesFileStagingUploadUploadSessionIdPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdPostSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdPostSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdPut(const QString &upload_session_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_file_part_number, const ::OpenAPI::OptionalParam<QString> &content_md5, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesFileStagingUploadUploadSessionIdPut"][_serverIndices.value("servicesFileStagingUploadUploadSessionIdPut")].URL()+"/services/file_staging/upload/{upload_session_id}");
    
    
    {
        QString upload_session_idPathParam("{");
        upload_session_idPathParam.append("upload_session_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_session_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_session_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_session_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_session_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_file_part_number.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_file_part_number.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-FilePartNumber", ::OpenAPI::toStringValue(x_vault_api_file_part_number.value()));
        }
        }
    if (content_md5.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_md5.value()).isEmpty()) {
            input.headers.insert("Content-MD5", ::OpenAPI::toStringValue(content_md5.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesFileStagingUploadUploadSessionIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesFileStagingUploadUploadSessionIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesFileStagingUploadUploadSessionIdPutSignal();
        Q_EMIT servicesFileStagingUploadUploadSessionIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdPutSignalE(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesFileStagingUploadUploadSessionIdPutSignalError(error_type, error_str);
        Q_EMIT servicesFileStagingUploadUploadSessionIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesJobsHistoriesGet(const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<QString> &status, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesJobsHistoriesGet"][_serverIndices.value("servicesJobsHistoriesGet")].URL()+"/services/jobs/histories");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (start_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_date.stringValue())));
    }
    if (end_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(end_date.stringValue())));
    }
    if (status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("status")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(status.stringValue())));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesJobsHistoriesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesJobsHistoriesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesJobsHistoriesGetSignal();
        Q_EMIT servicesJobsHistoriesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesJobsHistoriesGetSignalE(error_type, error_str);
        Q_EMIT servicesJobsHistoriesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesJobsHistoriesGetSignalError(error_type, error_str);
        Q_EMIT servicesJobsHistoriesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesJobsJobIdErrorsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesJobsJobIdErrorsGet"][_serverIndices.value("servicesJobsJobIdErrorsGet")].URL()+"/services/jobs/{job_id}/errors");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesJobsJobIdErrorsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesJobsJobIdErrorsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesJobsJobIdErrorsGetSignal();
        Q_EMIT servicesJobsJobIdErrorsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesJobsJobIdErrorsGetSignalE(error_type, error_str);
        Q_EMIT servicesJobsJobIdErrorsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesJobsJobIdErrorsGetSignalError(error_type, error_str);
        Q_EMIT servicesJobsJobIdErrorsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesJobsJobIdGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesJobsJobIdGet"][_serverIndices.value("servicesJobsJobIdGet")].URL()+"/services/jobs/{job_id}");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesJobsJobIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesJobsJobIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesJobsJobIdGetSignal();
        Q_EMIT servicesJobsJobIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesJobsJobIdGetSignalE(error_type, error_str);
        Q_EMIT servicesJobsJobIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesJobsJobIdGetSignalError(error_type, error_str);
        Q_EMIT servicesJobsJobIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesJobsJobIdSummaryGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesJobsJobIdSummaryGet"][_serverIndices.value("servicesJobsJobIdSummaryGet")].URL()+"/services/jobs/{job_id}/summary");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesJobsJobIdSummaryGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesJobsJobIdSummaryGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesJobsJobIdSummaryGetSignal();
        Q_EMIT servicesJobsJobIdSummaryGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesJobsJobIdSummaryGetSignalE(error_type, error_str);
        Q_EMIT servicesJobsJobIdSummaryGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesJobsJobIdSummaryGetSignalError(error_type, error_str);
        Q_EMIT servicesJobsJobIdSummaryGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesJobsJobIdTasksGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesJobsJobIdTasksGet"][_serverIndices.value("servicesJobsJobIdTasksGet")].URL()+"/services/jobs/{job_id}/tasks");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesJobsJobIdTasksGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesJobsJobIdTasksGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesJobsJobIdTasksGetSignal();
        Q_EMIT servicesJobsJobIdTasksGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesJobsJobIdTasksGetSignalE(error_type, error_str);
        Q_EMIT servicesJobsJobIdTasksGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesJobsJobIdTasksGetSignalError(error_type, error_str);
        Q_EMIT servicesJobsJobIdTasksGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesJobsMonitorsGet(const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<QString> &status, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesJobsMonitorsGet"][_serverIndices.value("servicesJobsMonitorsGet")].URL()+"/services/jobs/monitors");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (start_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_date.stringValue())));
    }
    if (end_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(end_date.stringValue())));
    }
    if (status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("status")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(status.stringValue())));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesJobsMonitorsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesJobsMonitorsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesJobsMonitorsGetSignal();
        Q_EMIT servicesJobsMonitorsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesJobsMonitorsGetSignalE(error_type, error_str);
        Q_EMIT servicesJobsMonitorsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesJobsMonitorsGetSignalError(error_type, error_str);
        Q_EMIT servicesJobsMonitorsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesJobsStartNowJobIdPost(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesJobsStartNowJobIdPost"][_serverIndices.value("servicesJobsStartNowJobIdPost")].URL()+"/services/jobs/start_now/{job_id}");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesJobsStartNowJobIdPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesJobsStartNowJobIdPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesJobsStartNowJobIdPostSignal();
        Q_EMIT servicesJobsStartNowJobIdPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesJobsStartNowJobIdPostSignalE(error_type, error_str);
        Q_EMIT servicesJobsStartNowJobIdPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesJobsStartNowJobIdPostSignalError(error_type, error_str);
        Q_EMIT servicesJobsStartNowJobIdPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesLoaderExtractPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesLoaderExtractPost"][_serverIndices.value("servicesLoaderExtractPost")].URL()+"/services/loader/extract");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesLoaderExtractPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesLoaderExtractPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesLoaderExtractPostSignal();
        Q_EMIT servicesLoaderExtractPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesLoaderExtractPostSignalE(error_type, error_str);
        Q_EMIT servicesLoaderExtractPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesLoaderExtractPostSignalError(error_type, error_str);
        Q_EMIT servicesLoaderExtractPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesLoaderJobIdTasksTaskIdFailurelogGet(const QString &job_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesLoaderJobIdTasksTaskIdFailurelogGet"][_serverIndices.value("servicesLoaderJobIdTasksTaskIdFailurelogGet")].URL()+"/services/loader/{job_id}/tasks/{task_id}/failurelog");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesLoaderJobIdTasksTaskIdFailurelogGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesLoaderJobIdTasksTaskIdFailurelogGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesLoaderJobIdTasksTaskIdFailurelogGetSignal();
        Q_EMIT servicesLoaderJobIdTasksTaskIdFailurelogGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesLoaderJobIdTasksTaskIdFailurelogGetSignalE(error_type, error_str);
        Q_EMIT servicesLoaderJobIdTasksTaskIdFailurelogGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesLoaderJobIdTasksTaskIdFailurelogGetSignalError(error_type, error_str);
        Q_EMIT servicesLoaderJobIdTasksTaskIdFailurelogGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesLoaderJobIdTasksTaskIdResultsGet(const QString &job_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesLoaderJobIdTasksTaskIdResultsGet"][_serverIndices.value("servicesLoaderJobIdTasksTaskIdResultsGet")].URL()+"/services/loader/{job_id}/tasks/{task_id}/results");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesLoaderJobIdTasksTaskIdResultsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesLoaderJobIdTasksTaskIdResultsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsGetSignal();
        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsGetSignalE(error_type, error_str);
        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsGetSignalError(error_type, error_str);
        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesLoaderJobIdTasksTaskIdResultsRenditionsGet(const QString &job_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesLoaderJobIdTasksTaskIdResultsRenditionsGet"][_serverIndices.value("servicesLoaderJobIdTasksTaskIdResultsRenditionsGet")].URL()+"/services/loader/{job_id}/tasks/{task_id}/results/renditions");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesLoaderJobIdTasksTaskIdResultsRenditionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesLoaderJobIdTasksTaskIdResultsRenditionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignal();
        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalE(error_type, error_str);
        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalError(error_type, error_str);
        Q_EMIT servicesLoaderJobIdTasksTaskIdResultsRenditionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesLoaderJobIdTasksTaskIdSuccesslogGet(const QString &job_id, const QString &task_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesLoaderJobIdTasksTaskIdSuccesslogGet"][_serverIndices.value("servicesLoaderJobIdTasksTaskIdSuccesslogGet")].URL()+"/services/loader/{job_id}/tasks/{task_id}/successlog");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesLoaderJobIdTasksTaskIdSuccesslogGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesLoaderJobIdTasksTaskIdSuccesslogGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesLoaderJobIdTasksTaskIdSuccesslogGetSignal();
        Q_EMIT servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalE(error_type, error_str);
        Q_EMIT servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalError(error_type, error_str);
        Q_EMIT servicesLoaderJobIdTasksTaskIdSuccesslogGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesLoaderLoadPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesLoaderLoadPost"][_serverIndices.value("servicesLoaderLoadPost")].URL()+"/services/loader/load");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesLoaderLoadPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesLoaderLoadPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesLoaderLoadPostSignal();
        Q_EMIT servicesLoaderLoadPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesLoaderLoadPostSignalE(error_type, error_str);
        Q_EMIT servicesLoaderLoadPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesLoaderLoadPostSignalError(error_type, error_str);
        Q_EMIT servicesLoaderLoadPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesPackageActionsValidatePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesPackageActionsValidatePost"][_serverIndices.value("servicesPackageActionsValidatePost")].URL()+"/services/package/actions/validate");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesPackageActionsValidatePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesPackageActionsValidatePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesPackageActionsValidatePostSignal();
        Q_EMIT servicesPackageActionsValidatePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesPackageActionsValidatePostSignalE(error_type, error_str);
        Q_EMIT servicesPackageActionsValidatePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesPackageActionsValidatePostSignalError(error_type, error_str);
        Q_EMIT servicesPackageActionsValidatePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesPackagePost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesPackagePost"][_serverIndices.value("servicesPackagePost")].URL()+"/services/package");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesPackagePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesPackagePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesPackagePostSignal();
        Q_EMIT servicesPackagePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesPackagePostSignalE(error_type, error_str);
        Q_EMIT servicesPackagePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesPackagePostSignalError(error_type, error_str);
        Q_EMIT servicesPackagePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesPackagePut(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesPackagePut"][_serverIndices.value("servicesPackagePut")].URL()+"/services/package");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesPackagePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesPackagePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesPackagePutSignal();
        Q_EMIT servicesPackagePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesPackagePutSignalE(error_type, error_str);
        Q_EMIT servicesPackagePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesPackagePutSignalError(error_type, error_str);
        Q_EMIT servicesPackagePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesQueuesGet(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesQueuesGet"][_serverIndices.value("servicesQueuesGet")].URL()+"/services/queues");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesQueuesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesQueuesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesQueuesGetSignal();
        Q_EMIT servicesQueuesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesQueuesGetSignalE(error_type, error_str);
        Q_EMIT servicesQueuesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesQueuesGetSignalError(error_type, error_str);
        Q_EMIT servicesQueuesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesQueuesQueueNameActionsDisableDeliveryPut(const QString &queue_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesQueuesQueueNameActionsDisableDeliveryPut"][_serverIndices.value("servicesQueuesQueueNameActionsDisableDeliveryPut")].URL()+"/services/queues/{queue_name}/actions/disable_delivery");
    
    
    {
        QString queue_namePathParam("{");
        queue_namePathParam.append("queue_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "queue_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"queue_name"+pathSuffix : pathPrefix;
        fullPath.replace(queue_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(queue_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesQueuesQueueNameActionsDisableDeliveryPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesQueuesQueueNameActionsDisableDeliveryPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesQueuesQueueNameActionsDisableDeliveryPutSignal();
        Q_EMIT servicesQueuesQueueNameActionsDisableDeliveryPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesQueuesQueueNameActionsDisableDeliveryPutSignalE(error_type, error_str);
        Q_EMIT servicesQueuesQueueNameActionsDisableDeliveryPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesQueuesQueueNameActionsDisableDeliveryPutSignalError(error_type, error_str);
        Q_EMIT servicesQueuesQueueNameActionsDisableDeliveryPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesQueuesQueueNameActionsEnableDeliveryPut(const QString &queue_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesQueuesQueueNameActionsEnableDeliveryPut"][_serverIndices.value("servicesQueuesQueueNameActionsEnableDeliveryPut")].URL()+"/services/queues/{queue_name}/actions/enable_delivery");
    
    
    {
        QString queue_namePathParam("{");
        queue_namePathParam.append("queue_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "queue_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"queue_name"+pathSuffix : pathPrefix;
        fullPath.replace(queue_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(queue_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesQueuesQueueNameActionsEnableDeliveryPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesQueuesQueueNameActionsEnableDeliveryPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesQueuesQueueNameActionsEnableDeliveryPutSignal();
        Q_EMIT servicesQueuesQueueNameActionsEnableDeliveryPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesQueuesQueueNameActionsEnableDeliveryPutSignalE(error_type, error_str);
        Q_EMIT servicesQueuesQueueNameActionsEnableDeliveryPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesQueuesQueueNameActionsEnableDeliveryPutSignalError(error_type, error_str);
        Q_EMIT servicesQueuesQueueNameActionsEnableDeliveryPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesQueuesQueueNameActionsResetPut(const QString &queue_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesQueuesQueueNameActionsResetPut"][_serverIndices.value("servicesQueuesQueueNameActionsResetPut")].URL()+"/services/queues/{queue_name}/actions/reset");
    
    
    {
        QString queue_namePathParam("{");
        queue_namePathParam.append("queue_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "queue_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"queue_name"+pathSuffix : pathPrefix;
        fullPath.replace(queue_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(queue_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesQueuesQueueNameActionsResetPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesQueuesQueueNameActionsResetPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesQueuesQueueNameActionsResetPutSignal();
        Q_EMIT servicesQueuesQueueNameActionsResetPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesQueuesQueueNameActionsResetPutSignalE(error_type, error_str);
        Q_EMIT servicesQueuesQueueNameActionsResetPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesQueuesQueueNameActionsResetPutSignalError(error_type, error_str);
        Q_EMIT servicesQueuesQueueNameActionsResetPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesQueuesQueueNameGet(const QString &queue_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesQueuesQueueNameGet"][_serverIndices.value("servicesQueuesQueueNameGet")].URL()+"/services/queues/{queue_name}");
    
    
    {
        QString queue_namePathParam("{");
        queue_namePathParam.append("queue_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "queue_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"queue_name"+pathSuffix : pathPrefix;
        fullPath.replace(queue_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(queue_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesQueuesQueueNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesQueuesQueueNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesQueuesQueueNameGetSignal();
        Q_EMIT servicesQueuesQueueNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesQueuesQueueNameGetSignalE(error_type, error_str);
        Q_EMIT servicesQueuesQueueNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesQueuesQueueNameGetSignalError(error_type, error_str);
        Q_EMIT servicesQueuesQueueNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::servicesVobjectVaultPackageVPackageIdActionsValidatePost(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["servicesVobjectVaultPackageVPackageIdActionsValidatePost"][_serverIndices.value("servicesVobjectVaultPackageVPackageIdActionsValidatePost")].URL()+"/services/vobject/vault_package__v/{package_id}/actions/validate");
    
    
    {
        QString package_idPathParam("{");
        package_idPathParam.append("package_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "package_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"package_id"+pathSuffix : pathPrefix;
        fullPath.replace(package_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(package_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::servicesVobjectVaultPackageVPackageIdActionsValidatePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::servicesVobjectVaultPackageVPackageIdActionsValidatePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT servicesVobjectVaultPackageVPackageIdActionsValidatePostSignal();
        Q_EMIT servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalE(error_type, error_str);
        Q_EMIT servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalError(error_type, error_str);
        Q_EMIT servicesVobjectVaultPackageVPackageIdActionsValidatePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::sessionDelete(const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["sessionDelete"][_serverIndices.value("sessionDelete")].URL()+"/session");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::sessionDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::sessionDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT sessionDeleteSignal();
        Q_EMIT sessionDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT sessionDeleteSignalE(error_type, error_str);
        Q_EMIT sessionDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT sessionDeleteSignalError(error_type, error_str);
        Q_EMIT sessionDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::uicodeDistributionsDistributionNameCodeGet(const QString &distribution_name, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["uicodeDistributionsDistributionNameCodeGet"][_serverIndices.value("uicodeDistributionsDistributionNameCodeGet")].URL()+"/uicode/distributions/{distribution_name}/code");
    
    
    {
        QString distribution_namePathParam("{");
        distribution_namePathParam.append("distribution_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "distribution_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"distribution_name"+pathSuffix : pathPrefix;
        fullPath.replace(distribution_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(distribution_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::uicodeDistributionsDistributionNameCodeGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::uicodeDistributionsDistributionNameCodeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uicodeDistributionsDistributionNameCodeGetSignal();
        Q_EMIT uicodeDistributionsDistributionNameCodeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uicodeDistributionsDistributionNameCodeGetSignalE(error_type, error_str);
        Q_EMIT uicodeDistributionsDistributionNameCodeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uicodeDistributionsDistributionNameCodeGetSignalError(error_type, error_str);
        Q_EMIT uicodeDistributionsDistributionNameCodeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::uicodeDistributionsDistributionNameDelete(const QString &distribution_name, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["uicodeDistributionsDistributionNameDelete"][_serverIndices.value("uicodeDistributionsDistributionNameDelete")].URL()+"/uicode/distributions/{distribution_name}");
    
    
    {
        QString distribution_namePathParam("{");
        distribution_namePathParam.append("distribution_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "distribution_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"distribution_name"+pathSuffix : pathPrefix;
        fullPath.replace(distribution_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(distribution_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::uicodeDistributionsDistributionNameDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::uicodeDistributionsDistributionNameDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uicodeDistributionsDistributionNameDeleteSignal();
        Q_EMIT uicodeDistributionsDistributionNameDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uicodeDistributionsDistributionNameDeleteSignalE(error_type, error_str);
        Q_EMIT uicodeDistributionsDistributionNameDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uicodeDistributionsDistributionNameDeleteSignalError(error_type, error_str);
        Q_EMIT uicodeDistributionsDistributionNameDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::uicodeDistributionsDistributionNameGet(const QString &distribution_name, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["uicodeDistributionsDistributionNameGet"][_serverIndices.value("uicodeDistributionsDistributionNameGet")].URL()+"/uicode/distributions/{distribution_name}");
    
    
    {
        QString distribution_namePathParam("{");
        distribution_namePathParam.append("distribution_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "distribution_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"distribution_name"+pathSuffix : pathPrefix;
        fullPath.replace(distribution_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(distribution_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::uicodeDistributionsDistributionNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::uicodeDistributionsDistributionNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uicodeDistributionsDistributionNameGetSignal();
        Q_EMIT uicodeDistributionsDistributionNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uicodeDistributionsDistributionNameGetSignalE(error_type, error_str);
        Q_EMIT uicodeDistributionsDistributionNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uicodeDistributionsDistributionNameGetSignalError(error_type, error_str);
        Q_EMIT uicodeDistributionsDistributionNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::uicodeDistributionsGet(const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["uicodeDistributionsGet"][_serverIndices.value("uicodeDistributionsGet")].URL()+"/uicode/distributions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::uicodeDistributionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::uicodeDistributionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uicodeDistributionsGetSignal();
        Q_EMIT uicodeDistributionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uicodeDistributionsGetSignalE(error_type, error_str);
        Q_EMIT uicodeDistributionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uicodeDistributionsGetSignalError(error_type, error_str);
        Q_EMIT uicodeDistributionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::uicodeDistributionsPost(const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["uicodeDistributionsPost"][_serverIndices.value("uicodeDistributionsPost")].URL()+"/uicode/distributions");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::uicodeDistributionsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::uicodeDistributionsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uicodeDistributionsPostSignal();
        Q_EMIT uicodeDistributionsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uicodeDistributionsPostSignalE(error_type, error_str);
        Q_EMIT uicodeDistributionsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uicodeDistributionsPostSignalError(error_type, error_str);
        Q_EMIT uicodeDistributionsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectVaultPackageVPackageIdActionsDeployPost(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectVaultPackageVPackageIdActionsDeployPost"][_serverIndices.value("vobjectVaultPackageVPackageIdActionsDeployPost")].URL()+"/vobject/vault_package__v/{package_id}/actions/deploy");
    
    
    {
        QString package_idPathParam("{");
        package_idPathParam.append("package_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "package_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"package_id"+pathSuffix : pathPrefix;
        fullPath.replace(package_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(package_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectVaultPackageVPackageIdActionsDeployPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectVaultPackageVPackageIdActionsDeployPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployPostSignal();
        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployPostSignalE(error_type, error_str);
        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployPostSignalError(error_type, error_str);
        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectVaultPackageVPackageIdActionsDeployResultsGet(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectVaultPackageVPackageIdActionsDeployResultsGet"][_serverIndices.value("vobjectVaultPackageVPackageIdActionsDeployResultsGet")].URL()+"/vobject/vault_package__v/{package_id}/actions/deploy/results");
    
    
    {
        QString package_idPathParam("{");
        package_idPathParam.append("package_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "package_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"package_id"+pathSuffix : pathPrefix;
        fullPath.replace(package_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(package_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectVaultPackageVPackageIdActionsDeployResultsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectVaultPackageVPackageIdActionsDeployResultsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployResultsGetSignal();
        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalE(error_type, error_str);
        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalError(error_type, error_str);
        Q_EMIT vobjectVaultPackageVPackageIdActionsDeployResultsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet(const QString &object_name, const QString &job_status, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet"][_serverIndices.value("vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet")].URL()+"/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString job_statusPathParam("{");
        job_statusPathParam.append("job_status").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_status", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_status"+pathSuffix : pathPrefix;
        fullPath.replace(job_statusPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_status)));
    }
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignal();
        Q_EMIT vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalE(error_type, error_str);
        Q_EMIT vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalError(error_type, error_str);
        Q_EMIT vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet(const QString &object_name, const QString &job_status, const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet"][_serverIndices.value("vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet")].URL()+"/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString job_statusPathParam("{");
        job_statusPathParam.append("job_status").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_status", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_status"+pathSuffix : pathPrefix;
        fullPath.replace(job_statusPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_status)));
    }
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignal();
        Q_EMIT vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalE(error_type, error_str);
        Q_EMIT vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalError(error_type, error_str);
        Q_EMIT vobjectsDeepcopyResultsObjectNameJobStatusJobIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsEdlItemVActionsCreateplaceholderPost(const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsEdlItemVActionsCreateplaceholderPost"][_serverIndices.value("vobjectsEdlItemVActionsCreateplaceholderPost")].URL()+"/vobjects/edl_item__v/actions/createplaceholder");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsEdlItemVActionsCreateplaceholderPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsEdlItemVActionsCreateplaceholderPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsEdlItemVActionsCreateplaceholderPostSignal();
        Q_EMIT vobjectsEdlItemVActionsCreateplaceholderPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsEdlItemVActionsCreateplaceholderPostSignalE(error_type, error_str);
        Q_EMIT vobjectsEdlItemVActionsCreateplaceholderPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsEdlItemVActionsCreateplaceholderPostSignalError(error_type, error_str);
        Q_EMIT vobjectsEdlItemVActionsCreateplaceholderPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsMergesJobIdLogGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsMergesJobIdLogGet"][_serverIndices.value("vobjectsMergesJobIdLogGet")].URL()+"/vobjects/merges/{job_id}/log");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsMergesJobIdLogGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsMergesJobIdLogGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsMergesJobIdLogGetSignal();
        Q_EMIT vobjectsMergesJobIdLogGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsMergesJobIdLogGetSignalE(error_type, error_str);
        Q_EMIT vobjectsMergesJobIdLogGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsMergesJobIdLogGetSignalError(error_type, error_str);
        Q_EMIT vobjectsMergesJobIdLogGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsMergesJobIdResultsGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsMergesJobIdResultsGet"][_serverIndices.value("vobjectsMergesJobIdResultsGet")].URL()+"/vobjects/merges/{job_id}/results");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsMergesJobIdResultsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsMergesJobIdResultsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsMergesJobIdResultsGetSignal();
        Q_EMIT vobjectsMergesJobIdResultsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsMergesJobIdResultsGetSignalE(error_type, error_str);
        Q_EMIT vobjectsMergesJobIdResultsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsMergesJobIdResultsGetSignalError(error_type, error_str);
        Q_EMIT vobjectsMergesJobIdResultsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsMergesJobIdStatusGet(const QString &job_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsMergesJobIdStatusGet"][_serverIndices.value("vobjectsMergesJobIdStatusGet")].URL()+"/vobjects/merges/{job_id}/status");
    
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("job_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "job_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"job_id"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsMergesJobIdStatusGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsMergesJobIdStatusGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsMergesJobIdStatusGetSignal();
        Q_EMIT vobjectsMergesJobIdStatusGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsMergesJobIdStatusGetSignalE(error_type, error_str);
        Q_EMIT vobjectsMergesJobIdStatusGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsMergesJobIdStatusGetSignalError(error_type, error_str);
        Q_EMIT vobjectsMergesJobIdStatusGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameActionsActionNamePost(const QString &object_name, const QString &action_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameActionsActionNamePost"][_serverIndices.value("vobjectsObjectNameActionsActionNamePost")].URL()+"/vobjects/{object_name}/actions/{action_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString action_namePathParam("{");
        action_namePathParam.append("action_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "action_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"action_name"+pathSuffix : pathPrefix;
        fullPath.replace(action_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(action_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameActionsActionNamePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameActionsActionNamePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameActionsActionNamePostSignal();
        Q_EMIT vobjectsObjectNameActionsActionNamePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameActionsActionNamePostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsActionNamePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameActionsActionNamePostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsActionNamePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameActionsChangetypePost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameActionsChangetypePost"][_serverIndices.value("vobjectsObjectNameActionsChangetypePost")].URL()+"/vobjects/{object_name}/actions/changetype");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameActionsChangetypePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameActionsChangetypePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameActionsChangetypePostSignal();
        Q_EMIT vobjectsObjectNameActionsChangetypePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameActionsChangetypePostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsChangetypePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameActionsChangetypePostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsChangetypePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameActionsMergePost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id, const ::OpenAPI::OptionalParam<QList<OAI_vobjects__object_name__actions_merge_post_request_inner>> &oai_vobjects__object_name__actions_merge_post_request_inner) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameActionsMergePost"][_serverIndices.value("vobjectsObjectNameActionsMergePost")].URL()+"/vobjects/{object_name}/actions/merge");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_vobjects__object_name__actions_merge_post_request_inner.hasValue()){
        QJsonDocument doc(::OpenAPI::toJsonValue(oai_vobjects__object_name__actions_merge_post_request_inner.value()).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameActionsMergePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameActionsMergePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameActionsMergePostSignal();
        Q_EMIT vobjectsObjectNameActionsMergePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameActionsMergePostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsMergePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameActionsMergePostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsMergePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameActionsRecalculaterollupsGet(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameActionsRecalculaterollupsGet"][_serverIndices.value("vobjectsObjectNameActionsRecalculaterollupsGet")].URL()+"/vobjects/{object_name}/actions/recalculaterollups");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameActionsRecalculaterollupsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameActionsRecalculaterollupsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsGetSignal();
        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameActionsRecalculaterollupsPost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameActionsRecalculaterollupsPost"][_serverIndices.value("vobjectsObjectNameActionsRecalculaterollupsPost")].URL()+"/vobjects/{object_name}/actions/recalculaterollups");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameActionsRecalculaterollupsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameActionsRecalculaterollupsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsPostSignal();
        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsPostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsPostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsRecalculaterollupsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameActionsUpdatecorporatecurrencyPut(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameActionsUpdatecorporatecurrencyPut"][_serverIndices.value("vobjectsObjectNameActionsUpdatecorporatecurrencyPut")].URL()+"/vobjects/{object_name}/actions/updatecorporatecurrency");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameActionsUpdatecorporatecurrencyPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameActionsUpdatecorporatecurrencyPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignal();
        Q_EMIT vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameActionsUpdatecorporatecurrencyPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameAttachmentsBatchDelete(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &id_param, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameAttachmentsBatchDelete"][_serverIndices.value("vobjectsObjectNameAttachmentsBatchDelete")].URL()+"/vobjects/{object_name}/attachments/batch");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id_param.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "idParam", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("idParam")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(id_param.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameAttachmentsBatchDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameAttachmentsBatchDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameAttachmentsBatchDeleteSignal();
        Q_EMIT vobjectsObjectNameAttachmentsBatchDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameAttachmentsBatchDeleteSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameAttachmentsBatchDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameAttachmentsBatchDeleteSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameAttachmentsBatchDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameAttachmentsBatchPost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameAttachmentsBatchPost"][_serverIndices.value("vobjectsObjectNameAttachmentsBatchPost")].URL()+"/vobjects/{object_name}/attachments/batch");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameAttachmentsBatchPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameAttachmentsBatchPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameAttachmentsBatchPostSignal();
        Q_EMIT vobjectsObjectNameAttachmentsBatchPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameAttachmentsBatchPostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameAttachmentsBatchPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameAttachmentsBatchPostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameAttachmentsBatchPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameAttachmentsBatchPut(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameAttachmentsBatchPut"][_serverIndices.value("vobjectsObjectNameAttachmentsBatchPut")].URL()+"/vobjects/{object_name}/attachments/batch");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameAttachmentsBatchPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameAttachmentsBatchPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameAttachmentsBatchPutSignal();
        Q_EMIT vobjectsObjectNameAttachmentsBatchPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameAttachmentsBatchPutSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameAttachmentsBatchPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameAttachmentsBatchPutSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameAttachmentsBatchPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameDelete(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameDelete"][_serverIndices.value("vobjectsObjectNameDelete")].URL()+"/vobjects/{object_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameDeleteSignal();
        Q_EMIT vobjectsObjectNameDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameDeleteSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameDeleteSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameIdRolesRoleNameGet(const QString &object_name, const QString &id, const QString &role_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameIdRolesRoleNameGet"][_serverIndices.value("vobjectsObjectNameIdRolesRoleNameGet")].URL()+"/vobjects/{object_name}/{id}/roles/{role_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString idPathParam("{");
        idPathParam.append("id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"id"+pathSuffix : pathPrefix;
        fullPath.replace(idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(id)));
    }
    
    {
        QString role_namePathParam("{");
        role_namePathParam.append("role_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "role_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"role_name"+pathSuffix : pathPrefix;
        fullPath.replace(role_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(role_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameIdRolesRoleNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameIdRolesRoleNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameIdRolesRoleNameGetSignal();
        Q_EMIT vobjectsObjectNameIdRolesRoleNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameIdRolesRoleNameGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameIdRolesRoleNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameIdRolesRoleNameGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameIdRolesRoleNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsActionNameGet(const QString &object_name, const QString &object_record_id, const QString &action_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdActionsActionNameGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdActionsActionNameGet")].URL()+"/vobjects/{object_name}/{object_record_id}/actions/{action_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString action_namePathParam("{");
        action_namePathParam.append("action_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "action_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"action_name"+pathSuffix : pathPrefix;
        fullPath.replace(action_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(action_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsActionNameGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsActionNameGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNameGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNameGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsActionNamePost(const QString &object_name, const QString &object_record_id, const QString &action_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdActionsActionNamePost"][_serverIndices.value("vobjectsObjectNameObjectRecordIdActionsActionNamePost")].URL()+"/vobjects/{object_name}/{object_record_id}/actions/{action_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString action_namePathParam("{");
        action_namePathParam.append("action_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "action_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"action_name"+pathSuffix : pathPrefix;
        fullPath.replace(action_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(action_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsActionNamePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsActionNamePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNamePostSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsActionNamePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsCascadedeletePost(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdActionsCascadedeletePost"][_serverIndices.value("vobjectsObjectNameObjectRecordIdActionsCascadedeletePost")].URL()+"/vobjects/{object_name}/{object_record_id}/actions/cascadedelete");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsCascadedeletePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsCascadedeletePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsCascadedeletePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsDeepcopyPost(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdActionsDeepcopyPost"][_serverIndices.value("vobjectsObjectNameObjectRecordIdActionsDeepcopyPost")].URL()+"/vobjects/{object_name}/{object_record_id}/actions/deepcopy");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsDeepcopyPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsDeepcopyPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsDeepcopyPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<bool> &loc, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdActionsGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdActionsGet")].URL()+"/vobjects/{object_name}/{object_record_id}/actions");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (loc.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "loc", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("loc")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(loc.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdActionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdActionsGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdActionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet(const QString &object_name, const QString &object_record_id, const QString &attachment_field_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet")].URL()+"/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_field_namePathParam("{");
        attachment_field_namePathParam.append("attachment_field_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_field_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_field_name"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_field_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_field_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost(const QString &object_name, const QString &object_record_id, const QString &attachment_field_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost")].URL()+"/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_field_namePathParam("{");
        attachment_field_namePathParam.append("attachment_field_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_field_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_field_name"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_field_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_field_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet")].URL()+"/vobjects/{object_name}/{object_record_id}/attachment_fields/file");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const QString &attachment_version, const ::OpenAPI::OptionalParam<bool> &restore, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    
    {
        QString attachment_versionPathParam("{");
        attachment_versionPathParam.append("attachment_version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_version"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_version)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (restore.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "restore", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("restore")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(restore.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet(const QString &object_name, const QString &object_record_id, const QString &attachment_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    
    {
        QString attachment_idPathParam("{");
        attachment_idPathParam.append("attachment_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "attachment_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"attachment_id"+pathSuffix : pathPrefix;
        fullPath.replace(attachment_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(attachment_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsFileGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsFileGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsFileGet")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments/file");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsFileGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsFileGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsFileGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsGet")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsPost(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAttachmentsPost"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAttachmentsPost")].URL()+"/vobjects/{object_name}/{object_record_id}/attachments");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAttachmentsPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsPostSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsPostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsPostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAttachmentsPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAudittrailGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &start_date, const ::OpenAPI::OptionalParam<QString> &end_date, const ::OpenAPI::OptionalParam<QString> &format_result, const ::OpenAPI::OptionalParam<QString> &limit, const ::OpenAPI::OptionalParam<QString> &offset, const ::OpenAPI::OptionalParam<QString> &events, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdAudittrailGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdAudittrailGet")].URL()+"/vobjects/{object_name}/{object_record_id}/audittrail");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (start_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "start_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("start_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(start_date.stringValue())));
    }
    if (end_date.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "end_date", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("end_date")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(end_date.stringValue())));
    }
    if (format_result.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "format_result", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("format_result")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(format_result.stringValue())));
    }
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(limit.stringValue())));
    }
    if (offset.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "offset", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("offset")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(offset.stringValue())));
    }
    if (events.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "events", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("events")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(events.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdAudittrailGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdAudittrailGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdAudittrailGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdAudittrailGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAudittrailGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAudittrailGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdAudittrailGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdAudittrailGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdGet(const QString &object_name, const QString &object_record_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameObjectRecordIdGet"][_serverIndices.value("vobjectsObjectNameObjectRecordIdGet")].URL()+"/vobjects/{object_name}/{object_record_id}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    
    {
        QString object_record_idPathParam("{");
        object_record_idPathParam.append("object_record_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_record_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_record_id"+pathSuffix : pathPrefix;
        fullPath.replace(object_record_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_record_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameObjectRecordIdGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameObjectRecordIdGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameObjectRecordIdGetSignal();
        Q_EMIT vobjectsObjectNameObjectRecordIdGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdGetSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameObjectRecordIdGetSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameObjectRecordIdGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNamePost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &id_param, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<bool> &x_vault_api_no_triggers, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNamePost"][_serverIndices.value("vobjectsObjectNamePost")].URL()+"/vobjects/{object_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (id_param.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "idParam", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("idParam")).append(querySuffix).append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(id_param.stringValue())));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_no_triggers.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_no_triggers.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-NoTriggers", ::OpenAPI::toStringValue(x_vault_api_no_triggers.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNamePostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNamePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNamePostSignal();
        Q_EMIT vobjectsObjectNamePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNamePostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNamePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNamePostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNamePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNamePut(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<bool> &x_vault_api_migration_mode, const ::OpenAPI::OptionalParam<bool> &x_vault_api_no_triggers, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNamePut"][_serverIndices.value("vobjectsObjectNamePut")].URL()+"/vobjects/{object_name}");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_migration_mode.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_migration_mode.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-MigrationMode", ::OpenAPI::toStringValue(x_vault_api_migration_mode.value()));
        }
        }
    if (x_vault_api_no_triggers.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_no_triggers.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-NoTriggers", ::OpenAPI::toStringValue(x_vault_api_no_triggers.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNamePutCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNamePutCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNamePutSignal();
        Q_EMIT vobjectsObjectNamePutSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNamePutSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNamePutSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNamePutSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNamePutSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameRolesDelete(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameRolesDelete"][_serverIndices.value("vobjectsObjectNameRolesDelete")].URL()+"/vobjects/{object_name}/roles");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameRolesDeleteCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameRolesDeleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameRolesDeleteSignal();
        Q_EMIT vobjectsObjectNameRolesDeleteSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameRolesDeleteSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameRolesDeleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameRolesDeleteSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameRolesDeleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsObjectNameRolesPost(const QString &object_name, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &content_type, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsObjectNameRolesPost"][_serverIndices.value("vobjectsObjectNameRolesPost")].URL()+"/vobjects/{object_name}/roles");
    
    
    {
        QString object_namePathParam("{");
        object_namePathParam.append("object_name").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "object_name", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"object_name"+pathSuffix : pathPrefix;
        fullPath.replace(object_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(object_name)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (content_type.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_type.value()).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsObjectNameRolesPostCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsObjectNameRolesPostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsObjectNameRolesPostSignal();
        Q_EMIT vobjectsObjectNameRolesPostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsObjectNameRolesPostSignalE(error_type, error_str);
        Q_EMIT vobjectsObjectNameRolesPostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsObjectNameRolesPostSignalError(error_type, error_str);
        Q_EMIT vobjectsObjectNameRolesPostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::vobjectsOutboundPackageVPackageIdDependenciesGet(const QString &package_id, const ::OpenAPI::OptionalParam<QString> &authorization, const ::OpenAPI::OptionalParam<QString> &accept, const ::OpenAPI::OptionalParam<QString> &x_vault_api_client_id) {
    QString fullPath = QString(_serverConfigs["vobjectsOutboundPackageVPackageIdDependenciesGet"][_serverIndices.value("vobjectsOutboundPackageVPackageIdDependenciesGet")].URL()+"/vobjects/outbound_package__v/{package_id}/dependencies");
    
    
    {
        QString package_idPathParam("{");
        package_idPathParam.append("package_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "package_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"package_id"+pathSuffix : pathPrefix;
        fullPath.replace(package_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(package_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (authorization.hasValue())
    {
        if (!::OpenAPI::toStringValue(authorization.value()).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization.value()));
        }
        }
    if (accept.hasValue())
    {
        if (!::OpenAPI::toStringValue(accept.value()).isEmpty()) {
            input.headers.insert("Accept", ::OpenAPI::toStringValue(accept.value()));
        }
        }
    if (x_vault_api_client_id.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_vault_api_client_id.value()).isEmpty()) {
            input.headers.insert("X-VaultAPI-ClientID", ::OpenAPI::toStringValue(x_vault_api_client_id.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIDefaultApi::vobjectsOutboundPackageVPackageIdDependenciesGetCallback);
    connect(this, &OAIDefaultApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIDefaultApi::vobjectsOutboundPackageVPackageIdDependenciesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT vobjectsOutboundPackageVPackageIdDependenciesGetSignal();
        Q_EMIT vobjectsOutboundPackageVPackageIdDependenciesGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT vobjectsOutboundPackageVPackageIdDependenciesGetSignalE(error_type, error_str);
        Q_EMIT vobjectsOutboundPackageVPackageIdDependenciesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT vobjectsOutboundPackageVPackageIdDependenciesGetSignalError(error_type, error_str);
        Q_EMIT vobjectsOutboundPackageVPackageIdDependenciesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIDefaultApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
