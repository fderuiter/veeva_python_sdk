{-
   Veeva Vault API v25.1

   The latest GA version of the Vault REST API.

   OpenAPI Version: 3.0.0
   Veeva Vault API v25.1 API version: 1.0.0
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : VeevaVaultAPIV25.1.Model
-}

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module VeevaVaultAPIV25.1.Model where

import VeevaVaultAPIV25.1.Core
import VeevaVaultAPIV25.1.MimeTypes

import Data.Aeson ((.:),(.:!),(.:?),(.=))

import qualified Control.Arrow as P (left)
import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.HashMap.Lazy as HM
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Set as Set
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Time as TI
import qualified Lens.Micro as L
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Control.Applicative ((<|>))
import Control.Applicative (Alternative)
import Data.Function ((&))
import Data.Monoid ((<>))
import Data.Text (Text)
import Prelude (($),(/=),(.),(<$>),(<*>),(>>=),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)

import qualified Prelude as P



-- * Parameter newtypes


-- ** Action
newtype Action = Action { unAction :: Text } deriving (P.Eq, P.Show)

-- ** ActionName
newtype ActionName = ActionName { unActionName :: Text } deriving (P.Eq, P.Show)

-- ** AllDates
newtype AllDates = AllDates { unAllDates :: Text } deriving (P.Eq, P.Show)

-- ** AllDatesBool
newtype AllDatesBool = AllDatesBool { unAllDatesBool :: Bool } deriving (P.Eq, P.Show)

-- ** Allversions
newtype Allversions = Allversions { unAllversions :: Bool } deriving (P.Eq, P.Show)

-- ** AnnotationId
newtype AnnotationId = AnnotationId { unAnnotationId :: Text } deriving (P.Eq, P.Show)

-- ** AnnotationType
newtype AnnotationType = AnnotationType { unAnnotationType :: Text } deriving (P.Eq, P.Show)

-- ** AnnotationTypes
newtype AnnotationTypes = AnnotationTypes { unAnnotationTypes :: Text } deriving (P.Eq, P.Show)

-- ** ApiName
newtype ApiName = ApiName { unApiName :: Text } deriving (P.Eq, P.Show)

-- ** AssigneeV
newtype AssigneeV = AssigneeV { unAssigneeV :: Text } deriving (P.Eq, P.Show)

-- ** Async
newtype Async = Async { unAsync :: Bool } deriving (P.Eq, P.Show)

-- ** AttachmentFieldName
newtype AttachmentFieldName = AttachmentFieldName { unAttachmentFieldName :: Text } deriving (P.Eq, P.Show)

-- ** AttachmentId
newtype AttachmentId = AttachmentId { unAttachmentId :: Text } deriving (P.Eq, P.Show)

-- ** AttachmentVersion
newtype AttachmentVersion = AttachmentVersion { unAttachmentVersion :: Text } deriving (P.Eq, P.Show)

-- ** Attachments
newtype Attachments = Attachments { unAttachments :: Text } deriving (P.Eq, P.Show)

-- ** Attributes
newtype Attributes = Attributes { unAttributes :: Text } deriving (P.Eq, P.Show)

-- ** AuditTrailType
newtype AuditTrailType = AuditTrailType { unAuditTrailType :: Text } deriving (P.Eq, P.Show)

-- ** Authorization
newtype Authorization = Authorization { unAuthorization :: Text } deriving (P.Eq, P.Show)

-- ** BinderId
newtype BinderId = BinderId { unBinderId :: Text } deriving (P.Eq, P.Show)

-- ** CertId
newtype CertId = CertId { unCertId :: Text } deriving (P.Eq, P.Show)

-- ** ClassName
newtype ClassName = ClassName { unClassName :: Text } deriving (P.Eq, P.Show)

-- ** Classification
newtype Classification = Classification { unClassification :: Text } deriving (P.Eq, P.Show)

-- ** ComponentType
newtype ComponentType = ComponentType { unComponentType :: Text } deriving (P.Eq, P.Show)

-- ** ComponentTypeAndRecordName
newtype ComponentTypeAndRecordName = ComponentTypeAndRecordName { unComponentTypeAndRecordName :: Text } deriving (P.Eq, P.Show)

-- ** ContentMd5
newtype ContentMd5 = ContentMd5 { unContentMd5 :: Text } deriving (P.Eq, P.Show)

-- ** Count
newtype Count = Count { unCount :: Text } deriving (P.Eq, P.Show)

-- ** CountryV
newtype CountryV = CountryV { unCountryV :: Text } deriving (P.Eq, P.Show)

-- ** Depth
newtype Depth = Depth { unDepth :: Text } deriving (P.Eq, P.Show)

-- ** DistributionName
newtype DistributionName = DistributionName { unDistributionName :: Text } deriving (P.Eq, P.Show)

-- ** DocId
newtype DocId = DocId { unDocId :: Text } deriving (P.Eq, P.Show)

-- ** Docfield
newtype Docfield = Docfield { unDocfield :: Bool } deriving (P.Eq, P.Show)

-- ** DocumentsSys
newtype DocumentsSys = DocumentsSys { unDocumentsSys :: Text } deriving (P.Eq, P.Show)

-- ** Docversion
newtype Docversion = Docversion { unDocversion :: Text } deriving (P.Eq, P.Show)

-- ** Domain
newtype Domain = Domain { unDomain :: Bool } deriving (P.Eq, P.Show)

-- ** EdlHierarchyOrTemplate
newtype EdlHierarchyOrTemplate = EdlHierarchyOrTemplate { unEdlHierarchyOrTemplate :: Text } deriving (P.Eq, P.Show)

-- ** EndDate
newtype EndDate = EndDate { unEndDate :: Text } deriving (P.Eq, P.Show)

-- ** EventSubtype
newtype EventSubtype = EventSubtype { unEventSubtype :: Text } deriving (P.Eq, P.Show)

-- ** EventType
newtype EventType = EventType { unEventType :: Text } deriving (P.Eq, P.Show)

-- ** Events
newtype Events = Events { unEvents :: Text } deriving (P.Eq, P.Show)

-- ** ExcludeAppLicensing
newtype ExcludeAppLicensing = ExcludeAppLicensing { unExcludeAppLicensing :: Text } deriving (P.Eq, P.Show)

-- ** ExcludeVaultMembership
newtype ExcludeVaultMembership = ExcludeVaultMembership { unExcludeVaultMembership :: Text } deriving (P.Eq, P.Show)

-- ** ExcludedAttributes
newtype ExcludedAttributes = ExcludedAttributes { unExcludedAttributes :: Text } deriving (P.Eq, P.Show)

-- ** Export
newtype Export = Export { unExport :: Text } deriving (P.Eq, P.Show)

-- ** ExtractType
newtype ExtractType = ExtractType { unExtractType :: Text } deriving (P.Eq, P.Show)

-- ** Filter
newtype Filter = Filter { unFilter :: Text } deriving (P.Eq, P.Show)

-- ** FormatResult
newtype FormatResult = FormatResult { unFormatResult :: Text } deriving (P.Eq, P.Show)

-- ** GroupId
newtype GroupId = GroupId { unGroupId :: Text } deriving (P.Eq, P.Show)

-- ** Id
newtype Id = Id { unId :: Text } deriving (P.Eq, P.Show)

-- ** IdParam
newtype IdParam = IdParam { unIdParam :: Text } deriving (P.Eq, P.Show)

-- ** IncludeApplication
newtype IncludeApplication = IncludeApplication { unIncludeApplication :: Bool } deriving (P.Eq, P.Show)

-- ** IncludeImplied
newtype IncludeImplied = IncludeImplied { unIncludeImplied :: Text } deriving (P.Eq, P.Show)

-- ** IncludeImpliedBool
newtype IncludeImpliedBool = IncludeImpliedBool { unIncludeImpliedBool :: Bool } deriving (P.Eq, P.Show)

-- ** IncludeInactive
newtype IncludeInactive = IncludeInactive { unIncludeInactive :: Bool } deriving (P.Eq, P.Show)

-- ** Item
newtype Item = Item { unItem :: Text } deriving (P.Eq, P.Show)

-- ** JobId
newtype JobId = JobId { unJobId :: Text } deriving (P.Eq, P.Show)

-- ** JobStatus
newtype JobStatus = JobStatus { unJobStatus :: Text } deriving (P.Eq, P.Show)

-- ** Lang
newtype Lang = Lang { unLang :: Text } deriving (P.Eq, P.Show)

-- ** LargeSizeAsset
newtype LargeSizeAsset = LargeSizeAsset { unLargeSizeAsset :: Text } deriving (P.Eq, P.Show)

-- ** LayoutName
newtype LayoutName = LayoutName { unLayoutName :: Text } deriving (P.Eq, P.Show)

-- ** LifecycleAndStateAndAction
newtype LifecycleAndStateAndAction = LifecycleAndStateAndAction { unLifecycleAndStateAndAction :: Text } deriving (P.Eq, P.Show)

-- ** LifecycleV
newtype LifecycleV = LifecycleV { unLifecycleV :: Text } deriving (P.Eq, P.Show)

-- ** Limit
newtype Limit = Limit { unLimit :: Text } deriving (P.Eq, P.Show)

-- ** Loc
newtype Loc = Loc { unLoc :: Text } deriving (P.Eq, P.Show)

-- ** LocBool
newtype LocBool = LocBool { unLocBool :: Bool } deriving (P.Eq, P.Show)

-- ** LockDocument
newtype LockDocument = LockDocument { unLockDocument :: Bool } deriving (P.Eq, P.Show)

-- ** LogFormat
newtype LogFormat = LogFormat { unLogFormat :: Text } deriving (P.Eq, P.Show)

-- ** MajorVersion
newtype MajorVersion = MajorVersion { unMajorVersion :: Text } deriving (P.Eq, P.Show)

-- ** MessageType
newtype MessageType = MessageType { unMessageType :: Text } deriving (P.Eq, P.Show)

-- ** MinorVersion
newtype MinorVersion = MinorVersion { unMinorVersion :: Text } deriving (P.Eq, P.Show)

-- ** Name
newtype Name = Name { unName :: Text } deriving (P.Eq, P.Show)

-- ** NameV
newtype NameV = NameV { unNameV :: Text } deriving (P.Eq, P.Show)

-- ** NamedFilter
newtype NamedFilter = NamedFilter { unNamedFilter :: Text } deriving (P.Eq, P.Show)

-- ** NextPage
newtype NextPage = NextPage { unNextPage :: Text } deriving (P.Eq, P.Show)

-- ** NodeId
newtype NodeId = NodeId { unNodeId :: Text } deriving (P.Eq, P.Show)

-- ** OathOidcProfileId
newtype OathOidcProfileId = OathOidcProfileId { unOathOidcProfileId :: Text } deriving (P.Eq, P.Show)

-- ** ObjectFieldName
newtype ObjectFieldName = ObjectFieldName { unObjectFieldName :: Text } deriving (P.Eq, P.Show)

-- ** ObjectName
newtype ObjectName = ObjectName { unObjectName :: Text } deriving (P.Eq, P.Show)

-- ** ObjectNameAndObjectType
newtype ObjectNameAndObjectType = ObjectNameAndObjectType { unObjectNameAndObjectType :: Text } deriving (P.Eq, P.Show)

-- ** ObjectRecordId
newtype ObjectRecordId = ObjectRecordId { unObjectRecordId :: Text } deriving (P.Eq, P.Show)

-- ** ObjectV
newtype ObjectV = ObjectV { unObjectV :: Text } deriving (P.Eq, P.Show)

-- ** Objects
newtype Objects = Objects { unObjects :: Text } deriving (P.Eq, P.Show)

-- ** Offset
newtype Offset = Offset { unOffset :: Text } deriving (P.Eq, P.Show)

-- ** PackageId
newtype PackageId = PackageId { unPackageId :: Text } deriving (P.Eq, P.Show)

-- ** PageSize
newtype PageSize = PageSize { unPageSize :: Text } deriving (P.Eq, P.Show)

-- ** PaginationId
newtype PaginationId = PaginationId { unPaginationId :: Text } deriving (P.Eq, P.Show)

-- ** ParamAccept
newtype ParamAccept = ParamAccept { unParamAccept :: Text } deriving (P.Eq, P.Show)

-- ** ParamContentType
newtype ParamContentType = ParamContentType { unParamContentType :: Text } deriving (P.Eq, P.Show)

-- ** ParamDate
newtype ParamDate = ParamDate { unParamDate :: Text } deriving (P.Eq, P.Show)

-- ** ParamType
newtype ParamType = ParamType { unParamType :: Text } deriving (P.Eq, P.Show)

-- ** ParentNodeId
newtype ParentNodeId = ParentNodeId { unParentNodeId :: Text } deriving (P.Eq, P.Show)

-- ** Participant
newtype Participant = Participant { unParticipant :: Text } deriving (P.Eq, P.Show)

-- ** PicklistName
newtype PicklistName = PicklistName { unPicklistName :: Text } deriving (P.Eq, P.Show)

-- ** PicklistValueName
newtype PicklistValueName = PicklistValueName { unPicklistValueName :: Text } deriving (P.Eq, P.Show)

-- ** PlacemarkType
newtype PlacemarkType = PlacemarkType { unPlacemarkType :: Text } deriving (P.Eq, P.Show)

-- ** PreviousPage
newtype PreviousPage = PreviousPage { unPreviousPage :: Text } deriving (P.Eq, P.Show)

-- ** ProductV
newtype ProductV = ProductV { unProductV :: Text } deriving (P.Eq, P.Show)

-- ** QueueName
newtype QueueName = QueueName { unQueueName :: Text } deriving (P.Eq, P.Show)

-- ** Range
newtype Range = Range { unRange :: Text } deriving (P.Eq, P.Show)

-- ** RecordIdV
newtype RecordIdV = RecordIdV { unRecordIdV :: Text } deriving (P.Eq, P.Show)

-- ** Recursive
newtype Recursive = Recursive { unRecursive :: Text } deriving (P.Eq, P.Show)

-- ** ReferenceType
newtype ReferenceType = ReferenceType { unReferenceType :: Text } deriving (P.Eq, P.Show)

-- ** RelationshipId
newtype RelationshipId = RelationshipId { unRelationshipId :: Text } deriving (P.Eq, P.Show)

-- ** RenditionType
newtype RenditionType = RenditionType { unRenditionType :: Text } deriving (P.Eq, P.Show)

-- ** Renditions
newtype Renditions = Renditions { unRenditions :: Bool } deriving (P.Eq, P.Show)

-- ** Renditiontype
newtype Renditiontype = Renditiontype { unRenditiontype :: Text } deriving (P.Eq, P.Show)

-- ** Restore
newtype Restore = Restore { unRestore :: Bool } deriving (P.Eq, P.Show)

-- ** RoleName
newtype RoleName = RoleName { unRoleName :: Text } deriving (P.Eq, P.Show)

-- ** RoleNameAndUserOrGroup
newtype RoleNameAndUserOrGroup = RoleNameAndUserOrGroup { unRoleNameAndUserOrGroup :: Text } deriving (P.Eq, P.Show)

-- ** RoleV
newtype RoleV = RoleV { unRoleV :: Text } deriving (P.Eq, P.Show)

-- ** Scope
newtype Scope = Scope { unScope :: Text } deriving (P.Eq, P.Show)

-- ** Search
newtype Search = Search { unSearch :: Text } deriving (P.Eq, P.Show)

-- ** SectionId
newtype SectionId = SectionId { unSectionId :: Text } deriving (P.Eq, P.Show)

-- ** SecurityPolicyName
newtype SecurityPolicyName = SecurityPolicyName { unSecurityPolicyName :: Text } deriving (P.Eq, P.Show)

-- ** SessionName
newtype SessionName = SessionName { unSessionName :: Text } deriving (P.Eq, P.Show)

-- ** Sort
newtype Sort = Sort { unSort :: Text } deriving (P.Eq, P.Show)

-- ** SortBy
newtype SortBy = SortBy { unSortBy :: Text } deriving (P.Eq, P.Show)

-- ** SortOrder
newtype SortOrder = SortOrder { unSortOrder :: Text } deriving (P.Eq, P.Show)

-- ** Source
newtype Source = Source { unSource :: Bool } deriving (P.Eq, P.Show)

-- ** Start
newtype Start = Start { unStart :: Text } deriving (P.Eq, P.Show)

-- ** StartDate
newtype StartDate = StartDate { unStartDate :: Text } deriving (P.Eq, P.Show)

-- ** StartIndex
newtype StartIndex = StartIndex { unStartIndex :: Text } deriving (P.Eq, P.Show)

-- ** StartTime
newtype StartTime = StartTime { unStartTime :: Int } deriving (P.Eq, P.Show)

-- ** Status
newtype Status = Status { unStatus :: Text } deriving (P.Eq, P.Show)

-- ** StatusV
newtype StatusV = StatusV { unStatusV :: Text } deriving (P.Eq, P.Show)

-- ** SteadyState
newtype SteadyState = SteadyState { unSteadyState :: Text } deriving (P.Eq, P.Show)

-- ** StopTime
newtype StopTime = StopTime { unStopTime :: Int } deriving (P.Eq, P.Show)

-- ** StudyCountryV
newtype StudyCountryV = StudyCountryV { unStudyCountryV :: Text } deriving (P.Eq, P.Show)

-- ** StudyV
newtype StudyV = StudyV { unStudyV :: Text } deriving (P.Eq, P.Show)

-- ** Subtype
newtype Subtype = Subtype { unSubtype :: Text } deriving (P.Eq, P.Show)

-- ** SuppressRendition
newtype SuppressRendition = SuppressRendition { unSuppressRendition :: Text } deriving (P.Eq, P.Show)

-- ** TaskAction
newtype TaskAction = TaskAction { unTaskAction :: Text } deriving (P.Eq, P.Show)

-- ** TaskId
newtype TaskId = TaskId { unTaskId :: Text } deriving (P.Eq, P.Show)

-- ** TemplateName
newtype TemplateName = TemplateName { unTemplateName :: Text } deriving (P.Eq, P.Show)

-- ** UploadSessionId
newtype UploadSessionId = UploadSessionId { unUploadSessionId :: Text } deriving (P.Eq, P.Show)

-- ** UserActionName
newtype UserActionName = UserActionName { unUserActionName :: Text } deriving (P.Eq, P.Show)

-- ** UserId
newtype UserId = UserId { unUserId :: Text } deriving (P.Eq, P.Show)

-- ** VaultId
newtype VaultId = VaultId { unVaultId :: Text } deriving (P.Eq, P.Show)

-- ** Vaults
newtype Vaults = Vaults { unVaults :: Text } deriving (P.Eq, P.Show)

-- ** Versionscope
newtype Versionscope = Versionscope { unVersionscope :: Text } deriving (P.Eq, P.Show)

-- ** VobjectsObjectNameActionsMergePostRequestInner2
newtype VobjectsObjectNameActionsMergePostRequestInner2 = VobjectsObjectNameActionsMergePostRequestInner2 { unVobjectsObjectNameActionsMergePostRequestInner2 :: [VobjectsObjectNameActionsMergePostRequestInner] } deriving (P.Eq, P.Show, A.ToJSON)

-- ** WorkflowAction
newtype WorkflowAction = WorkflowAction { unWorkflowAction :: Text } deriving (P.Eq, P.Show)

-- ** WorkflowId
newtype WorkflowId = WorkflowId { unWorkflowId :: Text } deriving (P.Eq, P.Show)

-- ** WorkflowName
newtype WorkflowName = WorkflowName { unWorkflowName :: Text } deriving (P.Eq, P.Show)

-- ** XVaultApiClientId
newtype XVaultApiClientId = XVaultApiClientId { unXVaultApiClientId :: Text } deriving (P.Eq, P.Show)

-- ** XVaultApiDescribeQuery
newtype XVaultApiDescribeQuery = XVaultApiDescribeQuery { unXVaultApiDescribeQuery :: Bool } deriving (P.Eq, P.Show)

-- ** XVaultApiFilePartNumber
newtype XVaultApiFilePartNumber = XVaultApiFilePartNumber { unXVaultApiFilePartNumber :: Text } deriving (P.Eq, P.Show)

-- ** XVaultApiMigrationMode
newtype XVaultApiMigrationMode = XVaultApiMigrationMode { unXVaultApiMigrationMode :: Bool } deriving (P.Eq, P.Show)

-- ** XVaultApiMigrationModeText
newtype XVaultApiMigrationModeText = XVaultApiMigrationModeText { unXVaultApiMigrationModeText :: Text } deriving (P.Eq, P.Show)

-- ** XVaultApiNoTriggers
newtype XVaultApiNoTriggers = XVaultApiNoTriggers { unXVaultApiNoTriggers :: Bool } deriving (P.Eq, P.Show)

-- * Models


-- ** VobjectsObjectNameActionsMergePostRequestInner
-- | VobjectsObjectNameActionsMergePostRequestInner
data VobjectsObjectNameActionsMergePostRequestInner = VobjectsObjectNameActionsMergePostRequestInner
  { vobjectsObjectNameActionsMergePostRequestInnerDuplicateRecordId :: !(Maybe Text) -- ^ "duplicate_record_id"
  , vobjectsObjectNameActionsMergePostRequestInnerMainRecordId :: !(Maybe Text) -- ^ "main_record_id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON VobjectsObjectNameActionsMergePostRequestInner
instance A.FromJSON VobjectsObjectNameActionsMergePostRequestInner where
  parseJSON = A.withObject "VobjectsObjectNameActionsMergePostRequestInner" $ \o ->
    VobjectsObjectNameActionsMergePostRequestInner
      <$> (o .:? "duplicate_record_id")
      <*> (o .:? "main_record_id")

-- | ToJSON VobjectsObjectNameActionsMergePostRequestInner
instance A.ToJSON VobjectsObjectNameActionsMergePostRequestInner where
  toJSON VobjectsObjectNameActionsMergePostRequestInner {..} =
   _omitNulls
      [ "duplicate_record_id" .= vobjectsObjectNameActionsMergePostRequestInnerDuplicateRecordId
      , "main_record_id" .= vobjectsObjectNameActionsMergePostRequestInnerMainRecordId
      ]


-- | Construct a value of type 'VobjectsObjectNameActionsMergePostRequestInner' (by applying it's required fields, if any)
mkVobjectsObjectNameActionsMergePostRequestInner
  :: VobjectsObjectNameActionsMergePostRequestInner
mkVobjectsObjectNameActionsMergePostRequestInner =
  VobjectsObjectNameActionsMergePostRequestInner
  { vobjectsObjectNameActionsMergePostRequestInnerDuplicateRecordId = Nothing
  , vobjectsObjectNameActionsMergePostRequestInnerMainRecordId = Nothing
  }





