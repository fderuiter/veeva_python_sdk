/**
 * Veeva Vault API v25.1
 * The latest GA version of the Vault REST API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.util.*;
import org.openapitools.client.model.VobjectsObjectNameActionsMergePostRequestInner;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DefaultApi {
  String basePath = "http://}/api/v25.1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Retrieve API Versions
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void apiGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/api/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve API Versions
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void apiGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/api/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Content File
  * 
   * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void apiMdlComponentsComponentTypeAndRecordNameFilesGet (String componentTypeAndRecordName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'componentTypeAndRecordName' is set
    if (componentTypeAndRecordName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet",
        new ApiException(400, "Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet"));
    }

    // create path and map variables
    String path = "/api/mdl/components/{component_type_and_record_name}/files".replaceAll("\\{" + "component_type_and_record_name" + "\\}", apiInvoker.escapeString(componentTypeAndRecordName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Content File
   * 
   * @param componentTypeAndRecordName The component type of the record followed by the name of the record from which to retrieve the content file. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Formattedoutput.my_formatted_output__c&#x60;.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void apiMdlComponentsComponentTypeAndRecordNameFilesGet (String componentTypeAndRecordName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'componentTypeAndRecordName' is set
    if (componentTypeAndRecordName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet",
        new ApiException(400, "Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameFilesGet"));
    }

    // create path and map variables
    String path = "/api/mdl/components/{component_type_and_record_name}/files".replaceAll("\\{format\\}","json").replaceAll("\\{" + "component_type_and_record_name" + "\\}", apiInvoker.escapeString(componentTypeAndRecordName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Component Record (MDL)
  * 
   * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void apiMdlComponentsComponentTypeAndRecordNameGet (String componentTypeAndRecordName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'componentTypeAndRecordName' is set
    if (componentTypeAndRecordName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameGet",
        new ApiException(400, "Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameGet"));
    }

    // create path and map variables
    String path = "/api/mdl/components/{component_type_and_record_name}".replaceAll("\\{" + "component_type_and_record_name" + "\\}", apiInvoker.escapeString(componentTypeAndRecordName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Component Record (MDL)
   * 
   * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void apiMdlComponentsComponentTypeAndRecordNameGet (String componentTypeAndRecordName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'componentTypeAndRecordName' is set
    if (componentTypeAndRecordName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameGet",
        new ApiException(400, "Missing the required parameter 'componentTypeAndRecordName' when calling apiMdlComponentsComponentTypeAndRecordNameGet"));
    }

    // create path and map variables
    String path = "/api/mdl/components/{component_type_and_record_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "component_type_and_record_name" + "\\}", apiInvoker.escapeString(componentTypeAndRecordName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Asynchronous MDL Script Results
  * 
   * @param jobId 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void apiMdlExecuteAsyncJobIdResultsGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling apiMdlExecuteAsyncJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling apiMdlExecuteAsyncJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/api/mdl/execute_async/{job_id}/results".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Asynchronous MDL Script Results
   * 
   * @param jobId    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void apiMdlExecuteAsyncJobIdResultsGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling apiMdlExecuteAsyncJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling apiMdlExecuteAsyncJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/api/mdl/execute_async/{job_id}/results".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Execute MDL Script Asynchronously
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void apiMdlExecuteAsyncPost (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/api/mdl/execute_async";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Execute MDL Script Asynchronously
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void apiMdlExecuteAsyncPost (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/api/mdl/execute_async".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Execute MDL Script
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void apiMdlExecutePost (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/api/mdl/execute";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Execute MDL Script
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void apiMdlExecutePost (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/api/mdl/execute".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Upload Content File
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void apiMdlFilesPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/api/mdl/files";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Upload Content File
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void apiMdlFilesPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/api/mdl/files".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Audit Details
  * 
   * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.
   * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
   * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.
   * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.
   * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.
   * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
   * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
   * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.
   * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void audittrailAuditTrailTypeGet (String auditTrailType, String startDate, String endDate, String allDates, String formatResult, String limit, String offset, String objects, String events, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'auditTrailType' is set
    if (auditTrailType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'auditTrailType' when calling audittrailAuditTrailTypeGet",
        new ApiException(400, "Missing the required parameter 'auditTrailType' when calling audittrailAuditTrailTypeGet"));
    }

    // create path and map variables
    String path = "/audittrail/{audit_trail_type}".replaceAll("\\{" + "audit_trail_type" + "\\}", apiInvoker.escapeString(auditTrailType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "all_dates", allDates));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "objects", objects));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "events", events));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Audit Details
   * 
   * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc). Use the Retrieve Audit Types API to retrieve types available in your Vault. Requests for login_audit_trail only accept one request per user at a time.   * @param startDate Specify a start date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.   * @param endDate Specify an end date to retrieve audit information. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z. If omitted, defaults to the last 30 days.   * @param allDates Set to true to request audit information for all dates. You must leave start_date and end_date blank when requesting an export of a full audit trail.   * @param formatResult To request a downloadable CSV file of your audit details, use csv. The response contains a jobId to retrieve the job status, which contains a link to download the CSV file. If omitted, the API returns a JSON response and does not start a job. If all_dates is true, this parameter is required.   * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.   * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.   * @param objects This is an optional parameter when specifying object_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more object names to retrieve their audit details. For example, objects&#x3D;product__v,country__v. If omitted, defaults to all objects.   * @param events This is an optional parameter when specifying object_audit_trail or document_audit_trail as the {audit_trail_type}. Provide a comma-separated list of one or more audit events to retrieve their audit details. For example, events&#x3D;Edit,Delete,TaskAssignment. If omitted, defaults to all audit events. See Vault Help for full lists of object audit events and document audit events.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void audittrailAuditTrailTypeGet (String auditTrailType, String startDate, String endDate, String allDates, String formatResult, String limit, String offset, String objects, String events, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'auditTrailType' is set
    if (auditTrailType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'auditTrailType' when calling audittrailAuditTrailTypeGet",
        new ApiException(400, "Missing the required parameter 'auditTrailType' when calling audittrailAuditTrailTypeGet"));
    }

    // create path and map variables
    String path = "/audittrail/{audit_trail_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "audit_trail_type" + "\\}", apiInvoker.escapeString(auditTrailType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "all_dates", allDates));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "objects", objects));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "events", events));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Authentication Type Discovery
  * 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void authDiscoveryPost (String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/auth/discovery";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Authentication Type Discovery
   * 
   * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void authDiscoveryPost (String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/auth/discovery".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * OAuth 2.0 / OpenID Connect
  * 
   * @param oathOidcProfileId 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void authOauthSessionOathOidcProfileIdPost (String oathOidcProfileId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'oathOidcProfileId' is set
    if (oathOidcProfileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'oathOidcProfileId' when calling authOauthSessionOathOidcProfileIdPost",
        new ApiException(400, "Missing the required parameter 'oathOidcProfileId' when calling authOauthSessionOathOidcProfileIdPost"));
    }

    // create path and map variables
    String path = "/auth/oauth/session/{oath_oidc_profile_id}".replaceAll("\\{" + "oath_oidc_profile_id" + "\\}", apiInvoker.escapeString(oathOidcProfileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * OAuth 2.0 / OpenID Connect
   * 
   * @param oathOidcProfileId    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void authOauthSessionOathOidcProfileIdPost (String oathOidcProfileId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'oathOidcProfileId' is set
    if (oathOidcProfileId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'oathOidcProfileId' when calling authOauthSessionOathOidcProfileIdPost",
        new ApiException(400, "Missing the required parameter 'oathOidcProfileId' when calling authOauthSessionOathOidcProfileIdPost"));
    }

    // create path and map variables
    String path = "/auth/oauth/session/{oath_oidc_profile_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "oath_oidc_profile_id" + "\\}", apiInvoker.escapeString(oathOidcProfileId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * User Name and Password
  * 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void authPost (String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/auth";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * User Name and Password
   * 
   * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void authPost (String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/auth".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Single Source Code File
  * 
   * @param className The fully qualified class name of your file.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeClassNameDelete (String className, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'className' is set
    if (className == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'className' when calling codeClassNameDelete",
        new ApiException(400, "Missing the required parameter 'className' when calling codeClassNameDelete"));
    }

    // create path and map variables
    String path = "/code/{class_name}".replaceAll("\\{" + "class_name" + "\\}", apiInvoker.escapeString(className.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Single Source Code File
   * 
   * @param className The fully qualified class name of your file.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeClassNameDelete (String className, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'className' is set
    if (className == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'className' when calling codeClassNameDelete",
        new ApiException(400, "Missing the required parameter 'className' when calling codeClassNameDelete"));
    }

    // create path and map variables
    String path = "/code/{class_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "class_name" + "\\}", apiInvoker.escapeString(className.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Disable Vault Extension
  * 
   * @param className The fully qualified class name of your file.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeClassNameDisablePut (String className, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'className' is set
    if (className == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'className' when calling codeClassNameDisablePut",
        new ApiException(400, "Missing the required parameter 'className' when calling codeClassNameDisablePut"));
    }

    // create path and map variables
    String path = "/code/{class_name}/disable".replaceAll("\\{" + "class_name" + "\\}", apiInvoker.escapeString(className.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Disable Vault Extension
   * 
   * @param className The fully qualified class name of your file.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeClassNameDisablePut (String className, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'className' is set
    if (className == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'className' when calling codeClassNameDisablePut",
        new ApiException(400, "Missing the required parameter 'className' when calling codeClassNameDisablePut"));
    }

    // create path and map variables
    String path = "/code/{class_name}/disable".replaceAll("\\{format\\}","json").replaceAll("\\{" + "class_name" + "\\}", apiInvoker.escapeString(className.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Enable Vault Extension
  * 
   * @param className The fully qualified class name of your file.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeClassNameEnablePut (String className, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'className' is set
    if (className == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'className' when calling codeClassNameEnablePut",
        new ApiException(400, "Missing the required parameter 'className' when calling codeClassNameEnablePut"));
    }

    // create path and map variables
    String path = "/code/{class_name}/enable".replaceAll("\\{" + "class_name" + "\\}", apiInvoker.escapeString(className.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Enable Vault Extension
   * 
   * @param className The fully qualified class name of your file.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeClassNameEnablePut (String className, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'className' is set
    if (className == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'className' when calling codeClassNameEnablePut",
        new ApiException(400, "Missing the required parameter 'className' when calling codeClassNameEnablePut"));
    }

    // create path and map variables
    String path = "/code/{class_name}/enable".replaceAll("\\{format\\}","json").replaceAll("\\{" + "class_name" + "\\}", apiInvoker.escapeString(className.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Single Source Code File
  * 
   * @param className The fully qualified class name of your file.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeClassNameGet (String className, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'className' is set
    if (className == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'className' when calling codeClassNameGet",
        new ApiException(400, "Missing the required parameter 'className' when calling codeClassNameGet"));
    }

    // create path and map variables
    String path = "/code/{class_name}".replaceAll("\\{" + "class_name" + "\\}", apiInvoker.escapeString(className.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Single Source Code File
   * 
   * @param className The fully qualified class name of your file.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeClassNameGet (String className, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'className' is set
    if (className == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'className' when calling codeClassNameGet",
        new ApiException(400, "Missing the required parameter 'className' when calling codeClassNameGet"));
    }

    // create path and map variables
    String path = "/code/{class_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "class_name" + "\\}", apiInvoker.escapeString(className.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Profiling Sessions
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeProfilerGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/code/profiler";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Profiling Sessions
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeProfilerGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/code/profiler".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Profiling Session
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeProfilerPost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/code/profiler";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Profiling Session
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeProfilerPost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/code/profiler".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * End Profiling Session
  * 
   * @param sessionName The name of the session, for example,  baseline__c.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeProfilerSessionNameActionsEndPost (String sessionName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionName' is set
    if (sessionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameActionsEndPost",
        new ApiException(400, "Missing the required parameter 'sessionName' when calling codeProfilerSessionNameActionsEndPost"));
    }

    // create path and map variables
    String path = "/code/profiler/{session_name}/actions/end".replaceAll("\\{" + "session_name" + "\\}", apiInvoker.escapeString(sessionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * End Profiling Session
   * 
   * @param sessionName The name of the session, for example,  baseline__c.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeProfilerSessionNameActionsEndPost (String sessionName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionName' is set
    if (sessionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameActionsEndPost",
        new ApiException(400, "Missing the required parameter 'sessionName' when calling codeProfilerSessionNameActionsEndPost"));
    }

    // create path and map variables
    String path = "/code/profiler/{session_name}/actions/end".replaceAll("\\{format\\}","json").replaceAll("\\{" + "session_name" + "\\}", apiInvoker.escapeString(sessionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Profiling Session
  * 
   * @param sessionName The name of the session, for example,  baseline__c.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeProfilerSessionNameDelete (String sessionName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionName' is set
    if (sessionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameDelete",
        new ApiException(400, "Missing the required parameter 'sessionName' when calling codeProfilerSessionNameDelete"));
    }

    // create path and map variables
    String path = "/code/profiler/{session_name}".replaceAll("\\{" + "session_name" + "\\}", apiInvoker.escapeString(sessionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Profiling Session
   * 
   * @param sessionName The name of the session, for example,  baseline__c.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeProfilerSessionNameDelete (String sessionName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionName' is set
    if (sessionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameDelete",
        new ApiException(400, "Missing the required parameter 'sessionName' when calling codeProfilerSessionNameDelete"));
    }

    // create path and map variables
    String path = "/code/profiler/{session_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "session_name" + "\\}", apiInvoker.escapeString(sessionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Profiling Session
  * 
   * @param sessionName The name of the session, for example,  baseline__c.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeProfilerSessionNameGet (String sessionName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionName' is set
    if (sessionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameGet",
        new ApiException(400, "Missing the required parameter 'sessionName' when calling codeProfilerSessionNameGet"));
    }

    // create path and map variables
    String path = "/code/profiler/{session_name}".replaceAll("\\{" + "session_name" + "\\}", apiInvoker.escapeString(sessionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Profiling Session
   * 
   * @param sessionName The name of the session, for example,  baseline__c.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeProfilerSessionNameGet (String sessionName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionName' is set
    if (sessionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameGet",
        new ApiException(400, "Missing the required parameter 'sessionName' when calling codeProfilerSessionNameGet"));
    }

    // create path and map variables
    String path = "/code/profiler/{session_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "session_name" + "\\}", apiInvoker.escapeString(sessionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Profiling Session Results
  * 
   * @param sessionName The name of the session, for example,  baseline__c.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codeProfilerSessionNameResultsGet (String sessionName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'sessionName' is set
    if (sessionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameResultsGet",
        new ApiException(400, "Missing the required parameter 'sessionName' when calling codeProfilerSessionNameResultsGet"));
    }

    // create path and map variables
    String path = "/code/profiler/{session_name}/results".replaceAll("\\{" + "session_name" + "\\}", apiInvoker.escapeString(sessionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Profiling Session Results
   * 
   * @param sessionName The name of the session, for example,  baseline__c.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codeProfilerSessionNameResultsGet (String sessionName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'sessionName' is set
    if (sessionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sessionName' when calling codeProfilerSessionNameResultsGet",
        new ApiException(400, "Missing the required parameter 'sessionName' when calling codeProfilerSessionNameResultsGet"));
    }

    // create path and map variables
    String path = "/code/profiler/{session_name}/results".replaceAll("\\{format\\}","json").replaceAll("\\{" + "session_name" + "\\}", apiInvoker.escapeString(sessionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add or Replace Single Source Code File
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void codePut (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/code";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add or Replace Single Source Code File
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void codePut (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/code".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Specific Root Nodes
  * 
   * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void compositesTreesEdlHierarchyOrTemplateActionsListnodesPost (String edlHierarchyOrTemplate, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'edlHierarchyOrTemplate' is set
    if (edlHierarchyOrTemplate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost",
        new ApiException(400, "Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost"));
    }

    // create path and map variables
    String path = "/composites/trees/{edl_hierarchy_or_template}/actions/listnodes".replaceAll("\\{" + "edl_hierarchy_or_template" + "\\}", apiInvoker.escapeString(edlHierarchyOrTemplate.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Specific Root Nodes
   * 
   * @param edlHierarchyOrTemplate Choose to retrieve either edl_hierarchy__v or edl_template__v   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void compositesTreesEdlHierarchyOrTemplateActionsListnodesPost (String edlHierarchyOrTemplate, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'edlHierarchyOrTemplate' is set
    if (edlHierarchyOrTemplate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost",
        new ApiException(400, "Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateActionsListnodesPost"));
    }

    // create path and map variables
    String path = "/composites/trees/{edl_hierarchy_or_template}/actions/listnodes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "edl_hierarchy_or_template" + "\\}", apiInvoker.escapeString(edlHierarchyOrTemplate.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Root Nodes
  * 
   * @param edlHierarchyOrTemplate 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void compositesTreesEdlHierarchyOrTemplateGet (String edlHierarchyOrTemplate, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'edlHierarchyOrTemplate' is set
    if (edlHierarchyOrTemplate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateGet",
        new ApiException(400, "Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateGet"));
    }

    // create path and map variables
    String path = "/composites/trees/{edl_hierarchy_or_template}".replaceAll("\\{" + "edl_hierarchy_or_template" + "\\}", apiInvoker.escapeString(edlHierarchyOrTemplate.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Root Nodes
   * 
   * @param edlHierarchyOrTemplate    * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void compositesTreesEdlHierarchyOrTemplateGet (String edlHierarchyOrTemplate, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'edlHierarchyOrTemplate' is set
    if (edlHierarchyOrTemplate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateGet",
        new ApiException(400, "Missing the required parameter 'edlHierarchyOrTemplate' when calling compositesTreesEdlHierarchyOrTemplateGet"));
    }

    // create path and map variables
    String path = "/composites/trees/{edl_hierarchy_or_template}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "edl_hierarchy_or_template" + "\\}", apiInvoker.escapeString(edlHierarchyOrTemplate.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve a Node&#39;s Children
  * 
   * @param parentNodeId The ID of a parent node in the hierarchy.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void compositesTreesEdlHierarchyVParentNodeIdChildrenGet (String parentNodeId, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'parentNodeId' is set
    if (parentNodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet",
        new ApiException(400, "Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet"));
    }

    // create path and map variables
    String path = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children".replaceAll("\\{" + "parent_node_id" + "\\}", apiInvoker.escapeString(parentNodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve a Node&#39;s Children
   * 
   * @param parentNodeId The ID of a parent node in the hierarchy.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void compositesTreesEdlHierarchyVParentNodeIdChildrenGet (String parentNodeId, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'parentNodeId' is set
    if (parentNodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet",
        new ApiException(400, "Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenGet"));
    }

    // create path and map variables
    String path = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children".replaceAll("\\{format\\}","json").replaceAll("\\{" + "parent_node_id" + "\\}", apiInvoker.escapeString(parentNodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Node Order
  * 
   * @param parentNodeId The ID of a parent node in the hierarchy.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void compositesTreesEdlHierarchyVParentNodeIdChildrenPut (String parentNodeId, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'parentNodeId' is set
    if (parentNodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut",
        new ApiException(400, "Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut"));
    }

    // create path and map variables
    String path = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children".replaceAll("\\{" + "parent_node_id" + "\\}", apiInvoker.escapeString(parentNodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Node Order
   * 
   * @param parentNodeId The ID of a parent node in the hierarchy.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void compositesTreesEdlHierarchyVParentNodeIdChildrenPut (String parentNodeId, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'parentNodeId' is set
    if (parentNodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut",
        new ApiException(400, "Missing the required parameter 'parentNodeId' when calling compositesTreesEdlHierarchyVParentNodeIdChildrenPut"));
    }

    // create path and map variables
    String path = "/composites/trees/edl_hierarchy__v/{parent_node_id}/children".replaceAll("\\{format\\}","json").replaceAll("\\{" + "parent_node_id" + "\\}", apiInvoker.escapeString(parentNodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Component Record (XML/JSON)
  * 
   * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.
   * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void configurationComponentTypeAndRecordNameGet (String componentTypeAndRecordName, String loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'componentTypeAndRecordName' is set
    if (componentTypeAndRecordName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentTypeAndRecordName' when calling configurationComponentTypeAndRecordNameGet",
        new ApiException(400, "Missing the required parameter 'componentTypeAndRecordName' when calling configurationComponentTypeAndRecordNameGet"));
    }

    // create path and map variables
    String path = "/configuration/{component_type_and_record_name}".replaceAll("\\{" + "component_type_and_record_name" + "\\}", apiInvoker.escapeString(componentTypeAndRecordName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Component Record (XML/JSON)
   * 
   * @param componentTypeAndRecordName The component type name (&#x60;Picklist&#x60;, &#x60;Docfield&#x60;, &#x60;Doctype&#x60;, etc.) followed by the name of the record from which to retrieve metadata. The format is &#x60;{Componenttype}.{record_name}&#x60;. For example, &#x60;Picklist.color__c&#x60;. Find this with the [Retrieve Component Record Collection](https://developer.veevavault.com/api/24.3#Retrieve_Component_Record_Collection) endpoint.   * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void configurationComponentTypeAndRecordNameGet (String componentTypeAndRecordName, String loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'componentTypeAndRecordName' is set
    if (componentTypeAndRecordName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentTypeAndRecordName' when calling configurationComponentTypeAndRecordNameGet",
        new ApiException(400, "Missing the required parameter 'componentTypeAndRecordName' when calling configurationComponentTypeAndRecordNameGet"));
    }

    // create path and map variables
    String path = "/configuration/{component_type_and_record_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "component_type_and_record_name" + "\\}", apiInvoker.escapeString(componentTypeAndRecordName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Component Record Collection
  * 
   * @param componentType 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void configurationComponentTypeGet (String componentType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'componentType' is set
    if (componentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentType' when calling configurationComponentTypeGet",
        new ApiException(400, "Missing the required parameter 'componentType' when calling configurationComponentTypeGet"));
    }

    // create path and map variables
    String path = "/configuration/{component_type}".replaceAll("\\{" + "component_type" + "\\}", apiInvoker.escapeString(componentType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Component Record Collection
   * 
   * @param componentType    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void configurationComponentTypeGet (String componentType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'componentType' is set
    if (componentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentType' when calling configurationComponentTypeGet",
        new ApiException(400, "Missing the required parameter 'componentType' when calling configurationComponentTypeGet"));
    }

    // create path and map variables
    String path = "/configuration/{component_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "component_type" + "\\}", apiInvoker.escapeString(componentType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Details from a Specific Object
  * 
   * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.
   * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void configurationObjectNameAndObjectTypeGet (String objectNameAndObjectType, String loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectNameAndObjectType' is set
    if (objectNameAndObjectType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectNameAndObjectType' when calling configurationObjectNameAndObjectTypeGet",
        new ApiException(400, "Missing the required parameter 'objectNameAndObjectType' when calling configurationObjectNameAndObjectTypeGet"));
    }

    // create path and map variables
    String path = "/configuration/{object_name_and_object_type}".replaceAll("\\{" + "object_name_and_object_type" + "\\}", apiInvoker.escapeString(objectNameAndObjectType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Details from a Specific Object
   * 
   * @param objectNameAndObjectType The object name followed by the object type in the format &#x60;Objecttype.{object_name}.{object_type}&#x60;. For example, &#x60;Objecttype.product__v.base__v&#x60;.   * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void configurationObjectNameAndObjectTypeGet (String objectNameAndObjectType, String loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectNameAndObjectType' is set
    if (objectNameAndObjectType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectNameAndObjectType' when calling configurationObjectNameAndObjectTypeGet",
        new ApiException(400, "Missing the required parameter 'objectNameAndObjectType' when calling configurationObjectNameAndObjectTypeGet"));
    }

    // create path and map variables
    String path = "/configuration/{object_name_and_object_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name_and_object_type" + "\\}", apiInvoker.escapeString(objectNameAndObjectType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Details from All Object Types
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void configurationObjecttypeGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/configuration/Objecttype";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Details from All Object Types
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void configurationObjecttypeGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/configuration/Objecttype".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Lifecycle Role Assignment Override Rules
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void configurationRoleAssignmentRuleDelete (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/configuration/role_assignment_rule";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Lifecycle Role Assignment Override Rules
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void configurationRoleAssignmentRuleDelete (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/configuration/role_assignment_rule".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
  * 
   * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c
   * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c
   * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap
   * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States
   * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study
   * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void configurationRoleAssignmentRuleGet (String lifecycleV, String roleV, String productV, String countryV, String studyV, String studyCountryV, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/configuration/role_assignment_rule";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lifecycle__v", lifecycleV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "role__v", roleV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product__v", productV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "country__v", countryV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "study__v", studyV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "study_country__v", studyCountryV));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Lifecycle Role Assignment Rules (Default &amp; Override)
   * 
   * @param lifecycleV Include the name of the lifecycle from which to retrieve information. For example: lifecycle_v&#x3D;general_lifecycle__c   * @param roleV Include the name of the role from which to retrieve information. For example: role__v&#x3D;editor__c   * @param productV Include the ID/name of a specific product to see product-based override rules to default users/allowed users for the lifecycle role. For example: product__v&#x3D;0PR0011001 or product__v.name__v&#x3D;CholeCap   * @param countryV Include the ID/name of a specific country to see country-based override rules to default users/allowed users for the lifecycle role. For example: country__v&#x3D;0CR0022002 or country__v.name__v&#x3D;United States   * @param studyV In eTMF Vaults only. Include the ID/name of a specific study to see study-based override rules to default users/allowed users for the lifecycle role. For example: study__v&#x3D;0ST0021J01 or study__v.name__v&#x3D;CholeCap Study   * @param studyCountryV In eTMF Vaults only. Include the ID/name of a specific study country to see study country-based override rules to default users/allowed users for the lifecycle role. For example: study_country__v&#x3D;0SC0001001 or study_country__v.name__v&#x3D;Germany   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void configurationRoleAssignmentRuleGet (String lifecycleV, String roleV, String productV, String countryV, String studyV, String studyCountryV, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/configuration/role_assignment_rule".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "lifecycle__v", lifecycleV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "role__v", roleV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product__v", productV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "country__v", countryV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "study__v", studyV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "study_country__v", studyCountryV));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Lifecycle Role Assignment Override Rules
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void configurationRoleAssignmentRulePost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/configuration/role_assignment_rule";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Lifecycle Role Assignment Override Rules
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void configurationRoleAssignmentRulePost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/configuration/role_assignment_rule".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Lifecycle Role Assignment Rules (Default &amp; Override)
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void configurationRoleAssignmentRulePut (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/configuration/role_assignment_rule";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Lifecycle Role Assignment Rules (Default &amp; Override)
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void configurationRoleAssignmentRulePut (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/configuration/role_assignment_rule".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Delegated Session
  * 
   * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void delegationLoginPost (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/delegation/login";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Delegated Session
   * 
   * @param authorization The sessionId of the currently authenticated user who will initiate the delegated session. Cannot be a delegated_sessionid.   * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void delegationLoginPost (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/delegation/login".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Delegations
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void delegationVaultsGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/delegation/vaults";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Delegations
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void delegationVaultsGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/delegation/vaults".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Session Keep Alive
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void keepAlivePost (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/keep-alive";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Session Keep Alive
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void keepAlivePost (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/keep-alive".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Limits on Objects
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void limitsGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/limits";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Limits on Objects
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void limitsGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/limits".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Daily API Usage
  * 
   * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.
   * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void logsApiUsageGet (String date, String logFormat, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/logs/api_usage";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "log_format", logFormat));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Daily API Usage
   * 
   * @param date The day to retrieve the API Usage log. Date is in UTC and follows the format YYYY-MM-DD. Date cannot be more than 30 days in the past.   * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void logsApiUsageGet (String date, String logFormat, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/logs/api_usage".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "log_format", logFormat));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Debug Logs
  * 
   * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.
   * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void logsCodeDebugGet (String userId, Boolean includeInactive, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/logs/code/debug";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "user_id", userId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_inactive", includeInactive));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Debug Logs
   * 
   * @param userId Filter results to retrieve the debug log for this user ID only. If omitted, this request retrieves debug logs for all users in the Vault.   * @param includeInactive Set to &#x60;true&#x60; to include debug log sessions with a status of &#x60;inactive__sys&#x60; in the response. If omitted, defaults to &#x60;false&#x60; and inactive sessions are not included in the response.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void logsCodeDebugGet (String userId, Boolean includeInactive, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/logs/code/debug".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "user_id", userId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_inactive", includeInactive));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Debug Log
  * 
   * @param id The ID of the debug log to delete.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void logsCodeDebugIdActionsResetDelete (String id, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetDelete"));
    }

    // create path and map variables
    String path = "/logs/code/debug/{id}/actions/reset".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Debug Log
   * 
   * @param id The ID of the debug log to delete.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void logsCodeDebugIdActionsResetDelete (String id, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetDelete"));
    }

    // create path and map variables
    String path = "/logs/code/debug/{id}/actions/reset".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reset Debug Log
  * 
   * @param id The ID of the debug log to delete.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void logsCodeDebugIdActionsResetPost (String id, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetPost",
        new ApiException(400, "Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetPost"));
    }

    // create path and map variables
    String path = "/logs/code/debug/{id}/actions/reset".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reset Debug Log
   * 
   * @param id The ID of the debug log to delete.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void logsCodeDebugIdActionsResetPost (String id, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetPost",
        new ApiException(400, "Missing the required parameter 'id' when calling logsCodeDebugIdActionsResetPost"));
    }

    // create path and map variables
    String path = "/logs/code/debug/{id}/actions/reset".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Debug Log Files
  * 
   * @param id The ID of the debug log to download.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void logsCodeDebugIdFilesGet (String id, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling logsCodeDebugIdFilesGet",
        new ApiException(400, "Missing the required parameter 'id' when calling logsCodeDebugIdFilesGet"));
    }

    // create path and map variables
    String path = "/logs/code/debug/{id}/files".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Debug Log Files
   * 
   * @param id The ID of the debug log to download.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void logsCodeDebugIdFilesGet (String id, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling logsCodeDebugIdFilesGet",
        new ApiException(400, "Missing the required parameter 'id' when calling logsCodeDebugIdFilesGet"));
    }

    // create path and map variables
    String path = "/logs/code/debug/{id}/files".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Single Debug Log
  * 
   * @param id The ID of the debug log to retrieve.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void logsCodeDebugIdGet (String id, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling logsCodeDebugIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling logsCodeDebugIdGet"));
    }

    // create path and map variables
    String path = "/logs/code/debug/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Single Debug Log
   * 
   * @param id The ID of the debug log to retrieve.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void logsCodeDebugIdGet (String id, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling logsCodeDebugIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling logsCodeDebugIdGet"));
    }

    // create path and map variables
    String path = "/logs/code/debug/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Debug Log
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void logsCodeDebugPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/logs/code/debug";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Debug Log
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void logsCodeDebugPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/logs/code/debug".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download SDK Runtime Log
  * 
   * @param date 
   * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP. 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void logsCodeRuntimeGet (String date, String logFormat, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/logs/code/runtime";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "log_format", logFormat));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download SDK Runtime Log
   * 
   * @param date    * @param logFormat Optional: Specify the format to download. Possible values are csv or logfile. If omitted, defaults to csv. Note that this call always downloads a ZIP file. This parameter only changes the format of the file contained within the ZIP.    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void logsCodeRuntimeGet (String date, String logFormat, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/logs/code/runtime".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "date", date));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "log_format", logFormat));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Import Bulk Translation File
  * 
   * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void messagesMessageTypeActionsImportPost (String messageType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'messageType' is set
    if (messageType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageType' when calling messagesMessageTypeActionsImportPost",
        new ApiException(400, "Missing the required parameter 'messageType' when calling messagesMessageTypeActionsImportPost"));
    }

    // create path and map variables
    String path = "/messages/{message_type}/actions/import".replaceAll("\\{" + "message_type" + "\\}", apiInvoker.escapeString(messageType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Import Bulk Translation File
   * 
   * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void messagesMessageTypeActionsImportPost (String messageType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'messageType' is set
    if (messageType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageType' when calling messagesMessageTypeActionsImportPost",
        new ApiException(400, "Missing the required parameter 'messageType' when calling messagesMessageTypeActionsImportPost"));
    }

    // create path and map variables
    String path = "/messages/{message_type}/actions/import".replaceAll("\\{format\\}","json").replaceAll("\\{" + "message_type" + "\\}", apiInvoker.escapeString(messageType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Export Bulk Translation File
  * 
   * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.
   * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid. 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void messagesMessageTypeLanguageLangActionsExportPost (String messageType, String lang, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'messageType' is set
    if (messageType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageType' when calling messagesMessageTypeLanguageLangActionsExportPost",
        new ApiException(400, "Missing the required parameter 'messageType' when calling messagesMessageTypeLanguageLangActionsExportPost"));
    }
    // verify the required parameter 'lang' is set
    if (lang == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lang' when calling messagesMessageTypeLanguageLangActionsExportPost",
        new ApiException(400, "Missing the required parameter 'lang' when calling messagesMessageTypeLanguageLangActionsExportPost"));
    }

    // create path and map variables
    String path = "/messages/{message_type}/language/{lang}/actions/export".replaceAll("\\{" + "message_type" + "\\}", apiInvoker.escapeString(messageType.toString())).replaceAll("\\{" + "lang" + "\\}", apiInvoker.escapeString(lang.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Export Bulk Translation File
   * 
   * @param messageType The message type name: field_labels__sys, system_messages__sys, notification_template_messages__sys, or user_account_messages__sys.   * @param lang A valid language code value, for example, en. Retrieve available values from the Admin Key (admin_key__sys) field on the Language (language__sys) object. Active and Inactive languages are both valid.    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void messagesMessageTypeLanguageLangActionsExportPost (String messageType, String lang, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'messageType' is set
    if (messageType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'messageType' when calling messagesMessageTypeLanguageLangActionsExportPost",
        new ApiException(400, "Missing the required parameter 'messageType' when calling messagesMessageTypeLanguageLangActionsExportPost"));
    }
    // verify the required parameter 'lang' is set
    if (lang == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lang' when calling messagesMessageTypeLanguageLangActionsExportPost",
        new ApiException(400, "Missing the required parameter 'lang' when calling messagesMessageTypeLanguageLangActionsExportPost"));
    }

    // create path and map variables
    String path = "/messages/{message_type}/language/{lang}/actions/export".replaceAll("\\{format\\}","json").replaceAll("\\{" + "message_type" + "\\}", apiInvoker.escapeString(messageType.toString())).replaceAll("\\{" + "lang" + "\\}", apiInvoker.escapeString(lang.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Audit Metadata
  * 
   * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataAudittrailAuditTrailTypeGet (String auditTrailType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'auditTrailType' is set
    if (auditTrailType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'auditTrailType' when calling metadataAudittrailAuditTrailTypeGet",
        new ApiException(400, "Missing the required parameter 'auditTrailType' when calling metadataAudittrailAuditTrailTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/audittrail/{audit_trail_type}".replaceAll("\\{" + "audit_trail_type" + "\\}", apiInvoker.escapeString(auditTrailType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Audit Metadata
   * 
   * @param auditTrailType The name of the specified audit type (document_audit_trail, object_audit_trail, etc).   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataAudittrailAuditTrailTypeGet (String auditTrailType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'auditTrailType' is set
    if (auditTrailType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'auditTrailType' when calling metadataAudittrailAuditTrailTypeGet",
        new ApiException(400, "Missing the required parameter 'auditTrailType' when calling metadataAudittrailAuditTrailTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/audittrail/{audit_trail_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "audit_trail_type" + "\\}", apiInvoker.escapeString(auditTrailType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Audit Types
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataAudittrailGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/audittrail";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Audit Types
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataAudittrailGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/audittrail".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Component Type Metadata
  * 
   * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataComponentsComponentTypeGet (String componentType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'componentType' is set
    if (componentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentType' when calling metadataComponentsComponentTypeGet",
        new ApiException(400, "Missing the required parameter 'componentType' when calling metadataComponentsComponentTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/components/{component_type}".replaceAll("\\{" + "component_type" + "\\}", apiInvoker.escapeString(componentType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Component Type Metadata
   * 
   * @param componentType The component type name (Picklist, Docfield, Doctype, etc.).   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataComponentsComponentTypeGet (String componentType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'componentType' is set
    if (componentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentType' when calling metadataComponentsComponentTypeGet",
        new ApiException(400, "Missing the required parameter 'componentType' when calling metadataComponentsComponentTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/components/{component_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "component_type" + "\\}", apiInvoker.escapeString(componentType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Component Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataComponentsGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/components";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Component Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataComponentsGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/components".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Template Node Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsBindersTemplatesBindernodesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/binders/templates/bindernodes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Template Node Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsBindersTemplatesBindernodesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/binders/templates/bindernodes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Template Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsBindersTemplatesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/binders/templates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Template Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsBindersTemplatesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/binders/templates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Annotation Placemark Type Metadata
  * 
   * @param placemarkType The name of the placemark type. For example, sticky__sys.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet (String placemarkType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'placemarkType' is set
    if (placemarkType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placemarkType' when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet",
        new ApiException(400, "Missing the required parameter 'placemarkType' when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/annotations/placemarks/types/{placemark_type}".replaceAll("\\{" + "placemark_type" + "\\}", apiInvoker.escapeString(placemarkType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Annotation Placemark Type Metadata
   * 
   * @param placemarkType The name of the placemark type. For example, sticky__sys.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet (String placemarkType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'placemarkType' is set
    if (placemarkType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'placemarkType' when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet",
        new ApiException(400, "Missing the required parameter 'placemarkType' when calling metadataObjectsDocumentsAnnotationsPlacemarksTypesPlacemarkTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/annotations/placemarks/types/{placemark_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "placemark_type" + "\\}", apiInvoker.escapeString(placemarkType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Annotation Reference Type Metadata
  * 
   * @param referenceType 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet (String referenceType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'referenceType' is set
    if (referenceType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'referenceType' when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet",
        new ApiException(400, "Missing the required parameter 'referenceType' when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/annotations/references/types/{reference_type}".replaceAll("\\{" + "reference_type" + "\\}", apiInvoker.escapeString(referenceType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Annotation Reference Type Metadata
   * 
   * @param referenceType    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet (String referenceType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'referenceType' is set
    if (referenceType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'referenceType' when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet",
        new ApiException(400, "Missing the required parameter 'referenceType' when calling metadataObjectsDocumentsAnnotationsReferencesTypesReferenceTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/annotations/references/types/{reference_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "reference_type" + "\\}", apiInvoker.escapeString(referenceType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Annotation Type Metadata
  * 
   * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet (String annotationType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'annotationType' is set
    if (annotationType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'annotationType' when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet",
        new ApiException(400, "Missing the required parameter 'annotationType' when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/annotations/types/{annotation_type}".replaceAll("\\{" + "annotation_type" + "\\}", apiInvoker.escapeString(annotationType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Annotation Type Metadata
   * 
   * @param annotationType The name of the annotation type. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in Medical and PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet (String annotationType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'annotationType' is set
    if (annotationType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'annotationType' when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet",
        new ApiException(400, "Missing the required parameter 'annotationType' when calling metadataObjectsDocumentsAnnotationsTypesAnnotationTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/annotations/types/{annotation_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "annotation_type" + "\\}", apiInvoker.escapeString(annotationType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Event SubType Metadata
  * 
   * @param eventType The event type. For example, distribution__v.
   * @param eventSubtype The event subtype. For example, approved_email__v.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet (String eventType, String eventSubtype, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'eventType' is set
    if (eventType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eventType' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet",
        new ApiException(400, "Missing the required parameter 'eventType' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet"));
    }
    // verify the required parameter 'eventSubtype' is set
    if (eventSubtype == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eventSubtype' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet",
        new ApiException(400, "Missing the required parameter 'eventSubtype' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/events/{event_type}/types/{event_subtype}".replaceAll("\\{" + "event_type" + "\\}", apiInvoker.escapeString(eventType.toString())).replaceAll("\\{" + "event_subtype" + "\\}", apiInvoker.escapeString(eventSubtype.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Event SubType Metadata
   * 
   * @param eventType The event type. For example, distribution__v.   * @param eventSubtype The event subtype. For example, approved_email__v.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet (String eventType, String eventSubtype, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'eventType' is set
    if (eventType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eventType' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet",
        new ApiException(400, "Missing the required parameter 'eventType' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet"));
    }
    // verify the required parameter 'eventSubtype' is set
    if (eventSubtype == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'eventSubtype' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet",
        new ApiException(400, "Missing the required parameter 'eventSubtype' when calling metadataObjectsDocumentsEventsEventTypeTypesEventSubtypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/events/{event_type}/types/{event_subtype}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "event_type" + "\\}", apiInvoker.escapeString(eventType.toString())).replaceAll("\\{" + "event_subtype" + "\\}", apiInvoker.escapeString(eventSubtype.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Event Types and Subtypes
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsEventsGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/documents/events";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Event Types and Subtypes
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsEventsGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/documents/events".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Lock Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsLockGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/documents/lock";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Lock Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsLockGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/documents/lock".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Common Document Fields
  * 
   * @param contentType 
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsPropertiesFindCommonPost (String contentType, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/documents/properties/find_common";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Common Document Fields
   * 
   * @param contentType    * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsPropertiesFindCommonPost (String contentType, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/documents/properties/find_common".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Document Fields
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsPropertiesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/documents/properties";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Document Fields
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsPropertiesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/documents/properties".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Template Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsTemplatesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/documents/templates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Template Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsTemplatesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/documents/templates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Document Types
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsTypesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/documents/types";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Document Types
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsTypesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/documents/types".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Type
  * 
   * @param type The document type. See Retrieve Document Types.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsTypesTypeGet (String type, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeGet",
        new ApiException(400, "Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/types/{type}".replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Type
   * 
   * @param type The document type. See Retrieve Document Types.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsTypesTypeGet (String type, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeGet",
        new ApiException(400, "Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/types/{type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Type Relationships
  * 
   * @param type The document type. See Retrieve Document Types.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsTypesTypeRelationshipsGet (String type, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeRelationshipsGet",
        new ApiException(400, "Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeRelationshipsGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/types/{type}/relationships".replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Type Relationships
   * 
   * @param type The document type. See Retrieve Document Types.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsTypesTypeRelationshipsGet (String type, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeRelationshipsGet",
        new ApiException(400, "Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeRelationshipsGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/types/{type}/relationships".replaceAll("\\{format\\}","json").replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Classification
  * 
   * @param type The document type. See Retrieve Document Types.
   * @param subtype The document subtype. See Retrieve Document Types.
   * @param classification The document classification. See Retrieve Document Types.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet (String type, String subtype, String classification, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet",
        new ApiException(400, "Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet"));
    }
    // verify the required parameter 'subtype' is set
    if (subtype == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet",
        new ApiException(400, "Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet"));
    }
    // verify the required parameter 'classification' is set
    if (classification == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'classification' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet",
        new ApiException(400, "Missing the required parameter 'classification' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}".replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString())).replaceAll("\\{" + "subtype" + "\\}", apiInvoker.escapeString(subtype.toString())).replaceAll("\\{" + "classification" + "\\}", apiInvoker.escapeString(classification.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Classification
   * 
   * @param type The document type. See Retrieve Document Types.   * @param subtype The document subtype. See Retrieve Document Types.   * @param classification The document classification. See Retrieve Document Types.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet (String type, String subtype, String classification, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet",
        new ApiException(400, "Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet"));
    }
    // verify the required parameter 'subtype' is set
    if (subtype == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet",
        new ApiException(400, "Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet"));
    }
    // verify the required parameter 'classification' is set
    if (classification == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'classification' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet",
        new ApiException(400, "Missing the required parameter 'classification' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeClassificationsClassificationGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/types/{type}/subtypes/{subtype}/classifications/{classification}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString())).replaceAll("\\{" + "subtype" + "\\}", apiInvoker.escapeString(subtype.toString())).replaceAll("\\{" + "classification" + "\\}", apiInvoker.escapeString(classification.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Subtype
  * 
   * @param type The document type. See Retrieve Document Types.
   * @param subtype The document subtype. See Retrieve Document Types.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet (String type, String subtype, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet",
        new ApiException(400, "Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet"));
    }
    // verify the required parameter 'subtype' is set
    if (subtype == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet",
        new ApiException(400, "Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/types/{type}/subtypes/{subtype}".replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString())).replaceAll("\\{" + "subtype" + "\\}", apiInvoker.escapeString(subtype.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Subtype
   * 
   * @param type The document type. See Retrieve Document Types.   * @param subtype The document subtype. See Retrieve Document Types.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet (String type, String subtype, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet",
        new ApiException(400, "Missing the required parameter 'type' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet"));
    }
    // verify the required parameter 'subtype' is set
    if (subtype == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet",
        new ApiException(400, "Missing the required parameter 'subtype' when calling metadataObjectsDocumentsTypesTypeSubtypesSubtypeGet"));
    }

    // create path and map variables
    String path = "/metadata/objects/documents/types/{type}/subtypes/{subtype}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString())).replaceAll("\\{" + "subtype" + "\\}", apiInvoker.escapeString(subtype.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Group Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsGroupsGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/groups";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Group Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsGroupsGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/groups".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Security Policy Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsSecuritypoliciesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/securitypolicies";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Security Policy Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsSecuritypoliciesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/securitypolicies".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve User Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataObjectsUsersGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/objects/users";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve User Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataObjectsUsersGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/objects/users".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Archived Document Signature Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/query/archived_documents/relationships/document_signature__sysr";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Archived Document Signature Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataQueryArchivedDocumentsRelationshipsDocumentSignatureSysrGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/query/archived_documents/relationships/document_signature__sysr".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Signature Metadata
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/query/documents/relationships/document_signature__sysr";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Signature Metadata
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataQueryDocumentsRelationshipsDocumentSignatureSysrGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/query/documents/relationships/document_signature__sysr".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Collection
  * 
   * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataVobjectsGet (Boolean loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/metadata/vobjects";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Collection
   * 
   * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataVobjectsGet (Boolean loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/metadata/vobjects".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cancel Raw Object Deployment
  * 
   * @param objectName 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataVobjectsObjectNameActionsCanceldeploymentPost (String objectName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameActionsCanceldeploymentPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameActionsCanceldeploymentPost"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}/actions/canceldeployment".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancel Raw Object Deployment
   * 
   * @param objectName    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataVobjectsObjectNameActionsCanceldeploymentPost (String objectName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameActionsCanceldeploymentPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameActionsCanceldeploymentPost"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}/actions/canceldeployment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Field Metadata
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).
   * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataVobjectsObjectNameFieldsObjectFieldNameGet (String objectName, String objectFieldName, Boolean loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet"));
    }
    // verify the required parameter 'objectFieldName' is set
    if (objectFieldName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectFieldName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet",
        new ApiException(400, "Missing the required parameter 'objectFieldName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}/fields/{object_field_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_field_name" + "\\}", apiInvoker.escapeString(objectFieldName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Field Metadata
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectFieldName The object field name value (id, name__v, external_id__v, etc.).   * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataVobjectsObjectNameFieldsObjectFieldNameGet (String objectName, String objectFieldName, Boolean loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet"));
    }
    // verify the required parameter 'objectFieldName' is set
    if (objectFieldName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectFieldName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet",
        new ApiException(400, "Missing the required parameter 'objectFieldName' when calling metadataVobjectsObjectNameFieldsObjectFieldNameGet"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}/fields/{object_field_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_field_name" + "\\}", apiInvoker.escapeString(objectFieldName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Metadata
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataVobjectsObjectNameGet (String objectName, Boolean loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameGet"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Metadata
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param loc To retrieve localized (translated) strings, include the parameter loc&#x3D;true. See the next request below for details.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataVobjectsObjectNameGet (String objectName, Boolean loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNameGet"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Page Layouts
  * 
   * @param objectName 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataVobjectsObjectNamePageLayoutsGet (String objectName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsGet"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}/page_layouts".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Page Layouts
   * 
   * @param objectName    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataVobjectsObjectNamePageLayoutsGet (String objectName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsGet"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}/page_layouts".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Page Layout Metadata
  * 
   * @param objectName The name of the object from which to retrieve page layout metadata.
   * @param layoutName The name of the page layout from which to retrieve metadata.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void metadataVobjectsObjectNamePageLayoutsLayoutNameGet (String objectName, String layoutName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet"));
    }
    // verify the required parameter 'layoutName' is set
    if (layoutName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'layoutName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet",
        new ApiException(400, "Missing the required parameter 'layoutName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}/page_layouts/{layout_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "layout_name" + "\\}", apiInvoker.escapeString(layoutName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Page Layout Metadata
   * 
   * @param objectName The name of the object from which to retrieve page layout metadata.   * @param layoutName The name of the page layout from which to retrieve metadata.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void metadataVobjectsObjectNamePageLayoutsLayoutNameGet (String objectName, String layoutName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet"));
    }
    // verify the required parameter 'layoutName' is set
    if (layoutName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'layoutName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet",
        new ApiException(400, "Missing the required parameter 'layoutName' when calling metadataVobjectsObjectNamePageLayoutsLayoutNameGet"));
    }

    // create path and map variables
    String path = "/metadata/vobjects/{object_name}/page_layouts/{layout_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "layout_name" + "\\}", apiInvoker.escapeString(layoutName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Email Notification Histories
  * 
   * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.
   * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.
   * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.
   * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.
   * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
   * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void notificationsHistoriesGet (String startDate, String endDate, Boolean allDates, String formatResult, String limit, String offset, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/notifications/histories";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "all_dates", allDates));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Email Notification Histories
   * 
   * @param startDate Specify a start date to retrieve notification history. This date cannot be more than 2 years ago. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the start of the day. If start_date is omitted entirely, defaults to the start of the previous day. If you’ve specified a start_date, you must also specify an end_date.   * @param endDate Specify an end date to retrieve notification history. This date cannot be more than 30 days away from the specified start_date. Dates must be in YYYY-MM-DD or YYYY-MM-DDTHH:mm:ssZ format. If time is omitted (THH:mm:ssZ), defaults to the time of the API request. If you’ve specified an end_date, you must also specify a start_date.   * @param allDates Set to true to request notification history for all dates. This is the same as requesting a full CSV export from the Vault UI. When requesting a full notification history, you must leave start_date and end_date blank and set format_result to csv. You can request an export of notification history for all_dates once every 24 hours.   * @param formatResult To request a downloadable CSV file of your notification history, set this parameter to csv. The response contains a jobId to retrieve the job status, which provides a link to download the CSV file. If omitted, the API returns a JSON response with notification history and does not start a job. If all_dates is true, this parameter must be csv.   * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.   * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. If omitted, defaults to 0.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void notificationsHistoriesGet (String startDate, String endDate, Boolean allDates, String formatResult, String limit, String offset, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/notifications/histories".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "all_dates", allDates));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Bulk Workflow Action Details
  * 
   * @param action 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectWorkflowActionsActionGet (String action, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'action' is set
    if (action == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'action' when calling objectWorkflowActionsActionGet",
        new ApiException(400, "Missing the required parameter 'action' when calling objectWorkflowActionsActionGet"));
    }

    // create path and map variables
    String path = "/object/workflow/actions/{action}".replaceAll("\\{" + "action" + "\\}", apiInvoker.escapeString(action.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Bulk Workflow Action Details
   * 
   * @param action    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectWorkflowActionsActionGet (String action, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'action' is set
    if (action == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'action' when calling objectWorkflowActionsActionGet",
        new ApiException(400, "Missing the required parameter 'action' when calling objectWorkflowActionsActionGet"));
    }

    // create path and map variables
    String path = "/object/workflow/actions/{action}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "action" + "\\}", apiInvoker.escapeString(action.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Workflow Actions on Multiple Workflows
  * 
   * @param action 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectWorkflowActionsActionPost (String action, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'action' is set
    if (action == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'action' when calling objectWorkflowActionsActionPost",
        new ApiException(400, "Missing the required parameter 'action' when calling objectWorkflowActionsActionPost"));
    }

    // create path and map variables
    String path = "/object/workflow/actions/{action}".replaceAll("\\{" + "action" + "\\}", apiInvoker.escapeString(action.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Workflow Actions on Multiple Workflows
   * 
   * @param action    * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectWorkflowActionsActionPost (String action, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'action' is set
    if (action == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'action' when calling objectWorkflowActionsActionPost",
        new ApiException(400, "Missing the required parameter 'action' when calling objectWorkflowActionsActionPost"));
    }

    // create path and map variables
    String path = "/object/workflow/actions/{action}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "action" + "\\}", apiInvoker.escapeString(action.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cancel Workflow Tasks
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectWorkflowActionsCanceltasksPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/object/workflow/actions/canceltasks";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancel Workflow Tasks
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectWorkflowActionsCanceltasksPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/object/workflow/actions/canceltasks".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cancel Workflows
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectWorkflowActionsCancelworkflowsPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/object/workflow/actions/cancelworkflows";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancel Workflows
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectWorkflowActionsCancelworkflowsPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/object/workflow/actions/cancelworkflows".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Bulk Workflow Actions
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectWorkflowActionsGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/object/workflow/actions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Bulk Workflow Actions
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectWorkflowActionsGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/object/workflow/actions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reassign Workflow Tasks
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectWorkflowActionsReassigntasksPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/object/workflow/actions/reassigntasks";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reassign Workflow Tasks
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectWorkflowActionsReassigntasksPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/object/workflow/actions/reassigntasks".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Replace Workflow Owner
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectWorkflowActionsReplaceworkflowownerPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/object/workflow/actions/replaceworkflowowner";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replace Workflow Owner
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectWorkflowActionsReplaceworkflowownerPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/object/workflow/actions/replaceworkflowowner".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Export Results
  * 
   * @param jobId The id value of the requested export job. This is returned with the export binder requests above.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersActionsExportJobIdResultsGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling objectsBindersActionsExportJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling objectsBindersActionsExportJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/objects/binders/actions/export/{job_id}/results".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Export Results
   * 
   * @param jobId The id value of the requested export job. This is returned with the export binder requests above.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersActionsExportJobIdResultsGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling objectsBindersActionsExportJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling objectsBindersActionsExportJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/objects/binders/actions/export/{job_id}/results".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Export Binder (Latest Version)
  * 
   * @param binderId The binder id field value.
   * @param source to include source content or not
   * @param renditiontype to include viewable renditions
   * @param docversion to include all major versions
   * @param attachments to include all versions of attachments
   * @param export configurable filename metadata
   * @param docfield to exclude document metadata csv
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdActionsExportPost (String binderId, Boolean source, String renditiontype, String docversion, String attachments, String export, Boolean docfield, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsExportPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsExportPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/actions/export".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "source", source));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "renditiontype", renditiontype));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "docversion", docversion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attachments", attachments));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "export", export));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "docfield", docfield));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Export Binder (Latest Version)
   * 
   * @param binderId The binder id field value.   * @param source to include source content or not   * @param renditiontype to include viewable renditions   * @param docversion to include all major versions   * @param attachments to include all versions of attachments   * @param export configurable filename metadata   * @param docfield to exclude document metadata csv   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdActionsExportPost (String binderId, Boolean source, String renditiontype, String docversion, String attachments, String export, Boolean docfield, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsExportPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsExportPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/actions/export".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "source", source));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "renditiontype", renditiontype));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "docversion", docversion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attachments", attachments));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "export", export));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "docfield", docfield));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Refresh Binder Auto-Filing
  * 
   * @param binderId The binder id field value.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdActionsPost (String binderId, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/actions".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Refresh Binder Auto-Filing
   * 
   * @param binderId The binder id field value.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdActionsPost (String binderId, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdActionsPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/actions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Binding Rule
  * 
   * @param binderId The binder id field value.
   * @param contentType 
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdBindingRulePut (String binderId, String contentType, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdBindingRulePut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/binding_rule".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Binding Rule
   * 
   * @param binderId The binder id field value.   * @param contentType    * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdBindingRulePut (String binderId, String contentType, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdBindingRulePut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/binding_rule".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Binder
  * 
   * @param binderId The binder id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdDelete (String binderId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Binder
   * 
   * @param binderId The binder id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdDelete (String binderId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Binder Document Binding Rule
  * 
   * @param binderId The binder id field value.
   * @param nodeId The binder node id field value.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdDocumentsNodeIdBindingRulePut (String binderId, String nodeId, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut"));
    }
    // verify the required parameter 'nodeId' is set
    if (nodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'nodeId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/documents/{node_id}/binding_rule".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "node_id" + "\\}", apiInvoker.escapeString(nodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Binder Document Binding Rule
   * 
   * @param binderId The binder id field value.   * @param nodeId The binder node id field value.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdDocumentsNodeIdBindingRulePut (String binderId, String nodeId, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut"));
    }
    // verify the required parameter 'nodeId' is set
    if (nodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'nodeId' when calling objectsBindersBinderIdDocumentsNodeIdBindingRulePut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/documents/{node_id}/binding_rule".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "node_id" + "\\}", apiInvoker.escapeString(nodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add Document to Binder
  * 
   * @param binderId The binder id field value.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdDocumentsPost (String binderId, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/documents".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add Document to Binder
   * 
   * @param binderId The binder id field value.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdDocumentsPost (String binderId, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/documents".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove Document from Binder
  * 
   * @param binderId The binder id field value.
   * @param sectionId The binder node id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdDocumentsSectionIdDelete (String binderId, String sectionId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdDelete"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdDelete",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/documents/{section_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove Document from Binder
   * 
   * @param binderId The binder id field value.   * @param sectionId The binder node id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdDocumentsSectionIdDelete (String binderId, String sectionId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdDelete"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdDelete",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/documents/{section_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Move Document in Binder
  * 
   * @param binderId The binder id field value.
   * @param sectionId The binder node id field value.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdDocumentsSectionIdPut (String binderId, String sectionId, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdPut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdPut"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdPut",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/documents/{section_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Move Document in Binder
   * 
   * @param binderId The binder id field value.   * @param sectionId The binder node id field value.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdDocumentsSectionIdPut (String binderId, String sectionId, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdPut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdDocumentsSectionIdPut"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdPut",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdDocumentsSectionIdPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/documents/{section_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder
  * 
   * @param binderId The binder id field value.
   * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdGet (String binderId, String depth, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "depth", depth));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder
   * 
   * @param binderId The binder id field value.   * @param depth To retrieve all information in all levels of the binder, set this to all. By default, only one level is returned.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdGet (String binderId, String depth, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "depth", depth));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Binder Version
  * 
   * @param binderId The binder id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdPost (String binderId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Binder Version
   * 
   * @param binderId The binder id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdPost (String binderId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Binder
  * 
   * @param binderId The binder id field value.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdPut (String binderId, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Binder
   * 
   * @param binderId The binder id field value.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdPut (String binderId, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdPut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove Users &amp; Groups from Roles on a Single Binder
  * 
   * @param binderId The id value of the binder from which to remove roles.
   * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
   * @param id The id value of the user or group to remove from the role.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete (String binderId, String roleNameAndUserOrGroup, String id, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete"));
    }
    // verify the required parameter 'roleNameAndUserOrGroup' is set
    if (roleNameAndUserOrGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "role_name_and_user_or_group" + "\\}", apiInvoker.escapeString(roleNameAndUserOrGroup.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove Users &amp; Groups from Roles on a Single Binder
   * 
   * @param binderId The id value of the binder from which to remove roles.   * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.   * @param id The id value of the user or group to remove from the role.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete (String binderId, String roleNameAndUserOrGroup, String id, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete"));
    }
    // verify the required parameter 'roleNameAndUserOrGroup' is set
    if (roleNameAndUserOrGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersBinderIdRolesRoleNameAndUserOrGroupIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/roles/{role_name_and_user_or_group}/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "role_name_and_user_or_group" + "\\}", apiInvoker.escapeString(roleNameAndUserOrGroup.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Binder Section Binding Rule
  * 
   * @param binderId The binder id field value.
   * @param nodeId The binder node id field value.
   * @param contentType 
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdSectionsNodeIdBindingRulePut (String binderId, String nodeId, String contentType, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut"));
    }
    // verify the required parameter 'nodeId' is set
    if (nodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections/{node_id}/binding_rule".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "node_id" + "\\}", apiInvoker.escapeString(nodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Binder Section Binding Rule
   * 
   * @param binderId The binder id field value.   * @param nodeId The binder node id field value.   * @param contentType    * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdSectionsNodeIdBindingRulePut (String binderId, String nodeId, String contentType, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut"));
    }
    // verify the required parameter 'nodeId' is set
    if (nodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut",
        new ApiException(400, "Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdBindingRulePut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections/{node_id}/binding_rule".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "node_id" + "\\}", apiInvoker.escapeString(nodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Binder Section
  * 
   * @param binderId The binder id field value.
   * @param nodeId The binder node id of the section.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdSectionsNodeIdPut (String binderId, String nodeId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdPut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdPut"));
    }
    // verify the required parameter 'nodeId' is set
    if (nodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdPut",
        new ApiException(400, "Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections/{node_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "node_id" + "\\}", apiInvoker.escapeString(nodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Binder Section
   * 
   * @param binderId The binder id field value.   * @param nodeId The binder node id of the section.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdSectionsNodeIdPut (String binderId, String nodeId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdPut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsNodeIdPut"));
    }
    // verify the required parameter 'nodeId' is set
    if (nodeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdPut",
        new ApiException(400, "Missing the required parameter 'nodeId' when calling objectsBindersBinderIdSectionsNodeIdPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections/{node_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "node_id" + "\\}", apiInvoker.escapeString(nodeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Binder Section
  * 
   * @param binderId The binder id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdSectionsPost (String binderId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Binder Section
   * 
   * @param binderId The binder id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdSectionsPost (String binderId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Binder Section
  * 
   * @param binderId The binder id field value.
   * @param sectionId The binder node id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdSectionsSectionIdDelete (String binderId, String sectionId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdDelete"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdDelete",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections/{section_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Binder Section
   * 
   * @param binderId The binder id field value.   * @param sectionId The binder node id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdSectionsSectionIdDelete (String binderId, String sectionId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdDelete"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdDelete",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections/{section_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Sections
  * 
   * @param binderId The binder id field value.
   * @param sectionId The binder node id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdSectionsSectionIdGet (String binderId, String sectionId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdGet"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections/{section_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Sections
   * 
   * @param binderId The binder id field value.   * @param sectionId The binder node id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdSectionsSectionIdGet (String binderId, String sectionId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdSectionsSectionIdGet"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdSectionsSectionIdGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/sections/{section_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Binder Versions
  * 
   * @param binderId The binder id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdVersionsGet (String binderId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Binder Versions
   * 
   * @param binderId The binder id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdVersionsGet (String binderId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Export Binder (Specific Version)
  * 
   * @param binderId The binder id field value.
   * @param majorVersion The binder major_version_number__v field value.
   * @param minorVersion The binder minor_version_number__v field value.
   * @param source to include source content or not
   * @param renditiontype to include viewable renditions
   * @param docversion to include all major versions
   * @param attachments to include all versions of attachments
   * @param export configurable filename metadata
   * @param docfield to exclude document metadata csv
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost (String binderId, String majorVersion, String minorVersion, Boolean source, String renditiontype, String docversion, String attachments, String export, Boolean docfield, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "source", source));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "renditiontype", renditiontype));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "docversion", docversion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attachments", attachments));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "export", export));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "docfield", docfield));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Export Binder (Specific Version)
   * 
   * @param binderId The binder id field value.   * @param majorVersion The binder major_version_number__v field value.   * @param minorVersion The binder minor_version_number__v field value.   * @param source to include source content or not   * @param renditiontype to include viewable renditions   * @param docversion to include all major versions   * @param attachments to include all versions of attachments   * @param export configurable filename metadata   * @param docfield to exclude document metadata csv   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost (String binderId, String majorVersion, String minorVersion, Boolean source, String renditiontype, String docversion, String attachments, String export, Boolean docfield, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionActionsExportPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/actions/export".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "source", source));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "renditiontype", renditiontype));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "docversion", docversion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attachments", attachments));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "export", export));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "docfield", docfield));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Binder Version
  * 
   * @param binderId The binder id field value.
   * @param majorVersion The binder major_version_number__v field value.
   * @param minorVersion The binder minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete (String binderId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Binder Version
   * 
   * @param binderId The binder id field value.   * @param majorVersion The binder major_version_number__v field value.   * @param minorVersion The binder minor_version_number__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete (String binderId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Version
  * 
   * @param binderId The binder id field value.
   * @param majorVersion The binder major_version_number__v field value.
   * @param minorVersion The binder minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionGet (String binderId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Version
   * 
   * @param binderId The binder id field value.   * @param majorVersion The binder major_version_number__v field value.   * @param minorVersion The binder minor_version_number__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionGet (String binderId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Binder Version
  * 
   * @param binderId The binder id field value.
   * @param majorVersion The binder major_version_number__v field value.
   * @param minorVersion The binder minor_version_number__v field value.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionPut (String binderId, String majorVersion, String minorVersion, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Binder Version
   * 
   * @param binderId The binder id field value.   * @param majorVersion The binder major_version_number__v field value.   * @param minorVersion The binder minor_version_number__v field value.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionPut (String binderId, String majorVersion, String minorVersion, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Binder Relationship
  * 
   * @param binderId The binder id field value.
   * @param majorVersion The binder major_version_number__v field value.
   * @param minorVersion The binder minor_version_number__v field value.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost (String binderId, String majorVersion, String minorVersion, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Binder Relationship
   * 
   * @param binderId The binder id field value.   * @param majorVersion The binder major_version_number__v field value.   * @param minorVersion The binder minor_version_number__v field value.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost (String binderId, String majorVersion, String minorVersion, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Binder Relationship
  * 
   * @param binderId The binder id field value.
   * @param majorVersion The binder major_version_number__v field value.
   * @param minorVersion The binder minor_version_number__v field value.
   * @param relationshipId The binder relationship id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete (String binderId, String majorVersion, String minorVersion, String relationshipId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Binder Relationship
   * 
   * @param binderId The binder id field value.   * @param majorVersion The binder major_version_number__v field value.   * @param minorVersion The binder minor_version_number__v field value.   * @param relationshipId The binder relationship id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete (String binderId, String majorVersion, String minorVersion, String relationshipId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Relationship
  * 
   * @param binderId The binder id field value.
   * @param majorVersion The binder major_version_number__v field value.
   * @param minorVersion The binder minor_version_number__v field value.
   * @param relationshipId The binder relationship id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet (String binderId, String majorVersion, String minorVersion, String relationshipId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Relationship
   * 
   * @param binderId The binder id field value.   * @param majorVersion The binder major_version_number__v field value.   * @param minorVersion The binder minor_version_number__v field value.   * @param relationshipId The binder relationship id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet (String binderId, String majorVersion, String minorVersion, String relationshipId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'relationshipId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Version Section
  * 
   * @param binderId The binder id field value.
   * @param majorVersion The binder major_version_number__v field value.
   * @param minorVersion The binder minor_version_number__v field value.
   * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet (String binderId, String majorVersion, String minorVersion, String sectionId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}".replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Version Section
   * 
   * @param binderId The binder id field value.   * @param majorVersion The binder major_version_number__v field value.   * @param minorVersion The binder minor_version_number__v field value.   * @param sectionId Retrieve all sections (documents and subsections) in a binder’s sub-level node. If not included, all sections from the binder’s top-level root node will be returned.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet (String binderId, String majorVersion, String minorVersion, String sectionId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'binderId' is set
    if (binderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'binderId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet"));
    }
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet",
        new ApiException(400, "Missing the required parameter 'sectionId' when calling objectsBindersBinderIdVersionsMajorVersionMinorVersionSectionsSectionIdGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{binder_id}/versions/{major_version}/{minor_version}/sections/{section_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "binder_id" + "\\}", apiInvoker.escapeString(binderId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Binder Roles
  * 
   * @param id 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersIdRolesGet (String id, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdRolesGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdRolesGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/roles".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Binder Roles
   * 
   * @param id    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersIdRolesGet (String id, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdRolesGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdRolesGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Assign Users &amp; Groups to Roles on a Single Binder
  * 
   * @param id 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersIdRolesPost (String id, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdRolesPost",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdRolesPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/roles".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Assign Users &amp; Groups to Roles on a Single Binder
   * 
   * @param id    * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersIdRolesPost (String id, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdRolesPost",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdRolesPost"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Role
  * 
   * @param id The binder &#x60;id&#x60;.
   * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersIdRolesRoleNameGet (String id, String roleName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdRolesRoleNameGet"));
    }
    // verify the required parameter 'roleName' is set
    if (roleName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleName' when calling objectsBindersIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'roleName' when calling objectsBindersIdRolesRoleNameGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/roles/{role_name}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "role_name" + "\\}", apiInvoker.escapeString(roleName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Role
   * 
   * @param id The binder &#x60;id&#x60;.   * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersIdRolesRoleNameGet (String id, String roleName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdRolesRoleNameGet"));
    }
    // verify the required parameter 'roleName' is set
    if (roleName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleName' when calling objectsBindersIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'roleName' when calling objectsBindersIdRolesRoleNameGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/roles/{role_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "role_name" + "\\}", apiInvoker.escapeString(roleName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder User Actions
  * 
   * @param id The binder id field value from which to retrieve available user actions.
   * @param majorVersion The major version number of the binder.
   * @param minorVersion The minor version number of the binder.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet (String id, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder User Actions
   * 
   * @param id The binder id field value from which to retrieve available user actions.   * @param majorVersion The major version number of the binder.   * @param minorVersion The minor version number of the binder.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet (String id, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Entry Criteria
  * 
   * @param id The binder id field value from which to retrieve available user actions.
   * @param majorVersion The major version number of the binder.
   * @param minorVersion The minor version number of the binder.
   * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet (String id, String majorVersion, String minorVersion, String nameV, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'nameV' is set
    if (nameV == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "name__v" + "\\}", apiInvoker.escapeString(nameV.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Entry Criteria
   * 
   * @param id The binder id field value from which to retrieve available user actions.   * @param majorVersion The major version number of the binder.   * @param minorVersion The minor version number of the binder.   * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet (String id, String majorVersion, String minorVersion, String nameV, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'nameV' is set
    if (nameV == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "name__v" + "\\}", apiInvoker.escapeString(nameV.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Binder User Action
  * 
   * @param id The binder id field value from which to retrieve available user actions.
   * @param majorVersion The major version number of the binder.
   * @param minorVersion The minor version number of the binder.
   * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut (String id, String majorVersion, String minorVersion, String nameV, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'nameV' is set
    if (nameV == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "name__v" + "\\}", apiInvoker.escapeString(nameV.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Binder User Action
   * 
   * @param id The binder id field value from which to retrieve available user actions.   * @param majorVersion The major version number of the binder.   * @param minorVersion The minor version number of the binder.   * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut (String id, String majorVersion, String minorVersion, String nameV, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'nameV' is set
    if (nameV == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'nameV' when calling objectsBindersIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }

    // create path and map variables
    String path = "/objects/binders/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "name__v" + "\\}", apiInvoker.escapeString(nameV.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve User Actions on Multiple Binders
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersLifecycleActionsPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/binders/lifecycle_actions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve User Actions on Multiple Binders
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersLifecycleActionsPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/binders/lifecycle_actions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Bulk Binder User Actions
  * 
   * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersLifecycleActionsUserActionNamePut (String userActionName, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userActionName' is set
    if (userActionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userActionName' when calling objectsBindersLifecycleActionsUserActionNamePut",
        new ApiException(400, "Missing the required parameter 'userActionName' when calling objectsBindersLifecycleActionsUserActionNamePut"));
    }

    // create path and map variables
    String path = "/objects/binders/lifecycle_actions/{user_action_name}".replaceAll("\\{" + "user_action_name" + "\\}", apiInvoker.escapeString(userActionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Bulk Binder User Actions
   * 
   * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Binders endpoint.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersLifecycleActionsUserActionNamePut (String userActionName, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'userActionName' is set
    if (userActionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userActionName' when calling objectsBindersLifecycleActionsUserActionNamePut",
        new ApiException(400, "Missing the required parameter 'userActionName' when calling objectsBindersLifecycleActionsUserActionNamePut"));
    }

    // create path and map variables
    String path = "/objects/binders/lifecycle_actions/{user_action_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_action_name" + "\\}", apiInvoker.escapeString(userActionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Binder
  * 
   * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data. 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersPost (Boolean async, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/binders";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "async", async));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Binder
   * 
   * @param async When creating a binder, the binder metadata is indexed synchronously by default. To process the indexing asynchronously, include a query parameter async set to true (objects/binders?async&#x3D;true). This helps speed up the response time from Vault when processing large amounts of data.    * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersPost (Boolean async, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/binders".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "async", async));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Template Collection
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersTemplatesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/binders/templates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Template Collection
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersTemplatesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/binders/templates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Binder Template
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersTemplatesPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/binders/templates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Binder Template
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersTemplatesPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/binders/templates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Binder Template
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersTemplatesPut (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/binders/templates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Binder Template
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersTemplatesPut (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/binders/templates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Template Node Attributes
  * 
   * @param templateName The binder template name__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersTemplatesTemplateNameBindernodesGet (String templateName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesGet",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesGet"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}/bindernodes".replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Template Node Attributes
   * 
   * @param templateName The binder template name__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersTemplatesTemplateNameBindernodesGet (String templateName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesGet",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesGet"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}/bindernodes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Binder Template Node
  * 
   * @param templateName The binder template name__v field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersTemplatesTemplateNameBindernodesPost (String templateName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPost",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPost"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}/bindernodes".replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Binder Template Node
   * 
   * @param templateName The binder template name__v field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersTemplatesTemplateNameBindernodesPost (String templateName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPost",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPost"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}/bindernodes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Replace Binder Template Nodes
  * 
   * @param templateName The binder template name__v field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersTemplatesTemplateNameBindernodesPut (String templateName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPut",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPut"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}/bindernodes".replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replace Binder Template Nodes
   * 
   * @param templateName The binder template name__v field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersTemplatesTemplateNameBindernodesPut (String templateName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPut",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameBindernodesPut"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}/bindernodes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Binder Template
  * 
   * @param templateName The binder template name__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersTemplatesTemplateNameDelete (String templateName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameDelete",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}".replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Binder Template
   * 
   * @param templateName The binder template name__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersTemplatesTemplateNameDelete (String templateName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameDelete",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameDelete"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Binder Template Attributes
  * 
   * @param templateName The binder template name__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsBindersTemplatesTemplateNameGet (String templateName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameGet",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameGet"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}".replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Binder Template Attributes
   * 
   * @param templateName The binder template name__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsBindersTemplatesTemplateNameGet (String templateName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameGet",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsBindersTemplatesTemplateNameGet"));
    }

    // create path and map variables
    String path = "/objects/binders/templates/{template_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Deleted Document IDs
  * 
   * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z
   * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDeletionsDocumentsGet (String startDate, String endDate, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/deletions/documents";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Deleted Document IDs
   * 
   * @param startDate Specify a date (no more than 30 days past) after which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z   * @param endDate Specify a date (no more than 30 days past) before which Vault will look for deleted documents. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2016 would use 2016-01-15T07:00:00Z    * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDeletionsDocumentsGet (String startDate, String endDate, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/deletions/documents".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Deleted Object Record ID
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDeletionsVobjectsObjectNameGet (String objectName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling objectsDeletionsVobjectsObjectNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling objectsDeletionsVobjectsObjectNameGet"));
    }

    // create path and map variables
    String path = "/objects/deletions/vobjects/{object_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Deleted Object Record ID
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDeletionsVobjectsObjectNameGet (String objectName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling objectsDeletionsVobjectsObjectNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling objectsDeletionsVobjectsObjectNameGet"));
    }

    // create path and map variables
    String path = "/objects/deletions/vobjects/{object_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Document Workflows
  * 
   * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsActionsGet (Boolean loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/actions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Document Workflows
   * 
   * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsActionsGet (Boolean loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/actions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Controlled Copy Job Results
  * 
   * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.
   * @param jobId 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet (String lifecycleAndStateAndAction, String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'lifecycleAndStateAndAction' is set
    if (lifecycleAndStateAndAction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lifecycleAndStateAndAction' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'lifecycleAndStateAndAction' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet"));
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results".replaceAll("\\{" + "lifecycle_and_state_and_action" + "\\}", apiInvoker.escapeString(lifecycleAndStateAndAction.toString())).replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Controlled Copy Job Results
   * 
   * @param lifecycleAndStateAndAction The &#x60;name__v&#x60; values for the lifecycle, state, and action in the format &#x60;{lifecycle_name}.{state_name}.{action_name}&#x60;. To get this value, [Retrieve the Job Status](https://developer.veevavault.com/api/24.3#RetrieveJobStatus) and find the &#x60;href&#x60; under the &#x60;artifacts&#x60; link.   * @param jobId    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet (String lifecycleAndStateAndAction, String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'lifecycleAndStateAndAction' is set
    if (lifecycleAndStateAndAction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'lifecycleAndStateAndAction' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'lifecycleAndStateAndAction' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet"));
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling objectsDocumentsActionsLifecycleAndStateAndActionJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/actions/{lifecycle_and_state_and_action}/{job_id}/results".replaceAll("\\{format\\}","json").replaceAll("\\{" + "lifecycle_and_state_and_action" + "\\}", apiInvoker.escapeString(lifecycleAndStateAndAction.toString())).replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Workflow Details
  * 
   * @param workflowName The document workflow name value.
   * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsActionsWorkflowNameGet (String workflowName, Boolean loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'workflowName' is set
    if (workflowName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNameGet",
        new ApiException(400, "Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNameGet"));
    }

    // create path and map variables
    String path = "/objects/documents/actions/{workflow_name}".replaceAll("\\{" + "workflow_name" + "\\}", apiInvoker.escapeString(workflowName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Workflow Details
   * 
   * @param workflowName The document workflow name value.   * @param loc When localized (translated) strings are available, retrieve them by setting loc to true.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsActionsWorkflowNameGet (String workflowName, Boolean loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'workflowName' is set
    if (workflowName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNameGet",
        new ApiException(400, "Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNameGet"));
    }

    // create path and map variables
    String path = "/objects/documents/actions/{workflow_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "workflow_name" + "\\}", apiInvoker.escapeString(workflowName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Document Workflow
  * 
   * @param workflowName The document workflow name value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsActionsWorkflowNamePost (String workflowName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'workflowName' is set
    if (workflowName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNamePost",
        new ApiException(400, "Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNamePost"));
    }

    // create path and map variables
    String path = "/objects/documents/actions/{workflow_name}".replaceAll("\\{" + "workflow_name" + "\\}", apiInvoker.escapeString(workflowName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Document Workflow
   * 
   * @param workflowName The document workflow name value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsActionsWorkflowNamePost (String workflowName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'workflowName' is set
    if (workflowName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNamePost",
        new ApiException(400, "Missing the required parameter 'workflowName' when calling objectsDocumentsActionsWorkflowNamePost"));
    }

    // create path and map variables
    String path = "/objects/documents/actions/{workflow_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "workflow_name" + "\\}", apiInvoker.escapeString(workflowName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Annotations
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsAnnotationsBatchDelete (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/annotations/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Annotations
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsAnnotationsBatchDelete (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/annotations/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Multiple Annotations
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsAnnotationsBatchPost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling objectsDocumentsAnnotationsBatchPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling objectsDocumentsAnnotationsBatchPost"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling objectsDocumentsAnnotationsBatchPost",
        new ApiException(400, "Missing the required parameter 'contentType' when calling objectsDocumentsAnnotationsBatchPost"));
    }
    // verify the required parameter 'accept' is set
    if (accept == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accept' when calling objectsDocumentsAnnotationsBatchPost",
        new ApiException(400, "Missing the required parameter 'accept' when calling objectsDocumentsAnnotationsBatchPost"));
    }
    // verify the required parameter 'xVaultAPIClientID' is set
    if (xVaultAPIClientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xVaultAPIClientID' when calling objectsDocumentsAnnotationsBatchPost",
        new ApiException(400, "Missing the required parameter 'xVaultAPIClientID' when calling objectsDocumentsAnnotationsBatchPost"));
    }

    // create path and map variables
    String path = "/objects/documents/annotations/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Multiple Annotations
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsAnnotationsBatchPost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'authorization' is set
    if (authorization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'authorization' when calling objectsDocumentsAnnotationsBatchPost",
        new ApiException(400, "Missing the required parameter 'authorization' when calling objectsDocumentsAnnotationsBatchPost"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling objectsDocumentsAnnotationsBatchPost",
        new ApiException(400, "Missing the required parameter 'contentType' when calling objectsDocumentsAnnotationsBatchPost"));
    }
    // verify the required parameter 'accept' is set
    if (accept == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accept' when calling objectsDocumentsAnnotationsBatchPost",
        new ApiException(400, "Missing the required parameter 'accept' when calling objectsDocumentsAnnotationsBatchPost"));
    }
    // verify the required parameter 'xVaultAPIClientID' is set
    if (xVaultAPIClientID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'xVaultAPIClientID' when calling objectsDocumentsAnnotationsBatchPost",
        new ApiException(400, "Missing the required parameter 'xVaultAPIClientID' when calling objectsDocumentsAnnotationsBatchPost"));
    }

    // create path and map variables
    String path = "/objects/documents/annotations/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Annotations
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsAnnotationsBatchPut (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/annotations/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Annotations
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsAnnotationsBatchPut (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/annotations/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add Annotation Replies
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsAnnotationsRepliesBatchPost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/annotations/replies/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add Annotation Replies
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsAnnotationsRepliesBatchPost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/annotations/replies/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Multiple Document Attachments
  * 
   * @param accept 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsAttachmentsBatchDelete (String accept, String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/attachments/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Multiple Document Attachments
   * 
   * @param accept    * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsAttachmentsBatchDelete (String accept, String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/attachments/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Multiple Document Attachments
  * 
   * @param accept 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsAttachmentsBatchPost (String accept, String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/attachments/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Multiple Document Attachments
   * 
   * @param accept    * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsAttachmentsBatchPost (String accept, String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/attachments/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Multiple Document Attachment Descriptions
  * 
   * @param accept 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsAttachmentsBatchPut (String accept, String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/attachments/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Multiple Document Attachment Descriptions
   * 
   * @param accept    * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsAttachmentsBatchPut (String accept, String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/attachments/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Export Results
  * 
   * @param jobId The id value of the requested export job. This is returned with the export document requests.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsBatchActionsFileextractJobIdResultsGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/batch/actions/fileextract/{job_id}/results".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Export Results
   * 
   * @param jobId The id value of the requested export job. This is returned with the export document requests.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsBatchActionsFileextractJobIdResultsGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling objectsDocumentsBatchActionsFileextractJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/batch/actions/fileextract/{job_id}/results".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Export Documents
  * 
   * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
   * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
   * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsBatchActionsFileextractPost (Boolean source, Boolean renditions, Boolean allversions, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/batch/actions/fileextract";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "source", source));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "renditions", renditions));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allversions", allversions));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Export Documents
   * 
   * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.   * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.   * @param allversions Optional: To include all versions or latest version, include a query parameter allversions&#x3D;true. If omitted, defaults to false.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsBatchActionsFileextractPost (Boolean source, Boolean renditions, Boolean allversions, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/batch/actions/fileextract".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "source", source));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "renditions", renditions));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allversions", allversions));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reclassify Multiple Documents
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsBatchActionsReclassifyPut (String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/batch/actions/reclassify";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reclassify Multiple Documents
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number and to update documents to any lifecycle state using the status__v field. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message.  You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsBatchActionsReclassifyPut (String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/batch/actions/reclassify".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Multiple Document Renditions
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsBatchActionsRerenderPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/batch/actions/rerender";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Multiple Document Renditions
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsBatchActionsRerenderPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/batch/actions/rerender".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Multiple Documents
  * 
   * @param idParam If you’re identifying documents in your input by their external ID
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsBatchDelete (String idParam, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Multiple Documents
   * 
   * @param idParam If you’re identifying documents in your input by their external ID   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsBatchDelete (String idParam, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Undo Collaborative Authoring Checkout
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsBatchLockDelete (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/batch/lock";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Undo Collaborative Authoring Checkout
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsBatchLockDelete (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/batch/lock".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Multiple Documents
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsBatchPost (String authorization, String accept, String contentType, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Multiple Documents
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIMigrationMode When set to true, Vault allows you to create documents in any lifecycle state using the status__v field, and to manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsBatchPost (String authorization, String accept, String contentType, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Multiple Documents
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsBatchPut (String authorization, String accept, String contentType, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Multiple Documents
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header.Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsBatchPut (String authorization, String accept, String contentType, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Anchor IDs
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAnchorsGet (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnchorsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnchorsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/anchors".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Anchor IDs
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAnchorsGet (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnchorsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnchorsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/anchors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Export Document Annotations to PDF
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAnnotationsFileGet (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/annotations/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Export Document Annotations to PDF
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAnnotationsFileGet (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/annotations/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Import Document Annotations from PDF
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAnnotationsFilePost (String docId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFilePost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFilePost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/annotations/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Import Document Annotations from PDF
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAnnotationsFilePost (String docId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFilePost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAnnotationsFilePost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/annotations/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Single Document Attachment
  * 
   * @param docId The document id field value.
   * @param attachmentId The attachment id field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdDelete (String docId, String attachmentId, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Single Document Attachment
   * 
   * @param docId The document id field value.   * @param attachmentId The attachment id field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdDelete (String docId, String attachmentId, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Document Attachment
  * 
   * @param docId The document id field value.
   * @param attachmentId The attachment id field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdFileGet (String docId, String attachmentId, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Document Attachment
   * 
   * @param docId The document id field value.   * @param attachmentId The attachment id field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdFileGet (String docId, String attachmentId, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Attachment Metadata
  * 
   * @param docId The document id field value.
   * @param attachmentId The attachment id field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdGet (String docId, String attachmentId, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Attachment Metadata
   * 
   * @param docId The document id field value.   * @param attachmentId The attachment id field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdGet (String docId, String attachmentId, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Document Attachment Description
  * 
   * @param docId The document id field value.
   * @param attachmentId The attachment id field value.
   * @param accept 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdPut (String docId, String attachmentId, String accept, String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Document Attachment Description
   * 
   * @param docId The document id field value.   * @param attachmentId The attachment id field value.   * @param accept    * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdPut (String docId, String attachmentId, String accept, String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdPut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Single Document Attachment Version
  * 
   * @param docId The document id field value.
   * @param attachmentId The attachment id field value.
   * @param attachmentVersion The attachment version__v field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete (String docId, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Single Document Attachment Version
   * 
   * @param docId The document id field value.   * @param attachmentId The attachment id field value.   * @param attachmentVersion The attachment version__v field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete (String docId, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Document Attachment Version
  * 
   * @param docId The document id field value.
   * @param attachmentId The attachment id field value.
   * @param attachmentVersion The attachment version__v field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet (String docId, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Document Attachment Version
   * 
   * @param docId The document id field value.   * @param attachmentId The attachment id field value.   * @param attachmentVersion The attachment version__v field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet (String docId, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Attachment Version Metadata
  * 
   * @param docId The document id field value.
   * @param attachmentId The attachment id field value.
   * @param attachmentVersion The attachment version__v field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet (String docId, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Attachment Version Metadata
   * 
   * @param docId The document id field value.   * @param attachmentId The attachment id field value.   * @param attachmentVersion The attachment version__v field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet (String docId, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Restore Document Attachment Version
  * 
   * @param docId The document id field value.
   * @param attachmentId The attachment id field value.
   * @param attachmentVersion The attachment version__v field value.
   * @param restore The parameter restore must be set to true. 
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost (String docId, String attachmentId, String attachmentVersion, Boolean restore, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "restore", restore));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Restore Document Attachment Version
   * 
   * @param docId The document id field value.   * @param attachmentId The attachment id field value.   * @param attachmentVersion The attachment version__v field value.   * @param restore The parameter restore must be set to true.    * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost (String docId, String attachmentId, String attachmentVersion, Boolean restore, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "restore", restore));

    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Attachment Versions
  * 
   * @param docId The document id field value.
   * @param attachmentId The attachment id field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet (String docId, String attachmentId, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Attachment Versions
   * 
   * @param docId The document id field value.   * @param attachmentId The attachment id field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet (String docId, String attachmentId, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdAttachmentsAttachmentIdVersionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/{attachment_id}/versions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download All Document Attachments
  * 
   * @param docId The document id field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsFileGet (String docId, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download All Document Attachments
   * 
   * @param docId The document id field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsFileGet (String docId, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Attachments
  * 
   * @param docId The document id field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsGet (String docId, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Attachments
   * 
   * @param docId The document id field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsGet (String docId, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Document Attachment
  * 
   * @param docId The document id field value.
   * @param accept 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAttachmentsPost (String docId, String accept, String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Document Attachment
   * 
   * @param docId The document id field value.   * @param accept    * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAttachmentsPost (String docId, String accept, String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAttachmentsPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/attachments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Complete Audit History for a Single Document
  * 
   * @param docId The document ID for which to retrieve audit history.
   * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date. 
   * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
   * @param formatResult To request a CSV file of your audit history, use csv. 
   * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
   * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
   * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdAudittrailGet (String docId, String startDate, String endDate, String formatResult, String limit, String offset, String events, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAudittrailGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAudittrailGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/audittrail".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "events", events));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Complete Audit History for a Single Document
   * 
   * @param docId The document ID for which to retrieve audit history.   * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vault’s creation date.    * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.    * @param formatResult To request a CSV file of your audit history, use csv.    * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.   * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.   * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of document audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;WorkflowCompletion,TaskAssignment. If omitted, defaults to all audit events.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdAudittrailGet (String docId, String startDate, String endDate, String formatResult, String limit, String offset, String events, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdAudittrailGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdAudittrailGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/audittrail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "events", events));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Single Document
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdDelete (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Single Document
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdDelete (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Events
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdEventsGet (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdEventsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdEventsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/events".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Events
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdEventsGet (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdEventsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdEventsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/events".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Document File
  * 
   * @param docId The document id field value.
   * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdFileGet (String docId, Boolean lockDocument, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lockDocument", lockDocument));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Document File
   * 
   * @param docId The document id field value.   * @param lockDocument Set to true to Check Out this document before retrieval. If omitted, defaults to false.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdFileGet (String docId, Boolean lockDocument, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "lockDocument", lockDocument));

    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdGet (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdGet (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Document Lock
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdLockDelete (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/lock".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Document Lock
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdLockDelete (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/lock".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Lock
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdLockGet (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/lock".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Lock
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdLockGet (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/lock".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Document Lock
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdLockPost (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/lock".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Document Lock
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdLockPost (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdLockPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/lock".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download All Document Version Attachments
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet (String docId, String majorVersion, String minorVersion, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download All Document Version Attachments
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet (String docId, String majorVersion, String minorVersion, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdMajorVersionMinorVersionAttachmentsFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/{major_version}/{minor_version}/attachments/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Single Document Version
  * 
   * @param docId The document id field value.
   * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdPost (String docId, String suppressRendition, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "suppressRendition", suppressRendition));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Single Document Version
   * 
   * @param docId The document id field value.   * @param suppressRendition Set to true to suppress automatic generation of the viewable rendition. If omitted, defaults to false   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdPost (String docId, String suppressRendition, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "suppressRendition", suppressRendition));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Single Document
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdPut (String docId, String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdPut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Single Document
   * 
   * @param docId The document id field value.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIMigrationMode When set to true, Vault allows you to change the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdPut (String docId, String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdPut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdPut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Renditions
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdRenditionsGet (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Renditions
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdRenditionsGet (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Single Document Rendition
  * 
   * @param docId The document id field value.
   * @param renditionType The document rendition type.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdRenditionsRenditionTypeDelete (String docId, String renditionType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Single Document Rendition
   * 
   * @param docId The document id field value.   * @param renditionType The document rendition type.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdRenditionsRenditionTypeDelete (String docId, String renditionType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Document Rendition File
  * 
   * @param docId The document id field value.
   * @param renditionType The document rendition type.
   * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document. 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdRenditionsRenditionTypeGet (String docId, String renditionType, String steadyState, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "steadyState", steadyState));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Document Rendition File
   * 
   * @param docId The document id field value.   * @param renditionType The document rendition type.   * @param steadyState Set to true to download a rendition (file) from the latest steady state version (1.0, 2.0, etc.) of a document.    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdRenditionsRenditionTypeGet (String docId, String renditionType, String steadyState, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypeGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "steadyState", steadyState));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add Single Document Rendition
  * 
   * @param docId The document id field value.
   * @param renditionType The document rendition type.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdRenditionsRenditionTypePost (String docId, String renditionType, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePost"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add Single Document Rendition
   * 
   * @param docId The document id field value.   * @param renditionType The document rendition type.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdRenditionsRenditionTypePost (String docId, String renditionType, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePost"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Replace Document Rendition
  * 
   * @param docId The document id field value.
   * @param renditionType The document rendition type.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdRenditionsRenditionTypePut (String docId, String renditionType, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePut"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replace Document Rendition
   * 
   * @param docId The document id field value.   * @param renditionType The document rendition type.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdRenditionsRenditionTypePut (String docId, String renditionType, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRenditionsRenditionTypePut"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdRenditionsRenditionTypePut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/renditions/{rendition_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove Users &amp; Groups from Roles on a Single Document
  * 
   * @param docId The id value of the document from which to remove roles.
   * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.
   * @param id The id value of the user or group to remove from the role.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete (String docId, String roleNameAndUserOrGroup, String id, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete"));
    }
    // verify the required parameter 'roleNameAndUserOrGroup' is set
    if (roleNameAndUserOrGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "role_name_and_user_or_group" + "\\}", apiInvoker.escapeString(roleNameAndUserOrGroup.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove Users &amp; Groups from Roles on a Single Document
   * 
   * @param docId The id value of the document from which to remove roles.   * @param roleNameAndUserOrGroup The name of the role from which to remove the user or group followed by either &#x60;user&#x60; or &#x60;group&#x60;. The format is &#x60;{role_name}.{user_or_group}&#x60;. For example, &#x60;consumer__v.user&#x60;.   * @param id The id value of the user or group to remove from the role.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete (String docId, String roleNameAndUserOrGroup, String id, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete"));
    }
    // verify the required parameter 'roleNameAndUserOrGroup' is set
    if (roleNameAndUserOrGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'roleNameAndUserOrGroup' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsDocIdRolesRoleNameAndUserOrGroupIdDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/roles/{role_name_and_user_or_group}/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "role_name_and_user_or_group" + "\\}", apiInvoker.escapeString(roleNameAndUserOrGroup.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Version Attachments
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet (String docId, String majorVersion, String minorVersion, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Version Attachments
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet (String docId, String majorVersion, String minorVersion, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionMajorVersionMinorVersionAttachmentsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/version/{major_version}/{minor_version}/attachments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Versions
  * 
   * @param docId The document id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsGet (String docId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Versions
   * 
   * @param docId The document id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsGet (String docId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Read Annotations by ID
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet (String docId, String majorVersion, String minorVersion, String annotationId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet"));
    }
    // verify the required parameter 'annotationId' is set
    if (annotationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet",
        new ApiException(400, "Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "annotation_id" + "\\}", apiInvoker.escapeString(annotationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Read Annotations by ID
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param annotationId The annotation ID, which can be retrieved with Read Annotations by Document Version and Type.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet (String docId, String majorVersion, String minorVersion, String annotationId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet"));
    }
    // verify the required parameter 'annotationId' is set
    if (annotationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet",
        new ApiException(400, "Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "annotation_id" + "\\}", apiInvoker.escapeString(annotationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Read Replies of Parent Annotation
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet (String docId, String majorVersion, String minorVersion, String annotationId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet"));
    }
    // verify the required parameter 'annotationId' is set
    if (annotationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet",
        new ApiException(400, "Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "annotation_id" + "\\}", apiInvoker.escapeString(annotationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Read Replies of Parent Annotation
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param annotationId The parent annotation ID, which can be retrieved with Read Annotations by Document Version and Type.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet (String docId, String majorVersion, String minorVersion, String annotationId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet"));
    }
    // verify the required parameter 'annotationId' is set
    if (annotationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet",
        new ApiException(400, "Missing the required parameter 'annotationId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsAnnotationIdRepliesGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/{annotation_id}/replies".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "annotation_id" + "\\}", apiInvoker.escapeString(annotationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Export Document Version Annotations to PDF
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Export Document Version Annotations to PDF
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Import Document Version Annotations from PDF
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost (String docId, String majorVersion, String minorVersion, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Import Document Version Annotations from PDF
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost (String docId, String majorVersion, String minorVersion, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsFilePost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Read Annotations by Document Version and Type
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.
   * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.
   * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60; 
   * @param paginationId A unique identifier used to load requests with paginated results.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet (String docId, String majorVersion, String minorVersion, String limit, String offset, String annotationTypes, String paginationId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "annotation_types", annotationTypes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pagination_id", paginationId));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Read Annotations by Document Version and Type
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 500. If omitted, defaults to 500. Values greater than 500 are ignored.   * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to offset&#x3D;201.   * @param annotationTypes The type(s) of annotations to retrieve. For example, note__sys,anchor__sys. If omitted, Vault returns all annotations. Valid annotation types include: &#x60;note__sys&#x60; &#x60;line__sys&#x60; &#x60;document_link__sys&#x60; &#x60;permalink_link__sys&#x60; &#x60;anchor__sys&#x60; &#x60;reply__sys&#x60; &#x60;external_link__sys&#x60;  The following annotation types are only valid in PromoMats Vaults:  &#x60;suggested_link__sys&#x60; &#x60;approved_link__sys&#x60; &#x60;auto_link__sys&#x60; &#x60;keyword_link__sys&#x60;    * @param paginationId A unique identifier used to load requests with paginated results.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet (String docId, String majorVersion, String minorVersion, String limit, String offset, String annotationTypes, String paginationId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAnnotationsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/annotations".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "annotation_types", annotationTypes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pagination_id", paginationId));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Document Version Attachment Version
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param attachmentId The id field value of the attachment.
   * @param attachmentVersion The version of the attachment.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet (String docId, String majorVersion, String minorVersion, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Document Version Attachment Version
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param attachmentId The id field value of the attachment.   * @param attachmentVersion The version of the attachment.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet (String docId, String majorVersion, String minorVersion, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Version Attachment Versions
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param attachmentId The id of the document attachment to retrieve.
   * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet (String docId, String majorVersion, String minorVersion, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Version Attachment Versions
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param attachmentId The id of the document attachment to retrieve.   * @param attachmentVersion Optional: The version of the attachment to retrieve. If omitted, the endpoint retrieves all versions of the specified attachment.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet (String docId, String majorVersion, String minorVersion, String attachmentId, String attachmentVersion, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Single Document Version
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Single Document Version
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Version Notes as CSV
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Version Notes as CSV
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionDocExportAnnotationsToCsvGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/doc-export-annotations-to-csv".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Document Event
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost (String docId, String majorVersion, String minorVersion, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Document Event
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost (String docId, String majorVersion, String minorVersion, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionEventsPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/events".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Video Annotations
  * 
   * @param docId The video document id field value.
   * @param majorVersion The video document major_version_number__v field value.
   * @param minorVersion The video document minor_version_number__v field value.
   * @param authorization 
   * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Video Annotations
   * 
   * @param docId The video document id field value.   * @param majorVersion The video document major_version_number__v field value.   * @param minorVersion The video document minor_version_number__v field value.   * @param authorization    * @param accept This &#x60;Accept&#x60; header only changes the format of the response in the case of an error. On &#x60;SUCCESS&#x60;, the HTTP Response Header &#x60;Content-Type&#x60; is set to &#x60;text/plain;charset&#x3D;UnicodeLittle&#x60;.   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionExportVideoAnnotationsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/export-video-annotations".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Document Version File
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet (String docId, String majorVersion, String minorVersion, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Document Version File
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet (String docId, String majorVersion, String minorVersion, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Version
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Version
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Document Version
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut (String docId, String majorVersion, String minorVersion, String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Document Version
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIMigrationMode When set to true, Vault allows you to manually set the document number. All other Document Migration Mode overrides available at document creation are ignored, but do not generate an error message. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut (String docId, String majorVersion, String minorVersion, String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionPut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Relationships
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Relationships
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Single Document Relationship
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost (String docId, String majorVersion, String minorVersion, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Single Document Relationship
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost (String docId, String majorVersion, String minorVersion, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Single Document Relationship
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete (String docId, String majorVersion, String minorVersion, String relationshipId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Single Document Relationship
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param relationshipId The relationship id field value. See Retrieve Document Relationships.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete (String docId, String majorVersion, String minorVersion, String relationshipId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete",
        new ApiException(400, "Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Relationship
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param relationshipId The relationship id field value. See Retrieve Document Relationships.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet (String docId, String majorVersion, String minorVersion, String relationshipId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Relationship
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param relationshipId The relationship id field value. See Retrieve Document Relationships.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet (String docId, String majorVersion, String minorVersion, String relationshipId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }
    // verify the required parameter 'relationshipId' is set
    if (relationshipId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet",
        new ApiException(400, "Missing the required parameter 'relationshipId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRelationshipsRelationshipIdGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/relationships/{relationship_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "relationship_id" + "\\}", apiInvoker.escapeString(relationshipId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Version Renditions
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Version Renditions
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet (String docId, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Document Version Rendition
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param renditionType The document rendition type.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete (String docId, String majorVersion, String minorVersion, String renditionType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Document Version Rendition
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param renditionType The document rendition type.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete (String docId, String majorVersion, String minorVersion, String renditionType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Document Version Rendition File
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param renditionType The document rendition type.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet (String docId, String majorVersion, String minorVersion, String renditionType, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Document Version Rendition File
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param renditionType The document rendition type.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet (String docId, String majorVersion, String minorVersion, String renditionType, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypeGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Upload Document Version Rendition
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param renditionType The document rendition type.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost (String docId, String majorVersion, String minorVersion, String renditionType, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Upload Document Version Rendition
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param renditionType The document rendition type.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost (String docId, String majorVersion, String minorVersion, String renditionType, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePost"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Replace Document Version Rendition
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param renditionType The document rendition type.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut (String docId, String majorVersion, String minorVersion, String renditionType, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replace Document Version Rendition
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param renditionType The document rendition type.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut (String docId, String majorVersion, String minorVersion, String renditionType, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut"));
    }
    // verify the required parameter 'renditionType' is set
    if (renditionType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut",
        new ApiException(400, "Missing the required parameter 'renditionType' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionRenditionsRenditionTypePut"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/renditions/{rendition_type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "rendition_type" + "\\}", apiInvoker.escapeString(renditionType.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Document Version Thumbnail File
  * 
   * @param docId The document id field value.
   * @param majorVersion The document major_version_number__v field value.
   * @param minorVersion The document minor_version_number__v field value.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet (String docId, String majorVersion, String minorVersion, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail".replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Document Version Thumbnail File
   * 
   * @param docId The document id field value.   * @param majorVersion The document major_version_number__v field value.   * @param minorVersion The document minor_version_number__v field value.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet (String docId, String majorVersion, String minorVersion, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'docId' is set
    if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet",
        new ApiException(400, "Missing the required parameter 'docId' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsDocIdVersionsMajorVersionMinorVersionThumbnailGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{doc_id}/versions/{major_version}/{minor_version}/thumbnail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "doc_id" + "\\}", apiInvoker.escapeString(docId.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Documents
  * 
   * @param namedFilter Retrieves only documents which you have created.
   * @param scope Searches only within the document content.
   * @param versionscope Retrieves all document versions, rather than only the latest version.
   * @param search Search for documents based on a {keyword} in searchable document fields.
   * @param limit See VQL documentation for more information.
   * @param sort See VQL documentation for more information.
   * @param start See VQL documentation for more information.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsGet (String namedFilter, String scope, String versionscope, String search, String limit, String sort, String start, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "named_filter", namedFilter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "scope", scope));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "versionscope", versionscope));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort", sort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Documents
   * 
   * @param namedFilter Retrieves only documents which you have created.   * @param scope Searches only within the document content.   * @param versionscope Retrieves all document versions, rather than only the latest version.   * @param search Search for documents based on a {keyword} in searchable document fields.   * @param limit See VQL documentation for more information.   * @param sort See VQL documentation for more information.   * @param start See VQL documentation for more information.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsGet (String namedFilter, String scope, String versionscope, String search, String limit, String sort, String start, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "named_filter", namedFilter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "scope", scope));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "versionscope", versionscope));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "search", search));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort", sort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Document Roles
  * 
   * @param id 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsIdRolesGet (String id, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdRolesGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdRolesGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/roles".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Document Roles
   * 
   * @param id    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsIdRolesGet (String id, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdRolesGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdRolesGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Assign Users &amp; Groups to Roles on a Single Document
  * 
   * @param id 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsIdRolesPost (String id, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdRolesPost",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdRolesPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/roles".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Assign Users &amp; Groups to Roles on a Single Document
   * 
   * @param id    * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsIdRolesPost (String id, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdRolesPost",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdRolesPost"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Role
  * 
   * @param id The document &#x60;id&#x60;.
   * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsIdRolesRoleNameGet (String id, String roleName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdRolesRoleNameGet"));
    }
    // verify the required parameter 'roleName' is set
    if (roleName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleName' when calling objectsDocumentsIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'roleName' when calling objectsDocumentsIdRolesRoleNameGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/roles/{role_name}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "role_name" + "\\}", apiInvoker.escapeString(roleName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Role
   * 
   * @param id The document &#x60;id&#x60;.   * @param roleName The name of the role to retrieve. For example, &#x60;owner__v&#x60;.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsIdRolesRoleNameGet (String id, String roleName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdRolesRoleNameGet"));
    }
    // verify the required parameter 'roleName' is set
    if (roleName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleName' when calling objectsDocumentsIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'roleName' when calling objectsDocumentsIdRolesRoleNameGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/roles/{role_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "role_name" + "\\}", apiInvoker.escapeString(roleName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document User Actions
  * 
   * @param id The document id field value from which to retrieve available user actions.
   * @param majorVersion The major version number of the document.
   * @param minorVersion The minor version number of the document.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet (String id, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document User Actions
   * 
   * @param id The document id field value from which to retrieve available user actions.   * @param majorVersion The major version number of the document.   * @param minorVersion The minor version number of the document.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet (String id, String majorVersion, String minorVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Entry Criteria
  * 
   * @param id The document id field value from which to retrieve available user actions.
   * @param majorVersion The major version number of the document.
   * @param minorVersion The minor version number of the document.
   * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet (String id, String majorVersion, String minorVersion, String nameV, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'nameV' is set
    if (nameV == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "name__v" + "\\}", apiInvoker.escapeString(nameV.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Entry Criteria
   * 
   * @param id The document id field value from which to retrieve available user actions.   * @param majorVersion The major version number of the document.   * @param minorVersion The minor version number of the document.   * @param nameV The lifecycle name__v field value from which to retrieve entry criteria. This is retrieved from the Retrieve User Actions request above.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet (String id, String majorVersion, String minorVersion, String nameV, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }
    // verify the required parameter 'nameV' is set
    if (nameV == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet",
        new ApiException(400, "Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVEntryRequirementsGet"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}/entry_requirements".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "name__v" + "\\}", apiInvoker.escapeString(nameV.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Document User Action
  * 
   * @param id The document id field value from which to retrieve available user actions.
   * @param majorVersion The major version number of the document.
   * @param minorVersion The minor version number of the document.
   * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut (String id, String majorVersion, String minorVersion, String nameV, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'nameV' is set
    if (nameV == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "name__v" + "\\}", apiInvoker.escapeString(nameV.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Document User Action
   * 
   * @param id The document id field value from which to retrieve available user actions.   * @param majorVersion The major version number of the document.   * @param minorVersion The minor version number of the document.   * @param nameV The action name__v field value to initiate. This is retrieved from the Retrieve User Action request.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut (String id, String majorVersion, String minorVersion, String nameV, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'majorVersion' is set
    if (majorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'majorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'minorVersion' is set
    if (minorVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'minorVersion' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }
    // verify the required parameter 'nameV' is set
    if (nameV == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut",
        new ApiException(400, "Missing the required parameter 'nameV' when calling objectsDocumentsIdVersionsMajorVersionMinorVersionLifecycleActionsNameVPut"));
    }

    // create path and map variables
    String path = "/objects/documents/{id}/versions/{major_version}/{minor_version}/lifecycle_actions/{name__v}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "major_version" + "\\}", apiInvoker.escapeString(majorVersion.toString())).replaceAll("\\{" + "minor_version" + "\\}", apiInvoker.escapeString(minorVersion.toString())).replaceAll("\\{" + "name__v" + "\\}", apiInvoker.escapeString(nameV.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve User Actions on Multiple Documents
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsLifecycleActionsPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/lifecycle_actions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve User Actions on Multiple Documents
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsLifecycleActionsPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/lifecycle_actions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Bulk Document User Actions
  * 
   * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsLifecycleActionsUserActionNamePut (String userActionName, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userActionName' is set
    if (userActionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userActionName' when calling objectsDocumentsLifecycleActionsUserActionNamePut",
        new ApiException(400, "Missing the required parameter 'userActionName' when calling objectsDocumentsLifecycleActionsUserActionNamePut"));
    }

    // create path and map variables
    String path = "/objects/documents/lifecycle_actions/{user_action_name}".replaceAll("\\{" + "user_action_name" + "\\}", apiInvoker.escapeString(userActionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Bulk Document User Actions
   * 
   * @param userActionName The user action name__v field value. Find this value with the Retrieve User Actions on Multiple Documents endpoint.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsLifecycleActionsUserActionNamePut (String userActionName, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'userActionName' is set
    if (userActionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userActionName' when calling objectsDocumentsLifecycleActionsUserActionNamePut",
        new ApiException(400, "Missing the required parameter 'userActionName' when calling objectsDocumentsLifecycleActionsUserActionNamePut"));
    }

    // create path and map variables
    String path = "/objects/documents/lifecycle_actions/{user_action_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_action_name" + "\\}", apiInvoker.escapeString(userActionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Single Document
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsPost (String authorization, String accept, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Single Document
   * 
   * @param authorization    * @param accept    * @param xVaultAPIMigrationMode When set to true,  you can use the status__v field to create documents in any lifecycle state. Additionally, you can manually set the name, document number, and version number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsPost (String authorization, String accept, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Multiple Document Relationships
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsRelationshipsBatchDelete (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/relationships/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Multiple Document Relationships
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsRelationshipsBatchDelete (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/relationships/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Multiple Document Relationships
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsRelationshipsBatchPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/relationships/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Multiple Document Relationships
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsRelationshipsBatchPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/relationships/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Multiple Document Renditions
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsRenditionsBatchDelete (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/renditions/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Multiple Document Renditions
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsRenditionsBatchDelete (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/renditions/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add Multiple Document Renditions
  * 
   * @param idParam If you’re identifying documents in your input by their external ID
   * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsRenditionsBatchPost (String idParam, String largeSizeAsset, String authorization, String accept, String contentType, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/renditions/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "largeSizeAsset", largeSizeAsset));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add Multiple Document Renditions
   * 
   * @param idParam If you’re identifying documents in your input by their external ID   * @param largeSizeAsset If set to true, indicates that the renditions to add are of the Large Size Asset (large_size_asset__v) rendition type. Vault applies Document Migration Mode limitations to renditions created with the request, but Document Migration permission is not required and your vault need not be in Migration Mode to use the parameter. Note that the request results in an error if the CSV contains any rendition type other than large_size_asset__v.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIMigrationMode Must be set to true when importing any rendition type other than large_size_asset__v. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsRenditionsBatchPost (String idParam, String largeSizeAsset, String authorization, String accept, String contentType, Boolean xVaultAPIMigrationMode, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/renditions/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "largeSizeAsset", largeSizeAsset));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsRolesBatchDelete (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/roles/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove Users and Groups from Roles on Multiple Documents &amp; Binders
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsRolesBatchDelete (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/roles/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsRolesBatchPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/roles/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Assign Users &amp; Groups to Roles on Multiple Documents &amp; Binders
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsRolesBatchPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/roles/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Template Collection
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsTemplatesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/templates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Template Collection
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsTemplatesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/templates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Single Document Template
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsTemplatesPost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/templates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Single Document Template
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsTemplatesPost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/templates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Multiple Document Templates
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsTemplatesPut (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/templates";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Multiple Document Templates
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsTemplatesPut (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/templates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Basic Document Template
  * 
   * @param templateName The document template name__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsTemplatesTemplateNameDelete (String templateName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameDelete",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/templates/{template_name}".replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Basic Document Template
   * 
   * @param templateName The document template name__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsTemplatesTemplateNameDelete (String templateName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameDelete",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameDelete"));
    }

    // create path and map variables
    String path = "/objects/documents/templates/{template_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Document Template File
  * 
   * @param templateName The document template name__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsTemplatesTemplateNameFileGet (String templateName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameFileGet",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/templates/{template_name}/file".replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Document Template File
   * 
   * @param templateName The document template name__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsTemplatesTemplateNameFileGet (String templateName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameFileGet",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameFileGet"));
    }

    // create path and map variables
    String path = "/objects/documents/templates/{template_name}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Document Template Attributes
  * 
   * @param templateName The document template name__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsTemplatesTemplateNameGet (String templateName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameGet",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameGet"));
    }

    // create path and map variables
    String path = "/objects/documents/templates/{template_name}".replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Document Template Attributes
   * 
   * @param templateName The document template name__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsTemplatesTemplateNameGet (String templateName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameGet",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNameGet"));
    }

    // create path and map variables
    String path = "/objects/documents/templates/{template_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Single Document Template
  * 
   * @param templateName The document template name__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsTemplatesTemplateNamePut (String templateName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNamePut",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNamePut"));
    }

    // create path and map variables
    String path = "/objects/documents/templates/{template_name}".replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Single Document Template
   * 
   * @param templateName The document template name__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsTemplatesTemplateNamePut (String templateName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'templateName' is set
    if (templateName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNamePut",
        new ApiException(400, "Missing the required parameter 'templateName' when calling objectsDocumentsTemplatesTemplateNamePut"));
    }

    // create path and map variables
    String path = "/objects/documents/templates/{template_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "template_name" + "\\}", apiInvoker.escapeString(templateName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Document Tokens
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsTokensPost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/tokens";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Document Tokens
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsTokensPost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/tokens".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Export Document Versions
  * 
   * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.
   * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsVersionsBatchActionsFileextractPost (Boolean source, Boolean renditions, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/versions/batch/actions/fileextract";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "source", source));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "renditions", renditions));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Export Document Versions
   * 
   * @param source Optional: To exclude source files, include a query parameter source&#x3D;false. If omitted, defaults to true.   * @param renditions Optional: To include renditions, include a query parameter renditions&#x3D;true. If omitted, defaults to false.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsVersionsBatchActionsFileextractPost (Boolean source, Boolean renditions, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/versions/batch/actions/fileextract".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "source", source));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "renditions", renditions));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Multiple Document Versions
  * 
   * @param idParam If you’re identifying documents in your input by their external ID
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsVersionsBatchDelete (String idParam, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/versions/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Multiple Document Versions
   * 
   * @param idParam If you’re identifying documents in your input by their external ID   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsVersionsBatchDelete (String idParam, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/versions/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Multiple Document Versions
  * 
   * @param idParam If you’re identifying documents in your input by their external ID
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDocumentsVersionsBatchPost (String idParam, String authorization, String accept, String contentType, String xVaultAPIMigrationMode, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/documents/versions/batch";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Multiple Document Versions
   * 
   * @param idParam If you’re identifying documents in your input by their external ID   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIMigrationMode Must be set to true. Vault allows you to manually set the name and version number and to create documents in any lifecycle state using the &#x60;status__v&#x60; field, but does not allow you to change the document number. Vault also bypasses entry criteria, entry actions, and event actions. You must have the Document Migration permission to use this header. Learn more about &lt;a href&#x3D;\&quot;https://platform.veevavault.help/en/gr/54028\&quot;&gt;Document Migration Mode in Vault Help.&lt;/a&gt;   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDocumentsVersionsBatchPost (String idParam, String authorization, String accept, String contentType, String xVaultAPIMigrationMode, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/documents/versions/batch".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Domain Information
  * 
   * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDomainGet (Boolean includeApplication, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/domain";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_application", includeApplication));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Domain Information
   * 
   * @param includeApplication To include Vault application type information in the response, set include_application to true. If omitted, defaults to false and application information is not included.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDomainGet (Boolean includeApplication, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/domain".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_application", includeApplication));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Domains
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsDomainsGet (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/domains";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Domains
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsDomainsGet (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/domains".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add EDL Matched Documents
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsEdlMatchedDocumentsBatchActionsAddPost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/edl_matched_documents/batch/actions/add";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add EDL Matched Documents
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsEdlMatchedDocumentsBatchActionsAddPost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/edl_matched_documents/batch/actions/add".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove EDL Matched Documents
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsEdlMatchedDocumentsBatchActionsRemovePost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/edl_matched_documents/batch/actions/remove";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove EDL Matched Documents
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsEdlMatchedDocumentsBatchActionsRemovePost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/edl_matched_documents/batch/actions/remove".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Auto Managed Groups
  * 
   * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000. 
   * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsGroupsAutoGet (String limit, String offset, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/groups/auto";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Auto Managed Groups
   * 
   * @param limit Paginate the results by specifying the maximum number of records per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 1000.    * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsGroupsAutoGet (String limit, String offset, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/groups/auto".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Groups
  * 
   * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsGroupsGet (String includeImplied, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/groups";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "includeImplied", includeImplied));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Groups
   * 
   * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. If omitted, the response includes only the members__v field. These users are individually added to a group by an Admin.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsGroupsGet (String includeImplied, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/groups".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "includeImplied", includeImplied));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Group
  * 
   * @param groupId The group id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsGroupsGroupIdDelete (String groupId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'groupId' when calling objectsGroupsGroupIdDelete"));
    }

    // create path and map variables
    String path = "/objects/groups/{group_id}".replaceAll("\\{" + "group_id" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Group
   * 
   * @param groupId The group id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsGroupsGroupIdDelete (String groupId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdDelete",
        new ApiException(400, "Missing the required parameter 'groupId' when calling objectsGroupsGroupIdDelete"));
    }

    // create path and map variables
    String path = "/objects/groups/{group_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "group_id" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Group
  * 
   * @param groupId The group id field value.
   * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsGroupsGroupIdGet (String groupId, Boolean includeImplied, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdGet",
        new ApiException(400, "Missing the required parameter 'groupId' when calling objectsGroupsGroupIdGet"));
    }

    // create path and map variables
    String path = "/objects/groups/{group_id}".replaceAll("\\{" + "group_id" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "includeImplied", includeImplied));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Group
   * 
   * @param groupId The group id field value.   * @param includeImplied When true, the response includes the implied_members__v field. These users are automatically added to the group when their security_profiles__v are added to the group. When not used, the response includes only the members__v field. These users are individually added to a group by Admin.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsGroupsGroupIdGet (String groupId, Boolean includeImplied, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdGet",
        new ApiException(400, "Missing the required parameter 'groupId' when calling objectsGroupsGroupIdGet"));
    }

    // create path and map variables
    String path = "/objects/groups/{group_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "group_id" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "includeImplied", includeImplied));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Group
  * 
   * @param groupId The group id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsGroupsGroupIdPut (String groupId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdPut",
        new ApiException(400, "Missing the required parameter 'groupId' when calling objectsGroupsGroupIdPut"));
    }

    // create path and map variables
    String path = "/objects/groups/{group_id}".replaceAll("\\{" + "group_id" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Group
   * 
   * @param groupId The group id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsGroupsGroupIdPut (String groupId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling objectsGroupsGroupIdPut",
        new ApiException(400, "Missing the required parameter 'groupId' when calling objectsGroupsGroupIdPut"));
    }

    // create path and map variables
    String path = "/objects/groups/{group_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "group_id" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Group 
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsGroupsPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/groups";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Group 
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsGroupsPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/groups".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Application License Usage
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsLicensesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/licenses";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Application License Usage
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsLicensesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/licenses".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Multi-Record Workflows
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsActionsGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/objectworkflows/actions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Multi-Record Workflows
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsActionsGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/objectworkflows/actions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Multi-Record Workflow Details
  * 
   * @param workflowName 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsActionsWorkflowNameGet (String workflowName, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'workflowName' is set
    if (workflowName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNameGet",
        new ApiException(400, "Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNameGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/actions/{workflow_name}".replaceAll("\\{" + "workflow_name" + "\\}", apiInvoker.escapeString(workflowName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Multi-Record Workflow Details
   * 
   * @param workflowName    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsActionsWorkflowNameGet (String workflowName, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'workflowName' is set
    if (workflowName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNameGet",
        new ApiException(400, "Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNameGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/actions/{workflow_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "workflow_name" + "\\}", apiInvoker.escapeString(workflowName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Multi-Record Workflow
  * 
   * @param workflowName 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsActionsWorkflowNamePost (String workflowName, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'workflowName' is set
    if (workflowName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNamePost",
        new ApiException(400, "Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNamePost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/actions/{workflow_name}".replaceAll("\\{" + "workflow_name" + "\\}", apiInvoker.escapeString(workflowName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Multi-Record Workflow
   * 
   * @param workflowName    * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsActionsWorkflowNamePost (String workflowName, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'workflowName' is set
    if (workflowName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNamePost",
        new ApiException(400, "Missing the required parameter 'workflowName' when calling objectsObjectworkflowsActionsWorkflowNamePost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/actions/{workflow_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "workflow_name" + "\\}", apiInvoker.escapeString(workflowName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Workflows
  * 
   * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
   * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used. 
   * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
   * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v
   * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
   * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
   * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsGet (String objectV, String recordIdV, String participant, String statusV, String offset, String pageSize, String loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/objectworkflows";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "object__v", objectV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "record_id__v", recordIdV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "participant", participant));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status__v", statusV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Workflows
   * 
   * @param objectV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.    * @param recordIdV To retrieve all workflows configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the participant parameter is not used.    * @param participant To retrieve all workflows available to a particular user, include the user id field value as ?participant&#x3D;{id}. To retrieve your own workflows, set this value to ?participant&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.    * @param statusV To retrieve all workflows with specific statuses, include one or more status name__v field values. For example: status__v&#x3D;active__v, status__v&#x3D;active__v,completed__v. Workflows with &#x60;status__v&#x3D;active__v&#x60; are in progress for the indicated object record. Valid statuses include: active__v completed__v cancelled__v   * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.    * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.    * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsGet (String objectV, String recordIdV, String participant, String statusV, String offset, String pageSize, String loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/objectworkflows".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "object__v", objectV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "record_id__v", recordIdV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "participant", participant));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status__v", statusV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Workflow Tasks
  * 
   * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
   * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.
   * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used. 
   * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v. 
   * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201. 
   * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000. 
   * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true. 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksGet (String objectV, String recordIdV, String assigneeV, String statusV, String offset, String pageSize, String loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/objectworkflows/tasks";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "object__v", objectV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "record_id__v", recordIdV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assignee__v", assigneeV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status__v", statusV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Workflow Tasks
   * 
   * @param objectV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.   * @param recordIdV To retrieve all workflow tasks configured on an object, include the Vault object name__v and object record id field values as ?object__v&#x3D;{name__v}&amp;record_id__v&#x3D;{id}. These two parameters are required when the assignee__v parameter is not used.   * @param assigneeV To retrieve all workflow tasks available to a particular user, include the user id field value as ?assignee__v&#x3D;{id}. To retrieve your own workflow tasks, set this value to ?assignee__v&#x3D;me. This parameter is required when the object__v and record_id__v parameters are not used.    * @param statusV To retrieve all workflow tasks with specific statuses, include one or more status name__v field values. For example: ?status__v&#x3D;available__v or ?status__v&#x3D;available__v,completed__v.    * @param offset This parameter is used to paginate the results. It specifies the amount of offset from the first record returned. Vault returns 200 records per page by default. If you are viewing the first 200 results (page 1) and want to see the next page, set this to ?offset&#x3D;201.    * @param pageSize This parameter is used to paginate the results. It specifies the size number of records to display per page. Vault returns 200 records per page by default. You can set this value lower or as high as 1000 records per page. For example: ?page_size&#x3D;1000.    * @param loc When localized (translated) strings are available, retrieve them by including ?loc&#x3D;true.    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksGet (String objectV, String recordIdV, String assigneeV, String statusV, String offset, String pageSize, String loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/objectworkflows/tasks".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "object__v", objectV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "record_id__v", recordIdV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "assignee__v", assigneeV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status__v", statusV));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Accept Single Record Workflow Task
  * 
   * @param taskId The task id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsAcceptPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/accept".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Accept Single Record Workflow Task
   * 
   * @param taskId The task id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsAcceptPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsAcceptPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/accept".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cancel Workflow Task
  * 
   * @param taskId The task id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsCancelPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/cancel".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancel Workflow Task
   * 
   * @param taskId The task id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsCancelPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCancelPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/cancel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Complete Single Record Workflow Task
  * 
   * @param taskId The task id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsCompletePost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/complete".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Complete Single Record Workflow Task
   * 
   * @param taskId The task id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsCompletePost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsCompletePost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/complete".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Workflow Task Actions
  * 
   * @param taskId The task id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsGet (String taskId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Workflow Task Actions
   * 
   * @param taskId The task id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsGet (String taskId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Accept Multi-item Workflow Task
  * 
   * @param taskId The task id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Accept Multi-item Workflow Task
   * 
   * @param taskId The task id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwacceptPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwaccept".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Complete Multi-item Workflow Task
  * 
   * @param taskId The task id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Complete Multi-item Workflow Task
   * 
   * @param taskId The task id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwcompletePost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwcomplete".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Manage Multi-Item Workflow Content
  * 
   * @param taskId The task id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Manage Multi-Item Workflow Content
   * 
   * @param taskId The task id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwmanagecontentPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwmanagecontent".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reassign Multi-item Workflow Task
  * 
   * @param taskId The id of the task to reassign.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reassign Multi-item Workflow Task
   * 
   * @param taskId The id of the task to reassign.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsMdwreassignPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/mdwreassign".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reassign Single Record Workflow Task
  * 
   * @param taskId The id of the task to reassign.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsReassignPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/reassign".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reassign Single Record Workflow Task
   * 
   * @param taskId The id of the task to reassign.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsReassignPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsReassignPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/reassign".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Workflow Task Action Details
  * 
   * @param taskId The task id field value.
   * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.
   * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsTaskActionGet (String taskId, String taskAction, String loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet"));
    }
    // verify the required parameter 'taskAction' is set
    if (taskAction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskAction' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet",
        new ApiException(400, "Missing the required parameter 'taskAction' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/{task_action}".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString())).replaceAll("\\{" + "task_action" + "\\}", apiInvoker.escapeString(taskAction.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Workflow Task Action Details
   * 
   * @param taskId The task id field value.   * @param taskAction The name of the task action retrieved from Retrieve Workflow Task Actions.   * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsTaskActionGet (String taskId, String taskAction, String loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet"));
    }
    // verify the required parameter 'taskAction' is set
    if (taskAction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskAction' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet",
        new ApiException(400, "Missing the required parameter 'taskAction' when calling objectsObjectworkflowsTasksTaskIdActionsTaskActionGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/{task_action}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString())).replaceAll("\\{" + "task_action" + "\\}", apiInvoker.escapeString(taskAction.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Undo Workflow Task Acceptance
  * 
   * @param taskId The task id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/undoaccept".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Undo Workflow Task Acceptance
   * 
   * @param taskId The task id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUndoacceptPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/undoaccept".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Workflow Task Due Date
  * 
   * @param taskId The id of the task.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/updateduedate".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Workflow Task Due Date
   * 
   * @param taskId The id of the task.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost (String taskId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdActionsUpdateduedatePost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}/actions/updateduedate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Workflow Task Details
  * 
   * @param taskId The task id field value.
   * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsTasksTaskIdGet (String taskId, Boolean loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}".replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Workflow Task Details
   * 
   * @param taskId The task id field value.   * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsTasksTaskIdGet (String taskId, Boolean loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling objectsObjectworkflowsTasksTaskIdGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/tasks/{task_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Workflow Actions
  * 
   * @param workflowId The workflow id field value.
   * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true. 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsWorkflowIdActionsGet (String workflowId, String loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'workflowId' is set
    if (workflowId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsGet",
        new ApiException(400, "Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/{workflow_id}/actions".replaceAll("\\{" + "workflow_id" + "\\}", apiInvoker.escapeString(workflowId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Workflow Actions
   * 
   * @param workflowId The workflow id field value.   * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsWorkflowIdActionsGet (String workflowId, String loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'workflowId' is set
    if (workflowId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsGet",
        new ApiException(400, "Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/{workflow_id}/actions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "workflow_id" + "\\}", apiInvoker.escapeString(workflowId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Workflow Action Details
  * 
   * @param workflowId The workflow id field value.
   * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet (String workflowId, String workflowAction, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'workflowId' is set
    if (workflowId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet",
        new ApiException(400, "Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet"));
    }
    // verify the required parameter 'workflowAction' is set
    if (workflowAction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet",
        new ApiException(400, "Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".replaceAll("\\{" + "workflow_id" + "\\}", apiInvoker.escapeString(workflowId.toString())).replaceAll("\\{" + "workflow_action" + "\\}", apiInvoker.escapeString(workflowAction.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Workflow Action Details
   * 
   * @param workflowId The workflow id field value.   * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet (String workflowId, String workflowAction, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'workflowId' is set
    if (workflowId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet",
        new ApiException(400, "Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet"));
    }
    // verify the required parameter 'workflowAction' is set
    if (workflowAction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet",
        new ApiException(400, "Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "workflow_id" + "\\}", apiInvoker.escapeString(workflowId.toString())).replaceAll("\\{" + "workflow_action" + "\\}", apiInvoker.escapeString(workflowAction.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Workflow Action
  * 
   * @param workflowId The workflow id field value.
   * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.
   * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost (String workflowId, String workflowAction, String documentsSys, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'workflowId' is set
    if (workflowId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost",
        new ApiException(400, "Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost"));
    }
    // verify the required parameter 'workflowAction' is set
    if (workflowAction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost",
        new ApiException(400, "Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".replaceAll("\\{" + "workflow_id" + "\\}", apiInvoker.escapeString(workflowId.toString())).replaceAll("\\{" + "workflow_action" + "\\}", apiInvoker.escapeString(workflowAction.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "documents__sys", documentsSys));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Workflow Action
   * 
   * @param workflowId The workflow id field value.   * @param workflowAction The workflow action name retrieved from Retrieve Workflow Actions.   * @param documentsSys Include the id or ids as a comma-separated list of the document(s) to be removed from a document workflow when using the removecontent action. If your workflow_action is remove_content, include the id of the document to remove the workflow. To remove multiple documents, use a comma-separated list of ids.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost (String workflowId, String workflowAction, String documentsSys, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'workflowId' is set
    if (workflowId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost",
        new ApiException(400, "Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost"));
    }
    // verify the required parameter 'workflowAction' is set
    if (workflowAction == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost",
        new ApiException(400, "Missing the required parameter 'workflowAction' when calling objectsObjectworkflowsWorkflowIdActionsWorkflowActionPost"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/{workflow_id}/actions/{workflow_action}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "workflow_id" + "\\}", apiInvoker.escapeString(workflowId.toString())).replaceAll("\\{" + "workflow_action" + "\\}", apiInvoker.escapeString(workflowAction.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "documents__sys", documentsSys));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Workflow Details
  * 
   * @param workflowId The workflow id field value.
   * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsObjectworkflowsWorkflowIdGet (String workflowId, Boolean loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'workflowId' is set
    if (workflowId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdGet",
        new ApiException(400, "Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/{workflow_id}".replaceAll("\\{" + "workflow_id" + "\\}", apiInvoker.escapeString(workflowId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Workflow Details
   * 
   * @param workflowId The workflow id field value.   * @param loc When localized (translated) strings are available, retrieve them by including loc&#x3D;true.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsObjectworkflowsWorkflowIdGet (String workflowId, Boolean loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'workflowId' is set
    if (workflowId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdGet",
        new ApiException(400, "Missing the required parameter 'workflowId' when calling objectsObjectworkflowsWorkflowIdGet"));
    }

    // create path and map variables
    String path = "/objects/objectworkflows/{workflow_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "workflow_id" + "\\}", apiInvoker.escapeString(workflowId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Picklists
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsPicklistsGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/picklists";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Picklists
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsPicklistsGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/picklists".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Picklist Values
  * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsPicklistsPicklistNameGet (String picklistName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNameGet",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNameGet"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}".replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Picklist Values
   * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsPicklistsPicklistNameGet (String picklistName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNameGet",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNameGet"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Inactivate Picklist Value
  * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsPicklistsPicklistNamePicklistValueNameDelete (String picklistName, String picklistValueName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete"));
    }
    // verify the required parameter 'picklistValueName' is set
    if (picklistValueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete",
        new ApiException(400, "Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}/{picklist_value_name}".replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString())).replaceAll("\\{" + "picklist_value_name" + "\\}", apiInvoker.escapeString(picklistValueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Inactivate Picklist Value
   * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)   * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsPicklistsPicklistNamePicklistValueNameDelete (String picklistName, String picklistValueName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete"));
    }
    // verify the required parameter 'picklistValueName' is set
    if (picklistValueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete",
        new ApiException(400, "Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNameDelete"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}/{picklist_value_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString())).replaceAll("\\{" + "picklist_value_name" + "\\}", apiInvoker.escapeString(picklistValueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Picklist Value
  * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsPicklistsPicklistNamePicklistValueNamePut (String picklistName, String picklistValueName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNamePut",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNamePut"));
    }
    // verify the required parameter 'picklistValueName' is set
    if (picklistValueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNamePut",
        new ApiException(400, "Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNamePut"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}/{picklist_value_name}".replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString())).replaceAll("\\{" + "picklist_value_name" + "\\}", apiInvoker.escapeString(picklistValueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Picklist Value
   * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)   * @param picklistValueName The picklist value name field value (north_america__c, south_america__c, etc.)   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsPicklistsPicklistNamePicklistValueNamePut (String picklistName, String picklistValueName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNamePut",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePicklistValueNamePut"));
    }
    // verify the required parameter 'picklistValueName' is set
    if (picklistValueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNamePut",
        new ApiException(400, "Missing the required parameter 'picklistValueName' when calling objectsPicklistsPicklistNamePicklistValueNamePut"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}/{picklist_value_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString())).replaceAll("\\{" + "picklist_value_name" + "\\}", apiInvoker.escapeString(picklistValueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Picklist Values
  * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsPicklistsPicklistNamePost (String picklistName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePost",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePost"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}".replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Picklist Values
   * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsPicklistsPicklistNamePost (String picklistName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePost",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePost"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Picklist Value Label
  * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsPicklistsPicklistNamePut (String picklistName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePut",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePut"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}".replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Picklist Value Label
   * 
   * @param picklistName The picklist name field value (license_type__v, product_family__c, region__c, etc.)   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsPicklistsPicklistNamePut (String picklistName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'picklistName' is set
    if (picklistName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePut",
        new ApiException(400, "Missing the required parameter 'picklistName' when calling objectsPicklistsPicklistNamePut"));
    }

    // create path and map variables
    String path = "/objects/picklists/{picklist_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "picklist_name" + "\\}", apiInvoker.escapeString(picklistName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Build Production Vault
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxActionsBuildproductionPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/sandbox/actions/buildproduction";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Build Production Vault
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxActionsBuildproductionPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/sandbox/actions/buildproduction".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Promote to Production
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxActionsPromoteproductionPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/sandbox/actions/promoteproduction";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Promote to Production
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxActionsPromoteproductionPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/sandbox/actions/promoteproduction".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Recheck Sandbox Usage Limit
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxActionsRecheckusagePost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/sandbox/actions/recheckusage";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Recheck Sandbox Usage Limit
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxActionsRecheckusagePost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/sandbox/actions/recheckusage".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Change Sandbox Size
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxBatchChangesizePost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/sandbox/batch/changesize";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Change Sandbox Size
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxBatchChangesizePost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/sandbox/batch/changesize".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set Sandbox Entitlements
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxEntitlementsSetPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/sandbox/entitlements/set";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set Sandbox Entitlements
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxEntitlementsSetPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/sandbox/entitlements/set".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Sandboxes
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/sandbox";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Sandboxes
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/sandbox".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Sandbox
  * 
   * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxNameDelete (String name, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling objectsSandboxNameDelete",
        new ApiException(400, "Missing the required parameter 'name' when calling objectsSandboxNameDelete"));
    }

    // create path and map variables
    String path = "/objects/sandbox/{name}".replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Sandbox
   * 
   * @param name The name of the sandbox vault to delete. This is the name which appears on the My Vaults page.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxNameDelete (String name, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling objectsSandboxNameDelete",
        new ApiException(400, "Missing the required parameter 'name' when calling objectsSandboxNameDelete"));
    }

    // create path and map variables
    String path = "/objects/sandbox/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create or Refresh Sandbox
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/sandbox";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create or Refresh Sandbox
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/sandbox".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Sandbox Snapshot
  * 
   * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxSnapshotApiNameActionsUpdatePost (String apiName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiName' is set
    if (apiName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpdatePost",
        new ApiException(400, "Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpdatePost"));
    }

    // create path and map variables
    String path = "/objects/sandbox/snapshot/{api_name}/actions/update".replaceAll("\\{" + "api_name" + "\\}", apiInvoker.escapeString(apiName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Sandbox Snapshot
   * 
   * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxSnapshotApiNameActionsUpdatePost (String apiName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiName' is set
    if (apiName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpdatePost",
        new ApiException(400, "Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpdatePost"));
    }

    // create path and map variables
    String path = "/objects/sandbox/snapshot/{api_name}/actions/update".replaceAll("\\{format\\}","json").replaceAll("\\{" + "api_name" + "\\}", apiInvoker.escapeString(apiName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Upgrade Sandbox Snapshot
  * 
   * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxSnapshotApiNameActionsUpgradePost (String apiName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiName' is set
    if (apiName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpgradePost",
        new ApiException(400, "Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpgradePost"));
    }

    // create path and map variables
    String path = "/objects/sandbox/snapshot/{api_name}/actions/upgrade".replaceAll("\\{" + "api_name" + "\\}", apiInvoker.escapeString(apiName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Upgrade Sandbox Snapshot
   * 
   * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxSnapshotApiNameActionsUpgradePost (String apiName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiName' is set
    if (apiName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpgradePost",
        new ApiException(400, "Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameActionsUpgradePost"));
    }

    // create path and map variables
    String path = "/objects/sandbox/snapshot/{api_name}/actions/upgrade".replaceAll("\\{format\\}","json").replaceAll("\\{" + "api_name" + "\\}", apiInvoker.escapeString(apiName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Sandbox Snapshot
  * 
   * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxSnapshotApiNameDelete (String apiName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'apiName' is set
    if (apiName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameDelete",
        new ApiException(400, "Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameDelete"));
    }

    // create path and map variables
    String path = "/objects/sandbox/snapshot/{api_name}".replaceAll("\\{" + "api_name" + "\\}", apiInvoker.escapeString(apiName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Sandbox Snapshot
   * 
   * @param apiName The Vault ID of the sandbox. Obtain this from the Retrieve Sandbox Snapshots request.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxSnapshotApiNameDelete (String apiName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'apiName' is set
    if (apiName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameDelete",
        new ApiException(400, "Missing the required parameter 'apiName' when calling objectsSandboxSnapshotApiNameDelete"));
    }

    // create path and map variables
    String path = "/objects/sandbox/snapshot/{api_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "api_name" + "\\}", apiInvoker.escapeString(apiName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Sandbox Snapshots
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxSnapshotGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/sandbox/snapshot";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Sandbox Snapshots
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxSnapshotGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/sandbox/snapshot".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Sandbox Snapshot
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxSnapshotPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/sandbox/snapshot";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Sandbox Snapshot
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxSnapshotPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/sandbox/snapshot".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Refresh Sandbox from Snapshot
  * 
   * @param vaultId The Vault ID of the sandbox to be refreshed.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxVaultIdActionsRefreshPost (String vaultId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vaultId' is set
    if (vaultId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdActionsRefreshPost",
        new ApiException(400, "Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdActionsRefreshPost"));
    }

    // create path and map variables
    String path = "/objects/sandbox/{vault_id}/actions/refresh".replaceAll("\\{" + "vault_id" + "\\}", apiInvoker.escapeString(vaultId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Refresh Sandbox from Snapshot
   * 
   * @param vaultId The Vault ID of the sandbox to be refreshed.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxVaultIdActionsRefreshPost (String vaultId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vaultId' is set
    if (vaultId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdActionsRefreshPost",
        new ApiException(400, "Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdActionsRefreshPost"));
    }

    // create path and map variables
    String path = "/objects/sandbox/{vault_id}/actions/refresh".replaceAll("\\{format\\}","json").replaceAll("\\{" + "vault_id" + "\\}", apiInvoker.escapeString(vaultId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Sandbox Details by ID
  * 
   * @param vaultId 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSandboxVaultIdGet (String vaultId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'vaultId' is set
    if (vaultId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdGet",
        new ApiException(400, "Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdGet"));
    }

    // create path and map variables
    String path = "/objects/sandbox/{vault_id}".replaceAll("\\{" + "vault_id" + "\\}", apiInvoker.escapeString(vaultId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Sandbox Details by ID
   * 
   * @param vaultId    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSandboxVaultIdGet (String vaultId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'vaultId' is set
    if (vaultId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdGet",
        new ApiException(400, "Missing the required parameter 'vaultId' when calling objectsSandboxVaultIdGet"));
    }

    // create path and map variables
    String path = "/objects/sandbox/{vault_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "vault_id" + "\\}", apiInvoker.escapeString(vaultId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Security Policies
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSecuritypoliciesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/securitypolicies";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Security Policies
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSecuritypoliciesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/securitypolicies".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Security Policy
  * 
   * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsSecuritypoliciesSecurityPolicyNameGet (String securityPolicyName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'securityPolicyName' is set
    if (securityPolicyName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'securityPolicyName' when calling objectsSecuritypoliciesSecurityPolicyNameGet",
        new ApiException(400, "Missing the required parameter 'securityPolicyName' when calling objectsSecuritypoliciesSecurityPolicyNameGet"));
    }

    // create path and map variables
    String path = "/objects/securitypolicies/{security_policy_name}".replaceAll("\\{" + "security_policy_name" + "\\}", apiInvoker.escapeString(securityPolicyName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Security Policy
   * 
   * @param securityPolicyName Security policy name__v field value (retrieved from previous request). This is typically a numeric value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsSecuritypoliciesSecurityPolicyNameGet (String securityPolicyName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'securityPolicyName' is set
    if (securityPolicyName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'securityPolicyName' when calling objectsSecuritypoliciesSecurityPolicyNameGet",
        new ApiException(400, "Missing the required parameter 'securityPolicyName' when calling objectsSecuritypoliciesSecurityPolicyNameGet"));
    }

    // create path and map variables
    String path = "/objects/securitypolicies/{security_policy_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "security_policy_name" + "\\}", apiInvoker.escapeString(securityPolicyName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Users
  * 
   * @param vaults Retrieve all users assigned to all Vaults in your domain.
   * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.
   * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersGet (String vaults, String excludeVaultMembership, String excludeAppLicensing, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/users/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "vaults", vaults));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_vault_membership", excludeVaultMembership));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_app_licensing", excludeAppLicensing));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Users
   * 
   * @param vaults Retrieve all users assigned to all Vaults in your domain.   * @param excludeVaultMembership Optional: Set to false to include vault_membership fields. If true or omitted, vault_membership fields are not included in the response.   * @param excludeAppLicensing Optional: Set to false to include app_licensing fields. If true or omitted, app_licensing fields are not included in the response.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersGet (String vaults, String excludeVaultMembership, String excludeAppLicensing, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/users/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "vaults", vaults));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_vault_membership", excludeVaultMembership));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_app_licensing", excludeAppLicensing));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve User
  * 
   * @param id The user id field value. Use the value me to get information for the currently authenticated user.
   * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
   * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersIdGet (String id, String excludeVaultMembership, String excludeAppLicensing, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsUsersIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsUsersIdGet"));
    }

    // create path and map variables
    String path = "/objects/users/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_vault_membership", excludeVaultMembership));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_app_licensing", excludeAppLicensing));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve User
   * 
   * @param id The user id field value. Use the value me to get information for the currently authenticated user.   * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.   * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersIdGet (String id, String excludeVaultMembership, String excludeAppLicensing, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsUsersIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsUsersIdGet"));
    }

    // create path and map variables
    String path = "/objects/users/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_vault_membership", excludeVaultMembership));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_app_licensing", excludeAppLicensing));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve User Permissions
  * 
   * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.
   * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersIdPermissionsGet (String id, String filter, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsUsersIdPermissionsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsUsersIdPermissionsGet"));
    }

    // create path and map variables
    String path = "/objects/users/{id}/permissions".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve User Permissions
   * 
   * @param id The ID of the user. Use the value me to retrieve information for the currently authenticated user.   * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersIdPermissionsGet (String id, String filter, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsUsersIdPermissionsGet",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsUsersIdPermissionsGet"));
    }

    // create path and map variables
    String path = "/objects/users/{id}/permissions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Single User
  * 
   * @param id The user id field value. Use the value me to get information for the currently authenticated user.
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersIdPut (String id, String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsUsersIdPut",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsUsersIdPut"));
    }

    // create path and map variables
    String path = "/objects/users/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Single User
   * 
   * @param id The user id field value. Use the value me to get information for the currently authenticated user.   * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersIdPut (String id, String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling objectsUsersIdPut",
        new ApiException(400, "Missing the required parameter 'id' when calling objectsUsersIdPut"));
    }

    // create path and map variables
    String path = "/objects/users/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Validate Session User
  * 
   * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.
   * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersMeGet (String excludeVaultMembership, String excludeAppLicensing, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/users/me";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_vault_membership", excludeVaultMembership));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_app_licensing", excludeAppLicensing));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Validate Session User
   * 
   * @param excludeVaultMembership Optional: Set to true to omit vault_membership fields. If you don’t need these fields, this may increase performance. If omitted, vault_membership fields are included in the response.   * @param excludeAppLicensing Optional: Set to true to omit app_licensing fields. If you don’t need these fields, this may increase performance. If omitted, app_licensing fields are included in the response.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersMeGet (String excludeVaultMembership, String excludeAppLicensing, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/users/me".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_vault_membership", excludeVaultMembership));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude_app_licensing", excludeAppLicensing));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Change My Password
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersMePasswordPost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/users/me/password";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Change My Password
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersMePasswordPost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/users/me/password".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve My User Permissions
  * 
   * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersMePermissionsGet (String filter, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/users/me/permissions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve My User Permissions
   * 
   * @param filter Filter the results to show only one specific name__v, which is in the format object.{object name}.{object or field}_actions. Wildcards are not supported. See example below.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersMePermissionsGet (String filter, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/users/me/permissions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update My User
  * 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersMePut (String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/users/me";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update My User
   * 
   * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersMePut (String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/users/me".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Single User
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/users";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Single User
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/users".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Multiple Users
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersPut (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/users";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Multiple Users
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersPut (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/users".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Disable User
  * 
   * @param userId The user id field value. 
   * @param domain When true, this disables the user account in all vaults in the domain.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersUserIdDelete (String userId, Boolean domain, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling objectsUsersUserIdDelete",
        new ApiException(400, "Missing the required parameter 'userId' when calling objectsUsersUserIdDelete"));
    }

    // create path and map variables
    String path = "/objects/users/{user_id}".replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "domain", domain));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Disable User
   * 
   * @param userId The user id field value.    * @param domain When true, this disables the user account in all vaults in the domain.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersUserIdDelete (String userId, Boolean domain, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling objectsUsersUserIdDelete",
        new ApiException(400, "Missing the required parameter 'userId' when calling objectsUsersUserIdDelete"));
    }

    // create path and map variables
    String path = "/objects/users/{user_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "domain", domain));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Vault Membership
  * 
   * @param userId The user id field value.
   * @param vaultId The system-managed id field value assigned to each vault in the domain.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsUsersUserIdVaultMembershipVaultIdPut (String userId, String vaultId, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling objectsUsersUserIdVaultMembershipVaultIdPut",
        new ApiException(400, "Missing the required parameter 'userId' when calling objectsUsersUserIdVaultMembershipVaultIdPut"));
    }
    // verify the required parameter 'vaultId' is set
    if (vaultId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vaultId' when calling objectsUsersUserIdVaultMembershipVaultIdPut",
        new ApiException(400, "Missing the required parameter 'vaultId' when calling objectsUsersUserIdVaultMembershipVaultIdPut"));
    }

    // create path and map variables
    String path = "/objects/users/{user_id}/vault_membership/{vault_id}".replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "vault_id" + "\\}", apiInvoker.escapeString(vaultId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Vault Membership
   * 
   * @param userId The user id field value.   * @param vaultId The system-managed id field value assigned to each vault in the domain.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsUsersUserIdVaultMembershipVaultIdPut (String userId, String vaultId, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling objectsUsersUserIdVaultMembershipVaultIdPut",
        new ApiException(400, "Missing the required parameter 'userId' when calling objectsUsersUserIdVaultMembershipVaultIdPut"));
    }
    // verify the required parameter 'vaultId' is set
    if (vaultId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'vaultId' when calling objectsUsersUserIdVaultMembershipVaultIdPut",
        new ApiException(400, "Missing the required parameter 'vaultId' when calling objectsUsersUserIdVaultMembershipVaultIdPut"));
    }

    // create path and map variables
    String path = "/objects/users/{user_id}/vault_membership/{vault_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString())).replaceAll("\\{" + "vault_id" + "\\}", apiInvoker.escapeString(vaultId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Vault Compare
  * 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsVaultActionsComparePost (String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/vault/actions/compare";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Vault Compare
   * 
   * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsVaultActionsComparePost (String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/vault/actions/compare".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Vault Configuration Report
  * 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void objectsVaultActionsConfigreportPost (String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/objects/vault/actions/configreport";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Vault Configuration Report
   * 
   * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void objectsVaultActionsConfigreportPost (String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/objects/vault/actions/configreport".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Component Definition Query
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void queryComponentsPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/query/components";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Component Definition Query
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void queryComponentsPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/query/components".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Next Page URL
  * 
   * @param nextPage 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIDescribeQuery 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void queryNextPagePost (String nextPage, String authorization, String accept, Boolean xVaultAPIDescribeQuery, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'nextPage' is set
    if (nextPage == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nextPage' when calling queryNextPagePost",
        new ApiException(400, "Missing the required parameter 'nextPage' when calling queryNextPagePost"));
    }

    // create path and map variables
    String path = "/query/{next_page}".replaceAll("\\{" + "next_page" + "\\}", apiInvoker.escapeString(nextPage.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-DescribeQuery", ApiInvoker.parameterToString(xVaultAPIDescribeQuery));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Next Page URL
   * 
   * @param nextPage    * @param authorization    * @param accept    * @param xVaultAPIDescribeQuery    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void queryNextPagePost (String nextPage, String authorization, String accept, Boolean xVaultAPIDescribeQuery, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'nextPage' is set
    if (nextPage == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'nextPage' when calling queryNextPagePost",
        new ApiException(400, "Missing the required parameter 'nextPage' when calling queryNextPagePost"));
    }

    // create path and map variables
    String path = "/query/{next_page}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "next_page" + "\\}", apiInvoker.escapeString(nextPage.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-DescribeQuery", ApiInvoker.parameterToString(xVaultAPIDescribeQuery));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Submitting a Query
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIDescribeQuery 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void queryPost (String authorization, String accept, Boolean xVaultAPIDescribeQuery, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/query";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-DescribeQuery", ApiInvoker.parameterToString(xVaultAPIDescribeQuery));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Submitting a Query
   * 
   * @param authorization    * @param accept    * @param xVaultAPIDescribeQuery    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void queryPost (String authorization, String accept, Boolean xVaultAPIDescribeQuery, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/query".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-DescribeQuery", ApiInvoker.parameterToString(xVaultAPIDescribeQuery));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Previous Page URL
  * 
   * @param previousPage 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIDescribeQuery 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void queryPreviousPagePost (String previousPage, String authorization, String accept, Boolean xVaultAPIDescribeQuery, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'previousPage' is set
    if (previousPage == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'previousPage' when calling queryPreviousPagePost",
        new ApiException(400, "Missing the required parameter 'previousPage' when calling queryPreviousPagePost"));
    }

    // create path and map variables
    String path = "/query/{previous_page}".replaceAll("\\{" + "previous_page" + "\\}", apiInvoker.escapeString(previousPage.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-DescribeQuery", ApiInvoker.parameterToString(xVaultAPIDescribeQuery));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Previous Page URL
   * 
   * @param previousPage    * @param authorization    * @param accept    * @param xVaultAPIDescribeQuery    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void queryPreviousPagePost (String previousPage, String authorization, String accept, Boolean xVaultAPIDescribeQuery, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'previousPage' is set
    if (previousPage == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'previousPage' when calling queryPreviousPagePost",
        new ApiException(400, "Missing the required parameter 'previousPage' when calling queryPreviousPagePost"));
    }

    // create path and map variables
    String path = "/query/{previous_page}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "previous_page" + "\\}", apiInvoker.escapeString(previousPage.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-DescribeQuery", ApiInvoker.parameterToString(xVaultAPIDescribeQuery));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Current User with SCIM
  * 
   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2MeGet (String attributes, String excludedAttributes, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/scim/v2/Me";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Current User with SCIM
   * 
   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2MeGet (String attributes, String excludedAttributes, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/scim/v2/Me".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Current User with SCIM
  * 
   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2MePut (String attributes, String excludedAttributes, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/scim/v2/Me";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Current User with SCIM
   * 
   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2MePut (String attributes, String excludedAttributes, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/scim/v2/Me".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All SCIM Resource Types
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2ResourceTypesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/scim/v2/ResourceTypes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All SCIM Resource Types
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2ResourceTypesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/scim/v2/ResourceTypes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Single SCIM Resource Type
  * 
   * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2ResourceTypesTypeGet (String type, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling scimV2ResourceTypesTypeGet",
        new ApiException(400, "Missing the required parameter 'type' when calling scimV2ResourceTypesTypeGet"));
    }

    // create path and map variables
    String path = "/scim/v2/ResourceTypes/{type}".replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Single SCIM Resource Type
   * 
   * @param type A specific resource type. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the id value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2ResourceTypesTypeGet (String type, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling scimV2ResourceTypesTypeGet",
        new ApiException(400, "Missing the required parameter 'type' when calling scimV2ResourceTypesTypeGet"));
    }

    // create path and map variables
    String path = "/scim/v2/ResourceTypes/{type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All SCIM Schema Information
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2SchemasGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/scim/v2/Schemas";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All SCIM Schema Information
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2SchemasGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/scim/v2/Schemas".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Single SCIM Schema Information
  * 
   * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2SchemasIdGet (String id, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling scimV2SchemasIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling scimV2SchemasIdGet"));
    }

    // create path and map variables
    String path = "/scim/v2/Schemas/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Single SCIM Schema Information
   * 
   * @param id The ID of a specific schema. For example, urn:ietf:params:scim:schemas:extension:veevavault:2.0:User.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2SchemasIdGet (String id, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling scimV2SchemasIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling scimV2SchemasIdGet"));
    }

    // create path and map variables
    String path = "/scim/v2/Schemas/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve SCIM Provider
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2ServiceProviderConfigGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/scim/v2/ServiceProviderConfig";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve SCIM Provider
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2ServiceProviderConfigGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/scim/v2/ServiceProviderConfig".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve SCIM Resources
  * 
   * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
   * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
   * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
   * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2TypeGet (String type, String filter, String attributes, String excludedAttributes, String sortBy, String sortOrder, String startIndex, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling scimV2TypeGet",
        new ApiException(400, "Missing the required parameter 'type' when calling scimV2TypeGet"));
    }

    // create path and map variables
    String path = "/scim/v2/{type}".replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortBy", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortOrder", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "startIndex", startIndex));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve SCIM Resources
   * 
   * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.   * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.   * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage   * @param sortOrder Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.   * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2TypeGet (String type, String filter, String attributes, String excludedAttributes, String sortBy, String sortOrder, String startIndex, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling scimV2TypeGet",
        new ApiException(400, "Missing the required parameter 'type' when calling scimV2TypeGet"));
    }

    // create path and map variables
    String path = "/scim/v2/{type}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortBy", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortOrder", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "startIndex", startIndex));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Single SCIM Resource
  * 
   * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.
   * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.
   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2TypeIdGet (String type, String id, String attributes, String excludedAttributes, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling scimV2TypeIdGet",
        new ApiException(400, "Missing the required parameter 'type' when calling scimV2TypeIdGet"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling scimV2TypeIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling scimV2TypeIdGet"));
    }

    // create path and map variables
    String path = "/scim/v2/{type}/{id}".replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Single SCIM Resource
   * 
   * @param type The resource type to retrieve. You can retrieve all available types from the Retrieve All SCIM Resource Types endpoint, where the value for this parameter is the endpoint value.   * @param id The ID of the resource to retrieve. You can retrieve all resource IDs from a particular resource type with the Retrieve SCIM Resources endpoint. For example, business_admin__v.   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2TypeIdGet (String type, String id, String attributes, String excludedAttributes, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling scimV2TypeIdGet",
        new ApiException(400, "Missing the required parameter 'type' when calling scimV2TypeIdGet"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling scimV2TypeIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling scimV2TypeIdGet"));
    }

    // create path and map variables
    String path = "/scim/v2/{type}/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "type" + "\\}", apiInvoker.escapeString(type.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Users with SCIM
  * 
   * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage
   * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.
   * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.
   * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2UsersGet (String filter, String attributes, String excludedAttributes, String sortBy, String sortOrder, String count, String startIndex, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/scim/v2/Users";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortBy", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortOrder", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "startIndex", startIndex));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Users with SCIM
   * 
   * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.   * @param sortBy Optional: Specify an attribute or sub-attribute to order the response. For example, you can sort by the displayName attribute, or the name.familyName sub-attribute. If omitted, the response is sorted by id. Note that the following attributes are not supported: securityPolicy securityProfile locale preferredLanguage   * @param sortOrder Optional: Specify the order in which the sortBy parameter is applied. Allowed values are ascending or descending. If omitted, defaults to ascending.   * @param count Optional: Specify the number of query results per page, for example, 10. Negative values are treated as 0, and 0 returns no results except for totalResults. If omitted, defaults to 1000.   * @param startIndex Optional: Specify the index of the first result. For example, 10 would omit the first 9 results and begin on result 10. Omission, negative values, and 0 is treated as 1.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2UsersGet (String filter, String attributes, String excludedAttributes, String sortBy, String sortOrder, String count, String startIndex, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/scim/v2/Users".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortBy", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sortOrder", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "startIndex", startIndex));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Single User with SCIM
  * 
   * @param id The id of the user you wish to update.
   * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.
   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.
   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2UsersIdGet (String id, String filter, String attributes, String excludedAttributes, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling scimV2UsersIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling scimV2UsersIdGet"));
    }

    // create path and map variables
    String path = "/scim/v2/Users/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Single User with SCIM
   * 
   * @param id The id of the user you wish to update.   * @param filter Optional: Filter for a specific attribute value. Must be in the format {attribute} eq \&quot;{value}\&quot;. For example, to filter for a particular user name, userName eq \&quot;john\&quot;. Complex expressions are not supported, and eq is the only supported operator.   * @param attributes Optional: Include specified attributes only. Enter multiple values in a comma separated list. For example, to include only user name and email in the response, attributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned.   * @param excludedAttributes Optional: Exclude specific attributes from the response. Enter multiple values in a comma separated list. For example, to exclude user name and email from the response, excludedAttributes&#x3D;userName,emails. Note that the schemas and id attributes are always returned and cannot be excluded.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2UsersIdGet (String id, String filter, String attributes, String excludedAttributes, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling scimV2UsersIdGet",
        new ApiException(400, "Missing the required parameter 'id' when calling scimV2UsersIdGet"));
    }

    // create path and map variables
    String path = "/scim/v2/Users/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attributes", attributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excludedAttributes", excludedAttributes));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update User with SCIM
  * 
   * @param id The id of the user you wish to update.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2UsersIdPut (String id, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling scimV2UsersIdPut",
        new ApiException(400, "Missing the required parameter 'id' when calling scimV2UsersIdPut"));
    }

    // create path and map variables
    String path = "/scim/v2/Users/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update User with SCIM
   * 
   * @param id The id of the user you wish to update.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2UsersIdPut (String id, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling scimV2UsersIdPut",
        new ApiException(400, "Missing the required parameter 'id' when calling scimV2UsersIdPut"));
    }

    // create path and map variables
    String path = "/scim/v2/Users/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create User with SCIM
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void scimV2UsersPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/scim/v2/Users";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create User with SCIM
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void scimV2UsersPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/scim/v2/Users".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Signing Certificate
  * 
   * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesCertificateCertIdGet (String certId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'certId' is set
    if (certId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'certId' when calling servicesCertificateCertIdGet",
        new ApiException(400, "Missing the required parameter 'certId' when calling servicesCertificateCertIdGet"));
    }

    // create path and map variables
    String path = "/services/certificate/{cert_id}".replaceAll("\\{" + "cert_id" + "\\}", apiInvoker.escapeString(certId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Signing Certificate
   * 
   * @param certId The cert_id is provided in each Spark message in the X-VaultAPISignature-CertificateId header.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesCertificateCertIdGet (String certId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'certId' is set
    if (certId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'certId' when calling servicesCertificateCertIdGet",
        new ApiException(400, "Missing the required parameter 'certId' when calling servicesCertificateCertIdGet"));
    }

    // create path and map variables
    String path = "/services/certificate/{cert_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cert_id" + "\\}", apiInvoker.escapeString(certId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Disable Configuration Mode
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesConfigurationModeActionsDisablePost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/configuration_mode/actions/disable";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Disable Configuration Mode
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesConfigurationModeActionsDisablePost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/configuration_mode/actions/disable".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Enable Configuration Mode
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesConfigurationModeActionsEnablePost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/configuration_mode/actions/enable";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Enable Configuration Mode
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesConfigurationModeActionsEnablePost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/configuration_mode/actions/enable".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Available Direct Data Files
  * 
   * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.
   * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.
   * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesDirectdataFilesGet (String extractType, Integer startTime, Integer stopTime, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/directdata/files";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "extract_type", extractType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_time", startTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stop_time", stopTime));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Available Direct Data Files
   * 
   * @param extractType The Direct Data file type: incremental_directdata, full_directdata, or log_directdata. If omitted, returns all files.   * @param startTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 7AM on January 15, 2024 would use 2024-01-15T07:00:00Z. If omitted, defaults to the Vault’s creation date and time.   * @param stopTime Specify a time in YYYY-MM-DDTHH:MM:SSZ format. For example, 9AM on January 15, 2024 would use 2024-01-15T09:00:00Z. If omitted, defaults to today’s date and current time.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesDirectdataFilesGet (String extractType, Integer startTime, Integer stopTime, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/directdata/files".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "extract_type", extractType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_time", startTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stop_time", stopTime));

    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Direct Data File
  * 
   * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesDirectdataFilesNameGet (String name, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling servicesDirectdataFilesNameGet",
        new ApiException(400, "Missing the required parameter 'name' when calling servicesDirectdataFilesNameGet"));
    }

    // create path and map variables
    String path = "/services/directdata/files/{name}".replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Direct Data File
   * 
   * @param name The name of the Direct Data file part. Obtain this from the Retrieve Available Direct Data Files request. For example, 146478-20240213-0000-F.001.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesDirectdataFilesNameGet (String name, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling servicesDirectdataFilesNameGet",
        new ApiException(400, "Missing the required parameter 'name' when calling servicesDirectdataFilesNameGet"));
    }

    // create path and map variables
    String path = "/services/directdata/files/{name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "name" + "\\}", apiInvoker.escapeString(name.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Item Content
  * 
   * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
   * @param authorization 
   * @param accept 
   * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingItemsContentItemGet (String item, String authorization, String accept, String range, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling servicesFileStagingItemsContentItemGet",
        new ApiException(400, "Missing the required parameter 'item' when calling servicesFileStagingItemsContentItemGet"));
    }

    // create path and map variables
    String path = "/services/file_staging/items/content/{item}".replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Range", ApiInvoker.parameterToString(range));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Item Content
   * 
   * @param item The absolute path to a file or folder. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.   * @param authorization    * @param accept    * @param range Optional: Specifies a partial range of bytes to include in the upload. Maximum 50 MB. Must be in the format &#x60;bytes&#x3D;{min}-{max}&#x60;. For example, &#x60;bytes&#x3D;0-1000&#x60;.   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingItemsContentItemGet (String item, String authorization, String accept, String range, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling servicesFileStagingItemsContentItemGet",
        new ApiException(400, "Missing the required parameter 'item' when calling servicesFileStagingItemsContentItemGet"));
    }

    // create path and map variables
    String path = "/services/file_staging/items/content/{item}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Range", ApiInvoker.parameterToString(range));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete File or Folder
  * 
   * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
   * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingItemsItemDelete (String item, String recursive, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling servicesFileStagingItemsItemDelete",
        new ApiException(400, "Missing the required parameter 'item' when calling servicesFileStagingItemsItemDelete"));
    }

    // create path and map variables
    String path = "/services/file_staging/items/{item}".replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "recursive", recursive));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete File or Folder
   * 
   * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.   * @param recursive Applicable to deleting folders only. If true, the request will delete the contents of a folder and all subfolders. The default is false.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingItemsItemDelete (String item, String recursive, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling servicesFileStagingItemsItemDelete",
        new ApiException(400, "Missing the required parameter 'item' when calling servicesFileStagingItemsItemDelete"));
    }

    // create path and map variables
    String path = "/services/file_staging/items/{item}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "recursive", recursive));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Items at a Path
  * 
   * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
   * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.
   * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
   * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingItemsItemGet (String item, String recursive, String limit, String formatResult, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling servicesFileStagingItemsItemGet",
        new ApiException(400, "Missing the required parameter 'item' when calling servicesFileStagingItemsItemGet"));
    }

    // create path and map variables
    String path = "/services/file_staging/items/{item}".replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "recursive", recursive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Items at a Path
   * 
   * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.   * @param recursive If true, the response will contain the contents of all subfolders. If not specified, the default value is false.   * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.   * @param formatResult If set to csv, the response includes a job_id. Use the Job ID value to retrieve the status and results of the request.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingItemsItemGet (String item, String recursive, String limit, String formatResult, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling servicesFileStagingItemsItemGet",
        new ApiException(400, "Missing the required parameter 'item' when calling servicesFileStagingItemsItemGet"));
    }

    // create path and map variables
    String path = "/services/file_staging/items/{item}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "recursive", recursive));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Folder or File
  * 
   * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingItemsItemPut (String item, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling servicesFileStagingItemsItemPut",
        new ApiException(400, "Missing the required parameter 'item' when calling servicesFileStagingItemsItemPut"));
    }

    // create path and map variables
    String path = "/services/file_staging/items/{item}".replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Folder or File
   * 
   * @param item The absolute path to the file or folder to delete. This path is specific to the authenticated user. Admin users can access the root directory. All other users can only access their own user directory.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingItemsItemPut (String item, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling servicesFileStagingItemsItemPut",
        new ApiException(400, "Missing the required parameter 'item' when calling servicesFileStagingItemsItemPut"));
    }

    // create path and map variables
    String path = "/services/file_staging/items/{item}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Folder or File
  * 
   * @param authorization 
   * @param accept 
   * @param contentMD5 Optional: The MD5 checksum of the file being uploaded.
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingItemsPost (String authorization, String accept, String contentMD5, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/file_staging/items";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-MD5", ApiInvoker.parameterToString(contentMD5));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Folder or File
   * 
   * @param authorization    * @param accept    * @param contentMD5 Optional: The MD5 checksum of the file being uploaded.   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingItemsPost (String authorization, String accept, String contentMD5, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/file_staging/items".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-MD5", ApiInvoker.parameterToString(contentMD5));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List Upload Sessions
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingUploadGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/file_staging/upload/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List Upload Sessions
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingUploadGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/file_staging/upload/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Resumable Upload Session
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingUploadPost (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/file_staging/upload";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Resumable Upload Session
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingUploadPost (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/file_staging/upload".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Abort Upload Session
  * 
   * @param uploadSessionId 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingUploadUploadSessionIdDelete (String uploadSessionId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdDelete",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdDelete"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}".replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Abort Upload Session
   * 
   * @param uploadSessionId    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingUploadUploadSessionIdDelete (String uploadSessionId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdDelete",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdDelete"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get Upload Session Details
  * 
   * @param uploadSessionId 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingUploadUploadSessionIdGet (String uploadSessionId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdGet",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdGet"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}".replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get Upload Session Details
   * 
   * @param uploadSessionId    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingUploadUploadSessionIdGet (String uploadSessionId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdGet",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdGet"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List File Parts Uploaded to Session
  * 
   * @param uploadSessionId 
   * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingUploadUploadSessionIdPartsGet (String uploadSessionId, String limit, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPartsGet",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPartsGet"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}/parts".replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List File Parts Uploaded to Session
   * 
   * @param uploadSessionId    * @param limit Optional: The maximum number of items per page in the response. This can be any value between 1 and 1000. If omitted, the default value is 1000.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingUploadUploadSessionIdPartsGet (String uploadSessionId, String limit, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPartsGet",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPartsGet"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}/parts".replaceAll("\\{format\\}","json").replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Commit Upload Session
  * 
   * @param uploadSessionId 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingUploadUploadSessionIdPost (String uploadSessionId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPost",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPost"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}".replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Commit Upload Session
   * 
   * @param uploadSessionId    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingUploadUploadSessionIdPost (String uploadSessionId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPost",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPost"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Upload to a Session
  * 
   * @param uploadSessionId 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.
   * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded.
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesFileStagingUploadUploadSessionIdPut (String uploadSessionId, String authorization, String accept, String contentType, String xVaultAPIFilePartNumber, String contentMD5, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPut",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPut"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}".replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-FilePartNumber", ApiInvoker.parameterToString(xVaultAPIFilePartNumber));
    headerParams.put("Content-MD5", ApiInvoker.parameterToString(contentMD5));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Upload to a Session
   * 
   * @param uploadSessionId    * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIFilePartNumber The part number, which uniquely identifies a file part and defines its position within the file as a whole. If a part is uploaded using a part number that has already been used, Vault overwrites the previously uploaded file part. You must upload parts in numerical order. For example, you cannot upload part 3 without first uploading parts 1 and 2.   * @param contentMD5 Optional: The MD5 checksum of the file part being uploaded.   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesFileStagingUploadUploadSessionIdPut (String uploadSessionId, String authorization, String accept, String contentType, String xVaultAPIFilePartNumber, String contentMD5, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uploadSessionId' is set
    if (uploadSessionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPut",
        new ApiException(400, "Missing the required parameter 'uploadSessionId' when calling servicesFileStagingUploadUploadSessionIdPut"));
    }

    // create path and map variables
    String path = "/services/file_staging/upload/{upload_session_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "upload_session_id" + "\\}", apiInvoker.escapeString(uploadSessionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-FilePartNumber", ApiInvoker.parameterToString(xVaultAPIFilePartNumber));
    headerParams.put("Content-MD5", ApiInvoker.parameterToString(contentMD5));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Job Histories
  * 
   * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
   * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
   * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.
   * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
   * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesJobsHistoriesGet (String startDate, String endDate, String status, String limit, String offset, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/jobs/histories";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Job Histories
   * 
   * @param startDate Sets the date to start retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.   * @param endDate Sets the date to end retrieving completed jobs, in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.   * @param status Filter to only retrieve jobs in a certain status. Allowed values are success, errors_encountered, failed_to_run, missed_schedule, cancelled. If omitted, retrieves all statuses.   * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.   * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job history returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesJobsHistoriesGet (String startDate, String endDate, String status, String limit, String offset, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/jobs/histories".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Import Bulk Translation File Job Errors
  * 
   * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesJobsJobIdErrorsGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsJobIdErrorsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsJobIdErrorsGet"));
    }

    // create path and map variables
    String path = "/services/jobs/{job_id}/errors".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Import Bulk Translation File Job Errors
   * 
   * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesJobsJobIdErrorsGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsJobIdErrorsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsJobIdErrorsGet"));
    }

    // create path and map variables
    String path = "/services/jobs/{job_id}/errors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Job Status
  * 
   * @param jobId The ID of the job, returned from the original job request.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesJobsJobIdGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsJobIdGet"));
    }

    // create path and map variables
    String path = "/services/jobs/{job_id}".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Job Status
   * 
   * @param jobId The ID of the job, returned from the original job request.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesJobsJobIdGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsJobIdGet"));
    }

    // create path and map variables
    String path = "/services/jobs/{job_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Import Bulk Translation File Job Summary
  * 
   * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesJobsJobIdSummaryGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsJobIdSummaryGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsJobIdSummaryGet"));
    }

    // create path and map variables
    String path = "/services/jobs/{job_id}/summary".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Import Bulk Translation File Job Summary
   * 
   * @param jobId The id value of the requested import job. This was returned from the Import Bulk Translation File request.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesJobsJobIdSummaryGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsJobIdSummaryGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsJobIdSummaryGet"));
    }

    // create path and map variables
    String path = "/services/jobs/{job_id}/summary".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve SDK Job Tasks
  * 
   * @param jobId The ID of the SDK job, returned from the original job request.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesJobsJobIdTasksGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsJobIdTasksGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsJobIdTasksGet"));
    }

    // create path and map variables
    String path = "/services/jobs/{job_id}/tasks".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve SDK Job Tasks
   * 
   * @param jobId The ID of the SDK job, returned from the original job request.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesJobsJobIdTasksGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsJobIdTasksGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsJobIdTasksGet"));
    }

    // create path and map variables
    String path = "/services/jobs/{job_id}/tasks".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Job Monitors
  * 
   * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.
   * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.
   * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.
   * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.
   * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesJobsMonitorsGet (String startDate, String endDate, String status, String limit, String offset, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/jobs/monitors";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Job Monitors
   * 
   * @param startDate Sets the date to start retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the first completed job.   * @param endDate Sets the date to end retrieving uncompleted jobs, based on the date and time the job instance was created. Value must be in the format YYYY-MM-DDTHH:MM:SSZ. For example, for 7AM on January 15, 2016, use 2016-01-15T07:00:00Z. If omitted, defaults to the current date and time.   * @param status Filter to only retrieve jobs in a certain status. Allowed values are scheduled, queued, running. If omitted, retrieves all statuses.   * @param limit Paginate the results by specifying the maximum number of jobs per page in the response. This can be any value between 1 and 200. If omitted, defaults to 50.   * @param offset Paginate the results displayed per page by specifying the amount of offset from the first job instance returned. If omitted, defaults to 0. If you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesJobsMonitorsGet (String startDate, String endDate, String status, String limit, String offset, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/jobs/monitors".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Start Job
  * 
   * @param jobId The ID of the scheduled job instance to start.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesJobsStartNowJobIdPost (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsStartNowJobIdPost",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsStartNowJobIdPost"));
    }

    // create path and map variables
    String path = "/services/jobs/start_now/{job_id}".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Start Job
   * 
   * @param jobId The ID of the scheduled job instance to start.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesJobsStartNowJobIdPost (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesJobsStartNowJobIdPost",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesJobsStartNowJobIdPost"));
    }

    // create path and map variables
    String path = "/services/jobs/start_now/{job_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Extract Data Files
  * 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesLoaderExtractPost (String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/loader/extract";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Extract Data Files
   * 
   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesLoaderExtractPost (String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/loader/extract".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Load Failure Log Results
  * 
   * @param jobId The id value of the requested extract job.
   * @param taskId The id value of the requested extract task.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesLoaderJobIdTasksTaskIdFailurelogGet (String jobId, String taskId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet"));
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet"));
    }

    // create path and map variables
    String path = "/services/loader/{job_id}/tasks/{task_id}/failurelog".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString())).replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Load Failure Log Results
   * 
   * @param jobId The id value of the requested extract job.   * @param taskId The id value of the requested extract task.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesLoaderJobIdTasksTaskIdFailurelogGet (String jobId, String taskId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet"));
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdFailurelogGet"));
    }

    // create path and map variables
    String path = "/services/loader/{job_id}/tasks/{task_id}/failurelog".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString())).replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Loader Extract Results
  * 
   * @param jobId The id value of the requested extract job.
   * @param taskId The id value of the requested extract task.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesLoaderJobIdTasksTaskIdResultsGet (String jobId, String taskId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsGet"));
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsGet"));
    }

    // create path and map variables
    String path = "/services/loader/{job_id}/tasks/{task_id}/results".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString())).replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Loader Extract Results
   * 
   * @param jobId The id value of the requested extract job.   * @param taskId The id value of the requested extract task.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesLoaderJobIdTasksTaskIdResultsGet (String jobId, String taskId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsGet"));
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsGet"));
    }

    // create path and map variables
    String path = "/services/loader/{job_id}/tasks/{task_id}/results".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString())).replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Loader Extract Renditions Results
  * 
   * @param jobId The id value of the requested extract job.
   * @param taskId The id value of the requested extract task.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesLoaderJobIdTasksTaskIdResultsRenditionsGet (String jobId, String taskId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet"));
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet"));
    }

    // create path and map variables
    String path = "/services/loader/{job_id}/tasks/{task_id}/results/renditions".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString())).replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Loader Extract Renditions Results
   * 
   * @param jobId The id value of the requested extract job.   * @param taskId The id value of the requested extract task.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesLoaderJobIdTasksTaskIdResultsRenditionsGet (String jobId, String taskId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet"));
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdResultsRenditionsGet"));
    }

    // create path and map variables
    String path = "/services/loader/{job_id}/tasks/{task_id}/results/renditions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString())).replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Load Success Log Results
  * 
   * @param jobId The id value of the requested extract job.
   * @param taskId The id value of the requested extract task.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesLoaderJobIdTasksTaskIdSuccesslogGet (String jobId, String taskId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet"));
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet"));
    }

    // create path and map variables
    String path = "/services/loader/{job_id}/tasks/{task_id}/successlog".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString())).replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Load Success Log Results
   * 
   * @param jobId The id value of the requested extract job.   * @param taskId The id value of the requested extract task.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesLoaderJobIdTasksTaskIdSuccesslogGet (String jobId, String taskId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet"));
    }
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet",
        new ApiException(400, "Missing the required parameter 'taskId' when calling servicesLoaderJobIdTasksTaskIdSuccesslogGet"));
    }

    // create path and map variables
    String path = "/services/loader/{job_id}/tasks/{task_id}/successlog".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString())).replaceAll("\\{" + "task_id" + "\\}", apiInvoker.escapeString(taskId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Load Data Objects
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesLoaderLoadPost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/loader/load";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Load Data Objects
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesLoaderLoadPost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/loader/load".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Validate Package
  * 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesPackageActionsValidatePost (String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/package/actions/validate";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Validate Package
   * 
   * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesPackageActionsValidatePost (String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/package/actions/validate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Export Package
  * 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesPackagePost (String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/package";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Export Package
   * 
   * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesPackagePost (String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/package".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Import Package
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesPackagePut (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/package";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Import Package
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesPackagePut (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/package".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Queues
  * 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesQueuesGet (String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/services/queues";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Queues
   * 
   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesQueuesGet (String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/services/queues".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Disable Delivery
  * 
   * @param queueName The name of a specific Queue.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesQueuesQueueNameActionsDisableDeliveryPut (String queueName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsDisableDeliveryPut",
        new ApiException(400, "Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsDisableDeliveryPut"));
    }

    // create path and map variables
    String path = "/services/queues/{queue_name}/actions/disable_delivery".replaceAll("\\{" + "queue_name" + "\\}", apiInvoker.escapeString(queueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Disable Delivery
   * 
   * @param queueName The name of a specific Queue.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesQueuesQueueNameActionsDisableDeliveryPut (String queueName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsDisableDeliveryPut",
        new ApiException(400, "Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsDisableDeliveryPut"));
    }

    // create path and map variables
    String path = "/services/queues/{queue_name}/actions/disable_delivery".replaceAll("\\{format\\}","json").replaceAll("\\{" + "queue_name" + "\\}", apiInvoker.escapeString(queueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Enable Delivery
  * 
   * @param queueName The name of a specific Queue.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesQueuesQueueNameActionsEnableDeliveryPut (String queueName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsEnableDeliveryPut",
        new ApiException(400, "Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsEnableDeliveryPut"));
    }

    // create path and map variables
    String path = "/services/queues/{queue_name}/actions/enable_delivery".replaceAll("\\{" + "queue_name" + "\\}", apiInvoker.escapeString(queueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Enable Delivery
   * 
   * @param queueName The name of a specific Queue.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesQueuesQueueNameActionsEnableDeliveryPut (String queueName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsEnableDeliveryPut",
        new ApiException(400, "Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsEnableDeliveryPut"));
    }

    // create path and map variables
    String path = "/services/queues/{queue_name}/actions/enable_delivery".replaceAll("\\{format\\}","json").replaceAll("\\{" + "queue_name" + "\\}", apiInvoker.escapeString(queueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Reset Queue
  * 
   * @param queueName The name of a specific Queue.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesQueuesQueueNameActionsResetPut (String queueName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsResetPut",
        new ApiException(400, "Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsResetPut"));
    }

    // create path and map variables
    String path = "/services/queues/{queue_name}/actions/reset".replaceAll("\\{" + "queue_name" + "\\}", apiInvoker.escapeString(queueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Reset Queue
   * 
   * @param queueName The name of a specific Queue.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesQueuesQueueNameActionsResetPut (String queueName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsResetPut",
        new ApiException(400, "Missing the required parameter 'queueName' when calling servicesQueuesQueueNameActionsResetPut"));
    }

    // create path and map variables
    String path = "/services/queues/{queue_name}/actions/reset".replaceAll("\\{format\\}","json").replaceAll("\\{" + "queue_name" + "\\}", apiInvoker.escapeString(queueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Queue Status
  * 
   * @param queueName The name of a specific queue. For example, queue__c.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesQueuesQueueNameGet (String queueName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameGet",
        new ApiException(400, "Missing the required parameter 'queueName' when calling servicesQueuesQueueNameGet"));
    }

    // create path and map variables
    String path = "/services/queues/{queue_name}".replaceAll("\\{" + "queue_name" + "\\}", apiInvoker.escapeString(queueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Queue Status
   * 
   * @param queueName The name of a specific queue. For example, queue__c.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesQueuesQueueNameGet (String queueName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'queueName' is set
    if (queueName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queueName' when calling servicesQueuesQueueNameGet",
        new ApiException(400, "Missing the required parameter 'queueName' when calling servicesQueuesQueueNameGet"));
    }

    // create path and map variables
    String path = "/services/queues/{queue_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "queue_name" + "\\}", apiInvoker.escapeString(queueName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Validate Imported Package
  * 
   * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void servicesVobjectVaultPackageVPackageIdActionsValidatePost (String packageId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'packageId' is set
    if (packageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'packageId' when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost",
        new ApiException(400, "Missing the required parameter 'packageId' when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost"));
    }

    // create path and map variables
    String path = "/services/vobject/vault_package__v/{package_id}/actions/validate".replaceAll("\\{" + "package_id" + "\\}", apiInvoker.escapeString(packageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Validate Imported Package
   * 
   * @param packageId The ID of the package to validate. You can find this in the API response of a package import, or in the URL of package in the Vault UI.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void servicesVobjectVaultPackageVPackageIdActionsValidatePost (String packageId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'packageId' is set
    if (packageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'packageId' when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost",
        new ApiException(400, "Missing the required parameter 'packageId' when calling servicesVobjectVaultPackageVPackageIdActionsValidatePost"));
    }

    // create path and map variables
    String path = "/services/vobject/vault_package__v/{package_id}/actions/validate".replaceAll("\\{format\\}","json").replaceAll("\\{" + "package_id" + "\\}", apiInvoker.escapeString(packageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * End Session
  * 
   * @param accept 
   * @param authorization The Vault sessionId to end.
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void sessionDelete (String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/session";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * End Session
   * 
   * @param accept    * @param authorization The Vault sessionId to end.   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void sessionDelete (String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/session".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Single Client Code Distribution
  * 
   * @param distributionName The name attribute of the client code distribution to download.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void uicodeDistributionsDistributionNameCodeGet (String distributionName, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'distributionName' is set
    if (distributionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameCodeGet",
        new ApiException(400, "Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameCodeGet"));
    }

    // create path and map variables
    String path = "/uicode/distributions/{distribution_name}/code".replaceAll("\\{" + "distribution_name" + "\\}", apiInvoker.escapeString(distributionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Single Client Code Distribution
   * 
   * @param distributionName The name attribute of the client code distribution to download.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void uicodeDistributionsDistributionNameCodeGet (String distributionName, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'distributionName' is set
    if (distributionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameCodeGet",
        new ApiException(400, "Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameCodeGet"));
    }

    // create path and map variables
    String path = "/uicode/distributions/{distribution_name}/code".replaceAll("\\{format\\}","json").replaceAll("\\{" + "distribution_name" + "\\}", apiInvoker.escapeString(distributionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Single Client Code Distribution
  * 
   * @param distributionName The name attribute of the client code distribution to delete.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void uicodeDistributionsDistributionNameDelete (String distributionName, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'distributionName' is set
    if (distributionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameDelete",
        new ApiException(400, "Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameDelete"));
    }

    // create path and map variables
    String path = "/uicode/distributions/{distribution_name}".replaceAll("\\{" + "distribution_name" + "\\}", apiInvoker.escapeString(distributionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Single Client Code Distribution
   * 
   * @param distributionName The name attribute of the client code distribution to delete.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void uicodeDistributionsDistributionNameDelete (String distributionName, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'distributionName' is set
    if (distributionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameDelete",
        new ApiException(400, "Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameDelete"));
    }

    // create path and map variables
    String path = "/uicode/distributions/{distribution_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "distribution_name" + "\\}", apiInvoker.escapeString(distributionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Single Client Code Distribution Metadata
  * 
   * @param distributionName The name attribute of the client code distribution to delete.
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void uicodeDistributionsDistributionNameGet (String distributionName, String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'distributionName' is set
    if (distributionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameGet",
        new ApiException(400, "Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameGet"));
    }

    // create path and map variables
    String path = "/uicode/distributions/{distribution_name}".replaceAll("\\{" + "distribution_name" + "\\}", apiInvoker.escapeString(distributionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Single Client Code Distribution Metadata
   * 
   * @param distributionName The name attribute of the client code distribution to delete.   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void uicodeDistributionsDistributionNameGet (String distributionName, String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'distributionName' is set
    if (distributionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameGet",
        new ApiException(400, "Missing the required parameter 'distributionName' when calling uicodeDistributionsDistributionNameGet"));
    }

    // create path and map variables
    String path = "/uicode/distributions/{distribution_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "distribution_name" + "\\}", apiInvoker.escapeString(distributionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve All Client Code Distribution Metadata
  * 
   * @param accept 
   * @param authorization 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void uicodeDistributionsGet (String accept, String authorization, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/uicode/distributions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve All Client Code Distribution Metadata
   * 
   * @param accept    * @param authorization    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void uicodeDistributionsGet (String accept, String authorization, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/uicode/distributions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Add or Replace Single Client Code Distribution
  * 
   * @param accept 
   * @param authorization 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void uicodeDistributionsPost (String accept, String authorization, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/uicode/distributions";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add or Replace Single Client Code Distribution
   * 
   * @param accept    * @param authorization    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void uicodeDistributionsPost (String accept, String authorization, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/uicode/distributions".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deploy Package
  * 
   * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectVaultPackageVPackageIdActionsDeployPost (String packageId, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'packageId' is set
    if (packageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployPost",
        new ApiException(400, "Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployPost"));
    }

    // create path and map variables
    String path = "/vobject/vault_package__v/{package_id}/actions/deploy".replaceAll("\\{" + "package_id" + "\\}", apiInvoker.escapeString(packageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deploy Package
   * 
   * @param packageId The id field value of the vault_package__v object record used for deployment. See Import Package.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectVaultPackageVPackageIdActionsDeployPost (String packageId, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'packageId' is set
    if (packageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployPost",
        new ApiException(400, "Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployPost"));
    }

    // create path and map variables
    String path = "/vobject/vault_package__v/{package_id}/actions/deploy".replaceAll("\\{format\\}","json").replaceAll("\\{" + "package_id" + "\\}", apiInvoker.escapeString(packageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Package Deploy Results
  * 
   * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectVaultPackageVPackageIdActionsDeployResultsGet (String packageId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'packageId' is set
    if (packageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet",
        new ApiException(400, "Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet"));
    }

    // create path and map variables
    String path = "/vobject/vault_package__v/{package_id}/actions/deploy/results".replaceAll("\\{" + "package_id" + "\\}", apiInvoker.escapeString(packageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Package Deploy Results
   * 
   * @param packageId The id field value of the vault_package__v object record used for deployment. See Deploy Package.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectVaultPackageVPackageIdActionsDeployResultsGet (String packageId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'packageId' is set
    if (packageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet",
        new ApiException(400, "Missing the required parameter 'packageId' when calling vobjectVaultPackageVPackageIdActionsDeployResultsGet"));
    }

    // create path and map variables
    String path = "/vobject/vault_package__v/{package_id}/actions/deploy/results".replaceAll("\\{format\\}","json").replaceAll("\\{" + "package_id" + "\\}", apiInvoker.escapeString(packageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Results of Cascade Delete Job
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param jobStatus 
   * @param jobId 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet (String objectName, String jobStatus, String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet"));
    }
    // verify the required parameter 'jobStatus' is set
    if (jobStatus == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobStatus' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobStatus' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet"));
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet"));
    }

    // create path and map variables
    String path = "/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "job_status" + "\\}", apiInvoker.escapeString(jobStatus.toString())).replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Results of Cascade Delete Job
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param jobStatus    * @param jobId    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet (String objectName, String jobStatus, String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet"));
    }
    // verify the required parameter 'jobStatus' is set
    if (jobStatus == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobStatus' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobStatus' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet"));
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsCascadedeleteResultsObjectNameJobStatusJobIdGet"));
    }

    // create path and map variables
    String path = "/vobjects/cascadedelete/results/{object_name}/{job_status}/{job_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "job_status" + "\\}", apiInvoker.escapeString(jobStatus.toString())).replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Results of Deep Copy Job
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param jobStatus The ID of the job, retrieved from the response of the job request.
   * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet (String objectName, String jobStatus, String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet"));
    }
    // verify the required parameter 'jobStatus' is set
    if (jobStatus == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobStatus' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobStatus' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet"));
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet"));
    }

    // create path and map variables
    String path = "/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "job_status" + "\\}", apiInvoker.escapeString(jobStatus.toString())).replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Results of Deep Copy Job
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param jobStatus The ID of the job, retrieved from the response of the job request.   * @param jobId Possible values are success or failure. Find if your job succeeded or failed by retrieving the job status.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet (String objectName, String jobStatus, String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet"));
    }
    // verify the required parameter 'jobStatus' is set
    if (jobStatus == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobStatus' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobStatus' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet"));
    }
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsDeepcopyResultsObjectNameJobStatusJobIdGet"));
    }

    // create path and map variables
    String path = "/vobjects/deepcopy/results/{object_name}/{job_status}/{job_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "job_status" + "\\}", apiInvoker.escapeString(jobStatus.toString())).replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a Placeholder from an EDL Item
  * 
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsEdlItemVActionsCreateplaceholderPost (String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/vobjects/edl_item__v/actions/createplaceholder";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a Placeholder from an EDL Item
   * 
   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsEdlItemVActionsCreateplaceholderPost (String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/vobjects/edl_item__v/actions/createplaceholder".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Merge Records Job Log
  * 
   * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsMergesJobIdLogGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdLogGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsMergesJobIdLogGet"));
    }

    // create path and map variables
    String path = "/vobjects/merges/{job_id}/log".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Merge Records Job Log
   * 
   * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsMergesJobIdLogGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdLogGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsMergesJobIdLogGet"));
    }

    // create path and map variables
    String path = "/vobjects/merges/{job_id}/log".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Record Merge Results
  * 
   * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsMergesJobIdResultsGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsMergesJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/vobjects/merges/{job_id}/results".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Record Merge Results
   * 
   * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsMergesJobIdResultsGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdResultsGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsMergesJobIdResultsGet"));
    }

    // create path and map variables
    String path = "/vobjects/merges/{job_id}/results".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Record Merge Status
  * 
   * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsMergesJobIdStatusGet (String jobId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdStatusGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsMergesJobIdStatusGet"));
    }

    // create path and map variables
    String path = "/vobjects/merges/{job_id}/status".replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Record Merge Status
   * 
   * @param jobId The job_id field value returned from the merge operation. You can start merge operations with the Initiate Record Merge API request or with the Vault Java SDK.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsMergesJobIdStatusGet (String jobId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'jobId' is set
    if (jobId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'jobId' when calling vobjectsMergesJobIdStatusGet",
        new ApiException(400, "Missing the required parameter 'jobId' when calling vobjectsMergesJobIdStatusGet"));
    }

    // create path and map variables
    String path = "/vobjects/merges/{job_id}/status".replaceAll("\\{format\\}","json").replaceAll("\\{" + "job_id" + "\\}", apiInvoker.escapeString(jobId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Object Action on Multiple Records
  * 
   * @param objectName The object name__v field value.
   * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameActionsActionNamePost (String objectName, String actionName, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsActionNamePost"));
    }
    // verify the required parameter 'actionName' is set
    if (actionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'actionName' when calling vobjectsObjectNameActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'actionName' when calling vobjectsObjectNameActionsActionNamePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/{action_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "action_name" + "\\}", apiInvoker.escapeString(actionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Object Action on Multiple Records
   * 
   * @param objectName The object name__v field value.   * @param actionName Either the name of the Objectaction or Objectlifecyclestateuseraction to initiate. This is obtained from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameActionsActionNamePost (String objectName, String actionName, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsActionNamePost"));
    }
    // verify the required parameter 'actionName' is set
    if (actionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'actionName' when calling vobjectsObjectNameActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'actionName' when calling vobjectsObjectNameActionsActionNamePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/{action_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "action_name" + "\\}", apiInvoker.escapeString(actionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Change Object Type
  * 
   * @param objectName The name of the object.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameActionsChangetypePost (String objectName, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsChangetypePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsChangetypePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/changetype".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Change Object Type
   * 
   * @param objectName The name of the object.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameActionsChangetypePost (String objectName, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsChangetypePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsChangetypePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/changetype".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Record Merge
  * 
   * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @param vobjectsObjectNameActionsMergePostRequestInner 
   * @return void
  */
  public void vobjectsObjectNameActionsMergePost (String objectName, String authorization, String contentType, String accept, String xVaultAPIClientID, List<VobjectsObjectNameActionsMergePostRequestInner> vobjectsObjectNameActionsMergePostRequestInner) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = vobjectsObjectNameActionsMergePostRequestInner;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsMergePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsMergePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/merge".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Record Merge
   * 
   * @param objectName The object name__v field value. For example, account__v. This object must have Enable Merges configured.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.   * @param vobjectsObjectNameActionsMergePostRequestInner 
  */
  public void vobjectsObjectNameActionsMergePost (String objectName, String authorization, String contentType, String accept, String xVaultAPIClientID, List<VobjectsObjectNameActionsMergePostRequestInner> vobjectsObjectNameActionsMergePostRequestInner, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = vobjectsObjectNameActionsMergePostRequestInner;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsMergePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsMergePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/merge".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Roll-up Field Recalculation Status
  * 
   * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameActionsRecalculaterollupsGet (String objectName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/recalculaterollups".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Roll-up Field Recalculation Status
   * 
   * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameActionsRecalculaterollupsGet (String objectName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/recalculaterollups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Recalculate Roll-up Fields
  * 
   * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameActionsRecalculaterollupsPost (String objectName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/recalculaterollups".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Recalculate Roll-up Fields
   * 
   * @param objectName The name of the object for which to check the status of a Roll-up field recalculation.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameActionsRecalculaterollupsPost (String objectName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsRecalculaterollupsPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/recalculaterollups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Corporate Currency Fields
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameActionsUpdatecorporatecurrencyPut (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/updatecorporatecurrency".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Corporate Currency Fields
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameActionsUpdatecorporatecurrencyPut (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameActionsUpdatecorporatecurrencyPut"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/actions/updatecorporatecurrency".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Multiple Object Record Attachments
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param idParam 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameAttachmentsBatchDelete (String objectName, String idParam, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/attachments/batch".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Multiple Object Record Attachments
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param idParam    * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameAttachmentsBatchDelete (String objectName, String idParam, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/attachments/batch".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Multiple Object Record Attachments
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameAttachmentsBatchPost (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/attachments/batch".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Multiple Object Record Attachments
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameAttachmentsBatchPost (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/attachments/batch".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Multiple Object Record Attachment Descriptions
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameAttachmentsBatchPut (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPut",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPut"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/attachments/batch".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Multiple Object Record Attachment Descriptions
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameAttachmentsBatchPut (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPut",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameAttachmentsBatchPut"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/attachments/batch".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Object Records
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param authorization 
   * @param contentType Can be text/csv or application/json
   * @param accept Can be text/csv or application/json
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameDelete (String objectName, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Object Records
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param authorization    * @param contentType Can be text/csv or application/json   * @param accept Can be text/csv or application/json   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameDelete (String objectName, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Record Roles
  * 
   * @param objectName The object name.
   * @param id The id of the document, binder, or object record.
   * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameIdRolesRoleNameGet (String objectName, String id, String roleName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameIdRolesRoleNameGet"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling vobjectsObjectNameIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'id' when calling vobjectsObjectNameIdRolesRoleNameGet"));
    }
    // verify the required parameter 'roleName' is set
    if (roleName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleName' when calling vobjectsObjectNameIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'roleName' when calling vobjectsObjectNameIdRolesRoleNameGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{id}/roles/{role_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "role_name" + "\\}", apiInvoker.escapeString(roleName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Record Roles
   * 
   * @param objectName The object name.   * @param id The id of the document, binder, or object record.   * @param roleName Optional: Include a role name to filter for a specific role. For example, owner__v.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameIdRolesRoleNameGet (String objectName, String id, String roleName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameIdRolesRoleNameGet"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling vobjectsObjectNameIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'id' when calling vobjectsObjectNameIdRolesRoleNameGet"));
    }
    // verify the required parameter 'roleName' is set
    if (roleName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'roleName' when calling vobjectsObjectNameIdRolesRoleNameGet",
        new ApiException(400, "Missing the required parameter 'roleName' when calling vobjectsObjectNameIdRolesRoleNameGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{id}/roles/{role_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString())).replaceAll("\\{" + "role_name" + "\\}", apiInvoker.escapeString(roleName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object User Actions Details
  * 
   * @param objectName The object name__v field value.
   * @param objectRecordId The object record id field value from which to retrieve user actions.
   * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdActionsActionNameGet (String objectName, String objectRecordId, String actionName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet"));
    }
    // verify the required parameter 'actionName' is set
    if (actionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet",
        new ApiException(400, "Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "action_name" + "\\}", apiInvoker.escapeString(actionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object User Actions Details
   * 
   * @param objectName The object name__v field value.   * @param objectRecordId The object record id field value from which to retrieve user actions.   * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdActionsActionNameGet (String objectName, String objectRecordId, String actionName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet"));
    }
    // verify the required parameter 'actionName' is set
    if (actionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet",
        new ApiException(400, "Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNameGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "action_name" + "\\}", apiInvoker.escapeString(actionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Initiate Object Action on a Single Record
  * 
   * @param objectName The object name__v field value.
   * @param objectRecordId The object record id field value from which to retrieve user actions.
   * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.
   * @param authorization 
   * @param contentType 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdActionsActionNamePost (String objectName, String objectRecordId, String actionName, String authorization, String contentType, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost"));
    }
    // verify the required parameter 'actionName' is set
    if (actionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "action_name" + "\\}", apiInvoker.escapeString(actionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Initiate Object Action on a Single Record
   * 
   * @param objectName The object name__v field value.   * @param objectRecordId The object record id field value from which to retrieve user actions.   * @param actionName The name of the Objectaction or Objectlifecyclestateuseraction to initiate. You can retrieve this from the Retrieve User Actions request. The format for action_name is Objectaction.vobject.action or Objectlifecyclestateuseraction.vobject.state.action.   * @param authorization    * @param contentType    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdActionsActionNamePost (String objectName, String objectRecordId, String actionName, String authorization, String contentType, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost"));
    }
    // verify the required parameter 'actionName' is set
    if (actionName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost",
        new ApiException(400, "Missing the required parameter 'actionName' when calling vobjectsObjectNameObjectRecordIdActionsActionNamePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions/{action_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "action_name" + "\\}", apiInvoker.escapeString(actionName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cascade Delete Object Record
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdActionsCascadedeletePost (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions/cascadedelete".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cascade Delete Object Record
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdActionsCascadedeletePost (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsCascadedeletePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions/cascadedelete".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deep Copy Object Record
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdActionsDeepcopyPost (String objectName, String objectRecordId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions/deepcopy".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deep Copy Object Record
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdActionsDeepcopyPost (String objectName, String objectRecordId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsDeepcopyPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions/deepcopy".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Record User Actions
  * 
   * @param objectName The object name__v field value.
   * @param objectRecordId The object record id field value.
   * @param loc Optional: When true, retrieves localized (translated) strings for the label. 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdActionsGet (String objectName, String objectRecordId, Boolean loc, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Record User Actions
   * 
   * @param objectName The object name__v field value.   * @param objectRecordId The object record id field value.   * @param loc Optional: When true, retrieves localized (translated) strings for the label.    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdActionsGet (String objectName, String objectRecordId, Boolean loc, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdActionsGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdActionsGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/actions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "loc", loc));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Attachment Field File
  * 
   * @param objectName The object name__v field value. For example, product__v.
   * @param objectRecordId The object record id field value.
   * @param attachmentFieldName The name of the Attachment field to update.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet (String objectName, String objectRecordId, String attachmentFieldName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet"));
    }
    // verify the required parameter 'attachmentFieldName' is set
    if (attachmentFieldName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_field_name" + "\\}", apiInvoker.escapeString(attachmentFieldName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Attachment Field File
   * 
   * @param objectName The object name__v field value. For example, product__v.   * @param objectRecordId The object record id field value.   * @param attachmentFieldName The name of the Attachment field to update.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet (String objectName, String objectRecordId, String attachmentFieldName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet"));
    }
    // verify the required parameter 'attachmentFieldName' is set
    if (attachmentFieldName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFileGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_field_name" + "\\}", apiInvoker.escapeString(attachmentFieldName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Attachment Field File
  * 
   * @param objectName The object name__v field value. For example, product__v.
   * @param objectRecordId The object record id field value.
   * @param attachmentFieldName The name of the Attachment field to update.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost (String objectName, String objectRecordId, String attachmentFieldName, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost"));
    }
    // verify the required parameter 'attachmentFieldName' is set
    if (attachmentFieldName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost",
        new ApiException(400, "Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_field_name" + "\\}", apiInvoker.escapeString(attachmentFieldName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Attachment Field File
   * 
   * @param objectName The object name__v field value. For example, product__v.   * @param objectRecordId The object record id field value.   * @param attachmentFieldName The name of the Attachment field to update.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost (String objectName, String objectRecordId, String attachmentFieldName, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost"));
    }
    // verify the required parameter 'attachmentFieldName' is set
    if (attachmentFieldName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost",
        new ApiException(400, "Missing the required parameter 'attachmentFieldName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsAttachmentFieldNameFilePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/{attachment_field_name}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_field_name" + "\\}", apiInvoker.escapeString(attachmentFieldName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download All Attachment Field Files
  * 
   * @param objectName The object name__v field value. For example, product__v.
   * @param objectRecordId The object record id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/file".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download All Attachment Field Files
   * 
   * @param objectName The object name__v field value. For example, product__v.   * @param objectRecordId The object record id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentFieldsFileGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachment_fields/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Object Record Attachment
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param attachmentId The attachment id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete (String objectName, String objectRecordId, String attachmentId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Object Record Attachment
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param attachmentId The attachment id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete (String objectName, String objectRecordId, String attachmentId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Record Attachment Metadata
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param attachmentId The attachment id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet (String objectName, String objectRecordId, String attachmentId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Record Attachment Metadata
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param attachmentId The attachment id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet (String objectName, String objectRecordId, String attachmentId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Object Record Attachment Description
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param attachmentId The attachment id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut (String objectName, String objectRecordId, String attachmentId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Object Record Attachment Description
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param attachmentId The attachment id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut (String objectName, String objectRecordId, String attachmentId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdPut"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete Object Record Attachment Version
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param attachmentId The attachment id field value.
   * @param attachmentVersion The attachment version__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete (String objectName, String objectRecordId, String attachmentId, String attachmentVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete Object Record Attachment Version
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param attachmentId The attachment id field value.   * @param attachmentVersion The attachment version__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete (String objectName, String objectRecordId, String attachmentId, String attachmentVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download Object Record Attachment File
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param attachmentId The attachment id field value.
   * @param attachmentVersion 
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet (String objectName, String objectRecordId, String attachmentId, String attachmentVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download Object Record Attachment File
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param attachmentId The attachment id field value.   * @param attachmentVersion    * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet (String objectName, String objectRecordId, String attachmentId, String attachmentVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionFileGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Record Attachment Version Metadata
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param attachmentId The attachment id field value.
   * @param attachmentVersion The attachment version__v field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet (String objectName, String objectRecordId, String attachmentId, String attachmentVersion, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Record Attachment Version Metadata
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param attachmentId The attachment id field value.   * @param attachmentVersion The attachment version__v field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet (String objectName, String objectRecordId, String attachmentId, String attachmentVersion, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Restore Object Record Attachment Version
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param attachmentId The attachment id field value.
   * @param attachmentVersion The attachment version__v field value.
   * @param restore 
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost (String objectName, String objectRecordId, String attachmentId, String attachmentVersion, Boolean restore, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "restore", restore));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Restore Object Record Attachment Version
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param attachmentId The attachment id field value.   * @param attachmentVersion The attachment version__v field value.   * @param restore    * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost (String objectName, String objectRecordId, String attachmentId, String attachmentVersion, Boolean restore, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }
    // verify the required parameter 'attachmentVersion' is set
    if (attachmentVersion == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost",
        new ApiException(400, "Missing the required parameter 'attachmentVersion' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsAttachmentVersionPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions/{attachment_version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString())).replaceAll("\\{" + "attachment_version" + "\\}", apiInvoker.escapeString(attachmentVersion.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "restore", restore));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Record Attachment Versions
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param attachmentId The attachment id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet (String objectName, String objectRecordId, String attachmentId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Record Attachment Versions
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param attachmentId The attachment id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet (String objectName, String objectRecordId, String attachmentId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet"));
    }
    // verify the required parameter 'attachmentId' is set
    if (attachmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet",
        new ApiException(400, "Missing the required parameter 'attachmentId' when calling vobjectsObjectNameObjectRecordIdAttachmentsAttachmentIdVersionsGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/{attachment_id}/versions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString())).replaceAll("\\{" + "attachment_id" + "\\}", apiInvoker.escapeString(attachmentId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Download All Object Record Attachment Files
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsFileGet (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/file".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Download All Object Record Attachment Files
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsFileGet (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsFileGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Record Attachments
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsGet (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Record Attachments
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsGet (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create Object Record Attachment
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsPost (String objectName, String objectRecordId, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create Object Record Attachment
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAttachmentsPost (String objectName, String objectRecordId, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAttachmentsPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/attachments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Complete Audit History for a Single Object Record
  * 
   * @param objectName The object name__v field value.
   * @param objectRecordId The object record id field value from which to retrieve user actions.
   * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date. 
   * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date. 
   * @param formatResult To request a CSV file of your audit history, use csv. 
   * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.
   * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.
   * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdAudittrailGet (String objectName, String objectRecordId, String startDate, String endDate, String formatResult, String limit, String offset, String events, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAudittrailGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAudittrailGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAudittrailGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAudittrailGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/audittrail".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "events", events));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Complete Audit History for a Single Object Record
   * 
   * @param objectName The object name__v field value.   * @param objectRecordId The object record id field value from which to retrieve user actions.   * @param startDate Specify a start date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to the vVault’s creation date.    * @param endDate Specify an end date to retrieve audit history. This date cannot be more than 30 days ago. Dates must be YYYY-MM-DDTHH:MM:SSZ format, for example, 7AM on January 15, 2018 would use 2018-01-15T07:00:00Z. If omitted, defaults to today’s date.    * @param formatResult To request a CSV file of your audit history, use csv.    * @param limit Paginate the results by specifying the maximum number of histories per page in the response. This can be any value between 1 and 1000. If omitted, defaults to 200.   * @param offset Paginate the results displayed per page by specifying the amount of offset from the entry returned. For example, if you are viewing the first 50 results (page 1) and want to see the next page, set this to offset&#x3D;51. If omitted, defaults to 0.   * @param events Provide a comma-separated list of one or more audit events to retrieve their audit history. See Vault Help for a full list of object audit events. The values passed to this parameter are case sensitive. For example, events&#x3D;Copy,Edit,Delete. If omitted, defaults to all audit events.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdAudittrailGet (String objectName, String objectRecordId, String startDate, String endDate, String formatResult, String limit, String offset, String events, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAudittrailGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdAudittrailGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAudittrailGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdAudittrailGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}/audittrail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start_date", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "end_date", endDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "format_result", formatResult));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "limit", limit));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "offset", offset));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "events", events));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Object Record
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param objectRecordId The object record id field value.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameObjectRecordIdGet (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Object Record
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param objectRecordId The object record id field value.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameObjectRecordIdGet (String objectName, String objectRecordId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdGet",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameObjectRecordIdGet"));
    }
    // verify the required parameter 'objectRecordId' is set
    if (objectRecordId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdGet",
        new ApiException(400, "Missing the required parameter 'objectRecordId' when calling vobjectsObjectNameObjectRecordIdGet"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/{object_record_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString())).replaceAll("\\{" + "object_record_id" + "\\}", apiInvoker.escapeString(objectRecordId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create &amp; Upsert Object Records
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.
   * @param authorization 
   * @param contentType Can be text/csv or application/json
   * @param accept Can be text/csv or application/json
   * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
   * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNamePost (String objectName, String idParam, String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, Boolean xVaultAPINoTriggers, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNamePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNamePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-NoTriggers", ApiInvoker.parameterToString(xVaultAPINoTriggers));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create &amp; Upsert Object Records
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param idParam To upsert object records, add &#x60;idParam&#x3D;{field_name}&#x60; to the request endpoint. You can use any object field which has &#x60;unique&#x60; set to &#x60;true&#x60; in the object metadata. For example, &#x60;idParam&#x3D;external_id__v&#x60;.   * @param authorization    * @param contentType Can be text/csv or application/json   * @param accept Can be text/csv or application/json   * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to create or update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.   * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNamePost (String objectName, String idParam, String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, Boolean xVaultAPINoTriggers, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNamePost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNamePost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "idParam", idParam));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-NoTriggers", ApiInvoker.parameterToString(xVaultAPINoTriggers));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update Object Records
  * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).
   * @param authorization 
   * @param contentType Can be text/csv or application/json
   * @param accept Can be text/csv or application/json
   * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.
   * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNamePut (String objectName, String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, Boolean xVaultAPINoTriggers, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNamePut",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNamePut"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-NoTriggers", ApiInvoker.parameterToString(xVaultAPINoTriggers));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update Object Records
   * 
   * @param objectName The object name__v field value (product__v, country__v, custom_object__c, etc.).   * @param authorization    * @param contentType Can be text/csv or application/json   * @param accept Can be text/csv or application/json   * @param xVaultAPIMigrationMode If set to &#x60;true&#x60;, Vault allows you to update object records in a noninitial state and with minimal validation, create inactive records, and set standard and system-managed fields such as &#x60;created_by__v&#x60;. Does not bypass record triggers. Use the &#x60;X-VaultAPI-NoTriggers&#x60; header to bypass all standard and custom SDK triggers. You must have the Record Migration permission to use this header.   * @param xVaultAPINoTriggers If set to &#x60;true&#x60; and Record Migration Mode is enabled, it bypasses all standard and custom SDK triggers.   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNamePut (String objectName, String authorization, String contentType, String accept, Boolean xVaultAPIMigrationMode, Boolean xVaultAPINoTriggers, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNamePut",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNamePut"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-MigrationMode", ApiInvoker.parameterToString(xVaultAPIMigrationMode));
    headerParams.put("X-VaultAPI-NoTriggers", ApiInvoker.parameterToString(xVaultAPINoTriggers));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Remove Users &amp; Groups from Roles on Object Records
  * 
   * @param objectName The name of the object where you want to remove roles.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameRolesDelete (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/roles".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Remove Users &amp; Groups from Roles on Object Records
   * 
   * @param objectName The name of the object where you want to remove roles.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameRolesDelete (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesDelete",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesDelete"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Assign Users &amp; Groups to Roles on Object Records
  * 
   * @param objectName The name of the object where you want to remove roles.
   * @param authorization 
   * @param accept 
   * @param contentType 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsObjectNameRolesPost (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/roles".replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Assign Users &amp; Groups to Roles on Object Records
   * 
   * @param objectName The name of the object where you want to remove roles.   * @param authorization    * @param accept    * @param contentType    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsObjectNameRolesPost (String objectName, String authorization, String accept, String contentType, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'objectName' is set
    if (objectName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesPost",
        new ApiException(400, "Missing the required parameter 'objectName' when calling vobjectsObjectNameRolesPost"));
    }

    // create path and map variables
    String path = "/vobjects/{object_name}/roles".replaceAll("\\{format\\}","json").replaceAll("\\{" + "object_name" + "\\}", apiInvoker.escapeString(objectName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Retrieve Outbound Package Dependencies
  * 
   * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.
   * @param authorization 
   * @param accept 
   * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
   * @return void
  */
  public void vobjectsOutboundPackageVPackageIdDependenciesGet (String packageId, String authorization, String accept, String xVaultAPIClientID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'packageId' is set
    if (packageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'packageId' when calling vobjectsOutboundPackageVPackageIdDependenciesGet",
        new ApiException(400, "Missing the required parameter 'packageId' when calling vobjectsOutboundPackageVPackageIdDependenciesGet"));
    }

    // create path and map variables
    String path = "/vobjects/outbound_package__v/{package_id}/dependencies".replaceAll("\\{" + "package_id" + "\\}", apiInvoker.escapeString(packageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Retrieve Outbound Package Dependencies
   * 
   * @param packageId The ID of the outbound_package__v record from which to retrieve dependencies.   * @param authorization    * @param accept    * @param xVaultAPIClientID Include a Client ID to identify this request. This ID appears in the API Usage Logs, which is avaiable to download from Admin &gt; Logs &gt; API Usage Logs or through the Vault REST API with the Download Daily API Usage request. If omitted, the value will appear as &#x60;unknown&#x60; in the API Usage Log.
  */
  public void vobjectsOutboundPackageVPackageIdDependenciesGet (String packageId, String authorization, String accept, String xVaultAPIClientID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'packageId' is set
    if (packageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'packageId' when calling vobjectsOutboundPackageVPackageIdDependenciesGet",
        new ApiException(400, "Missing the required parameter 'packageId' when calling vobjectsOutboundPackageVPackageIdDependenciesGet"));
    }

    // create path and map variables
    String path = "/vobjects/outbound_package__v/{package_id}/dependencies".replaceAll("\\{format\\}","json").replaceAll("\\{" + "package_id" + "\\}", apiInvoker.escapeString(packageId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Accept", ApiInvoker.parameterToString(accept));
    headerParams.put("X-VaultAPI-ClientID", ApiInvoker.parameterToString(xVaultAPIClientID));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
